export G_ReflectMissile
code
proc G_ReflectMissile 116 16
file "../g_missile.c"
line 18
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:#include "g_local.h"
;4:
;5:#define	MISSILE_PRESTEP_TIME	50
;6:
;7:extern void laserTrapStick( gentity_t *ent, vec3_t endpos, vec3_t normal );
;8:
;9:/*
;10:================
;11:G_ReflectMissile
;12:
;13:  Reflect the missile roughly back at it's owner
;14:================
;15:*/
;16:float RandFloat(float min, float max);
;17:void G_ReflectMissile( gentity_t *ent, gentity_t *missile, vec3_t forward ) 
;18:{
line 22
;19:	vec3_t	bounce_dir;
;20:	int		i;
;21:	float	speed;
;22:	gentity_t	*owner = ent;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
line 23
;23:	int		isowner = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 27
;24:	vec3_t fwd;	//Boot
;25:	vec3_t targetDir;
;26:
;27:	if ( ent->r.ownerNum )
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
CNSTI4 0
EQI4 $79
line 28
;28:	{
line 29
;29:		owner = &g_entities[ent->r.ownerNum];
ADDRLP4 44
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 30
;30:	}
LABELV $79
line 32
;31:
;32:	if (missile->r.ownerNum == ent->s.number)
ADDRFP4 4
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $81
line 33
;33:	{ //the original owner is bouncing the missile, so don't try to bounce it back at him
line 34
;34:		isowner = 1;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 35
;35:	}
LABELV $81
line 38
;36:
;37:	//save the original speed
;38:	speed = VectorNormalize( missile->s.pos.trDelta );
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 12
ADDRLP4 52
INDIRF4
ASGNF4
line 41
;39:
;40:	//if ( ent && owner && owner->NPC && owner->enemy && Q_stricmp( "Tavion", owner->NPC_type ) == 0 && Q_irand( 0, 3 ) )
;41:	if (&g_entities[missile->r.ownerNum] && missile->s.weapon != WP_SABER && missile->s.weapon != G2_MODEL_PART && !isowner)
ADDRLP4 56
ADDRFP4 4
INDIRP4
ASGNP4
CNSTI4 828
ADDRLP4 56
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
CVPU4 4
CNSTU4 0
EQU4 $83
ADDRLP4 60
ADDRLP4 56
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 2
EQI4 $83
ADDRLP4 60
INDIRI4
CNSTI4 50
EQI4 $83
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $83
line 43
;42:		
;43:	{//bounce back at them if you can
line 45
;44:
;45:		AngleVectors(ent->client->ps.viewangles, fwd, 0, 0);	//Boot	-- launch the missile where you're aiming
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 64
CNSTP4 0
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 46
;46:		targetDir[0] = ent->client->ps.origin[0] - fwd[0];
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
SUBF4
ASGNF4
line 47
;47:		targetDir[1] = ent->client->ps.origin[1] - fwd[1];
ADDRLP4 20+4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 32+4
INDIRF4
SUBF4
ASGNF4
line 48
;48:		targetDir[2] = ent->client->ps.origin[2] - fwd[2];
ADDRLP4 20+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 32+8
INDIRF4
SUBF4
ASGNF4
line 50
;49:
;50:		VectorSubtract(/*g_entities[missile->r.ownerNum].r.currentOrigin*/ent->r.currentOrigin, targetDir/*Boot comment: missile->r.currentOrigin*/, bounce_dir);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
CNSTI4 368
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 372
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 376
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
SUBF4
ASGNF4
line 51
;51:		VectorNormalize( bounce_dir );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 52
;52:	}
ADDRGP4 $84
JUMPV
LABELV $83
line 53
;53:	else if (isowner)
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $93
line 54
;54:	{ //in this case, actually push the missile away from me, and since we're giving boost to our own missile by pushing it, up the velocity
line 57
;55:		vec3_t missile_dir;
;56:
;57:		speed *= 1.5;
ADDRLP4 12
CNSTF4 1069547520
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 59
;58:
;59:		VectorSubtract( missile->r.currentOrigin, ent->r.currentOrigin, missile_dir );
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 368
ASGNI4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 76
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 88
CNSTI4 372
ASGNI4
ADDRLP4 64+4
ADDRLP4 76
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92
CNSTI4 376
ASGNI4
ADDRLP4 64+8
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 60
;60:		VectorCopy( missile->s.pos.trDelta, bounce_dir );
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 61
;61:		VectorScale( bounce_dir, DotProduct( forward, missile_dir ), bounce_dir );
ADDRLP4 96
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 104
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
MULF4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
MULF4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 112
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDRLP4 112
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 62
;62:		VectorNormalize( bounce_dir );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 63
;63:	}
ADDRGP4 $94
JUMPV
LABELV $93
line 65
;64:	else
;65:	{
line 68
;66:		vec3_t missile_dir;
;67:
;68:		VectorSubtract( ent->r.currentOrigin, missile->r.currentOrigin, missile_dir );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 368
ASGNI4
ADDRLP4 84
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 76
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 88
CNSTI4 372
ASGNI4
ADDRLP4 64+4
ADDRLP4 76
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92
CNSTI4 376
ASGNI4
ADDRLP4 64+8
ADDRFP4 0
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 69
;69:		VectorCopy( missile->s.pos.trDelta, bounce_dir );
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 70
;70:		VectorScale( bounce_dir, DotProduct( forward, missile_dir ), bounce_dir );
ADDRLP4 96
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 64
INDIRF4
ASGNF4
ADDRLP4 104
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
MULF4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRLP4 100
INDIRF4
MULF4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 112
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 112
INDIRP4
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDRLP4 112
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 71
;71:		VectorNormalize( bounce_dir );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 72
;72:	}
LABELV $94
LABELV $84
line 78
;73:	/*for ( i = 0; i < 3; i++ )	//Boot
;74:	{
;75:		bounce_dir[i] += RandFloat( -0.2f, 0.2f );
;76:	}*/
;77:
;78:	VectorNormalize( bounce_dir );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 79
;79:	VectorScale( bounce_dir, speed, missile->s.pos.trDelta );
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 80
;80:	missile->s.pos.trTime = level.time;		// move a bit on the very first frame
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 81
;81:	VectorCopy( missile->r.currentOrigin, missile->s.pos.trBase );
ADDRLP4 64
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 368
ADDP4
INDIRB
ASGNB 12
line 82
;82:	if ( missile->s.weapon != WP_SABER && missile->s.weapon != G2_MODEL_PART )
ADDRLP4 68
ADDRFP4 4
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 2
EQI4 $122
ADDRLP4 68
INDIRI4
CNSTI4 50
EQI4 $122
line 83
;83:	{//you are mine, now!
line 84
;84:		missile->r.ownerNum = ent->s.number;
ADDRFP4 4
INDIRP4
CNSTI4 396
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 85
;85:	}
LABELV $122
line 86
;86:	if ( missile->s.weapon == WP_ROCKET_LAUNCHER )
ADDRFP4 4
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 10
NEI4 $124
line 87
;87:	{//stop homing
line 88
;88:		missile->think = 0;
ADDRFP4 4
INDIRP4
CNSTI4 636
ADDP4
CNSTP4 0
ASGNP4
line 89
;89:		missile->nextthink = 0;
ADDRFP4 4
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 0
ASGNI4
line 90
;90:	}
LABELV $124
line 91
;91:}
LABELV $78
endproc G_ReflectMissile 116 16
export G_DeflectMissile
proc G_DeflectMissile 72 16
line 94
;92:
;93:void G_DeflectMissile( gentity_t *ent, gentity_t *missile, vec3_t forward ) 
;94:{
line 98
;95:	vec3_t	bounce_dir;
;96:	int		i;
;97:	float	speed;
;98:	int		isowner = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 101
;99:	vec3_t missile_dir;
;100:
;101:	if (missile->r.ownerNum == ent->s.number)
ADDRFP4 4
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $127
line 102
;102:	{ //the original owner is bouncing the missile, so don't try to bounce it back at him
line 103
;103:		isowner = 1;
ADDRLP4 32
CNSTI4 1
ASGNI4
line 104
;104:	}
LABELV $127
line 107
;105:
;106:	//save the original speed
;107:	speed = VectorNormalize( missile->s.pos.trDelta );
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 36
INDIRF4
ASGNF4
line 110
;108:
;109:	//VectorSubtract( ent->r.currentOrigin, missile->r.currentOrigin, missile_dir );
;110:	AngleVectors(ent->client->ps.viewangles, missile_dir, 0, 0);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 40
CNSTP4 0
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 111
;111:	VectorCopy(missile_dir, bounce_dir);
ADDRLP4 4
ADDRLP4 16
INDIRB
ASGNB 12
line 113
;112:	//VectorCopy( missile->s.pos.trDelta, bounce_dir );
;113:	VectorScale( bounce_dir, DotProduct( forward, missile_dir ), bounce_dir );
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 52
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 56
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRLP4 16+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ADDF4
ADDRLP4 60
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
MULF4
ADDF4
MULF4
ASGNF4
line 114
;114:	VectorNormalize( bounce_dir );
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 116
;115:
;116:	for ( i = 0; i < 3; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $139
line 117
;117:	{
line 118
;118:		bounce_dir[i] += RandFloat( -1.0f, 1.0f );
CNSTF4 3212836864
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 64
ADDRGP4 RandFloat
CALLF4
ASGNF4
ADDRLP4 68
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 64
INDIRF4
ADDF4
ASGNF4
line 119
;119:	}
LABELV $140
line 116
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $139
line 121
;120:
;121:	VectorNormalize( bounce_dir );
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 122
;122:	VectorScale( bounce_dir, speed, missile->s.pos.trDelta );
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 4+4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4+8
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 123
;123:	missile->s.pos.trTime = level.time;		// move a bit on the very first frame
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 124
;124:	VectorCopy( missile->r.currentOrigin, missile->s.pos.trBase );
ADDRLP4 64
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 368
ADDP4
INDIRB
ASGNB 12
line 125
;125:	if ( missile->s.weapon != WP_SABER && missile->s.weapon != G2_MODEL_PART )
ADDRLP4 68
ADDRFP4 4
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 2
EQI4 $146
ADDRLP4 68
INDIRI4
CNSTI4 50
EQI4 $146
line 126
;126:	{//you are mine, now!
line 127
;127:		missile->r.ownerNum = ent->s.number;
ADDRFP4 4
INDIRP4
CNSTI4 396
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 128
;128:	}
LABELV $146
line 129
;129:	if ( missile->s.weapon == WP_ROCKET_LAUNCHER )
ADDRFP4 4
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 10
NEI4 $148
line 130
;130:	{//stop homing
line 131
;131:		missile->think = 0;
ADDRFP4 4
INDIRP4
CNSTI4 636
ADDP4
CNSTP4 0
ASGNP4
line 132
;132:		missile->nextthink = 0;
ADDRFP4 4
INDIRP4
CNSTI4 632
ADDP4
CNSTI4 0
ASGNI4
line 133
;133:	}
LABELV $148
line 134
;134:}
LABELV $126
endproc G_DeflectMissile 72 16
export G_BounceMissile
proc G_BounceMissile 44 12
line 142
;135:
;136:/*
;137:================
;138:G_BounceMissile
;139:
;140:================
;141:*/
;142:void G_BounceMissile( gentity_t *ent, trace_t *trace ) {
line 148
;143:	vec3_t	velocity;
;144:	float	dot;
;145:	int		hitTime;
;146:
;147:	// reflect the velocity on the trace plane
;148:	hitTime = level.previousTime + ( level.time - level.previousTime ) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 149
;149:	BG_EvaluateTrajectoryDelta( &ent->s.pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 150
;150:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 151
;151:	VectorMA( velocity, -2*dot, trace->plane.normal, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 154
;152:
;153:
;154:	if ( ent->s.eFlags & EF_BOUNCE_SHRAPNEL ) 
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $158
line 155
;155:	{
line 156
;156:		VectorScale( ent->s.pos.trDelta, 0.25f, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1048576000
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTF4 1048576000
ADDRLP4 28
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTF4 1048576000
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ASGNF4
line 157
;157:		ent->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 160
;158:
;159:		// check for stop
;160:		if ( trace->plane.normal[2] > 0.7 && ent->s.pos.trDelta[2] < 40 ) //this can happen even on very slightly sloped walls, so changed it from > 0 to > 0.7
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1060320051
LEF4 $159
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1109393408
GEF4 $159
line 161
;161:		{
line 162
;162:			G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 163
;163:			ent->nextthink = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 164
;164:			return;
ADDRGP4 $150
JUMPV
line 166
;165:		}
;166:	}
LABELV $158
line 167
;167:	else if ( ent->s.eFlags & EF_BOUNCE_HALF ) 
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $163
line 168
;168:	{
line 169
;169:		VectorScale( ent->s.pos.trDelta, 0.65, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1059481190
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTF4 1059481190
ADDRLP4 28
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTF4 1059481190
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ASGNF4
line 171
;170:		// check for stop
;171:		if ( trace->plane.normal[2] > 0.2 && VectorLength( ent->s.pos.trDelta ) < 40 ) 
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1045220557
LEF4 $165
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1109393408
GEF4 $165
line 172
;172:		{
line 173
;173:			G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 174
;174:			return;
ADDRGP4 $150
JUMPV
LABELV $165
line 176
;175:		}
;176:	}
LABELV $163
LABELV $159
line 178
;177:
;178:	if (ent->s.weapon == WP_THERMAL)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 11
NEI4 $167
line 179
;179:	{ //slight hack for hit sound
line 180
;180:		G_Sound(ent, CHAN_BODY, G_SoundIndex(va("sound/weapons/thermal/bounce%i.wav", Q_irand(1, 2))));
CNSTI4 1
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 24
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRGP4 $169
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 181
;181:	}
ADDRGP4 $168
JUMPV
LABELV $167
line 182
;182:	else if (ent->s.weapon == WP_SABER)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 2
NEI4 $170
line 183
;183:	{
line 184
;184:		G_Sound(ent, CHAN_BODY, G_SoundIndex(va("sound/weapons/saber/bounce%i.wav", Q_irand(1, 3))));
CNSTI4 1
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRGP4 $172
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 185
;185:	}
ADDRGP4 $171
JUMPV
LABELV $170
line 186
;186:	else if (ent->s.weapon == G2_MODEL_PART)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
NEI4 $173
line 187
;187:	{
line 189
;188:		//Limb bounce sound?
;189:	}
LABELV $173
LABELV $171
LABELV $168
line 191
;190:
;191:	VectorAdd( ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 372
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 376
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 192
;192:	VectorCopy( ent->r.currentOrigin, ent->s.pos.trBase );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 368
ADDP4
INDIRB
ASGNB 12
line 193
;193:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 195
;194:
;195:	if (ent->bounceCount != -5)
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
CNSTI4 -5
EQI4 $176
line 196
;196:	{
line 197
;197:		ent->bounceCount--;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 198
;198:	}
LABELV $176
line 199
;199:}
LABELV $150
endproc G_BounceMissile 44 12
export G_ExplodeMissile
proc G_ExplodeMissile 44 24
line 209
;200:
;201:
;202:/*
;203:================
;204:G_ExplodeMissile
;205:
;206:Explode a missile without an impact
;207:================
;208:*/
;209:void G_ExplodeMissile( gentity_t *ent ) {
line 213
;210:	vec3_t		dir;
;211:	vec3_t		origin;
;212:
;213:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 214
;214:	SnapVector( origin );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 215
;215:	G_SetOrigin( ent, origin );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 218
;216:
;217:	// we don't have a valid direction, so just point straight up
;218:	dir[0] = dir[1] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 12+4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 24
INDIRF4
ASGNF4
line 219
;219:	dir[2] = 1;
ADDRLP4 12+8
CNSTF4 1065353216
ASGNF4
line 221
;220:
;221:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 222
;222:	G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( dir ) );
ADDRLP4 12
ARGP4
ADDRLP4 28
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 74
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 224
;223:
;224:	ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 1
ASGNI4
line 227
;225:
;226:	// splash damage
;227:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
INDIRI4
CNSTI4 0
EQI4 $186
line 228
;228:		if( G_RadiusDamage( ent->r.currentOrigin, ent->parent, ent->splashDamage, ent->splashRadius, ent, 
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 696
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 708
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $188
line 230
;229:				ent->splashMethodOfDeath ) ) 
;230:		{
line 231
;231:			if (ent->parent)
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $190
line 232
;232:			{
line 233
;233:				g_entities[ent->parent->s.number].client->accuracy_hits++;
ADDRLP4 40
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1656
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 234
;234:			}
ADDRGP4 $191
JUMPV
LABELV $190
line 235
;235:			else if (ent->activator)
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $193
line 236
;236:			{
line 237
;237:				g_entities[ent->activator->s.number].client->accuracy_hits++;
ADDRLP4 40
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 732
ADDP4
INDIRP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1656
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 238
;238:			}
LABELV $193
LABELV $191
line 239
;239:		}
LABELV $188
line 240
;240:	}
LABELV $186
line 242
;241:
;242:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 243
;243:}
LABELV $178
endproc G_ExplodeMissile 44 24
export G_RunStuckMissile
proc G_RunStuckMissile 32 32
line 246
;244:
;245:void G_RunStuckMissile( gentity_t *ent )
;246:{
line 247
;247:	if ( ent->takedamage )
ADDRFP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $197
line 248
;248:	{
line 249
;249:		if ( ent->s.groundEntityNum >= 0 && ent->s.groundEntityNum < ENTITYNUM_WORLD )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $199
ADDRLP4 0
INDIRI4
CNSTI4 1022
GEI4 $199
line 250
;250:		{
line 251
;251:			gentity_t *other = &g_entities[ent->s.groundEntityNum];
ADDRLP4 4
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 253
;252:
;253:			if ( (!VectorCompare( vec3_origin, other->s.pos.trDelta ) && other->s.pos.trType != TR_STATIONARY) || 
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 VectorCompare
CALLI4
ASGNI4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $204
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $203
LABELV $204
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 72
ADDP4
ARGP4
ADDRLP4 16
ADDRGP4 VectorCompare
CALLI4
ASGNI4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $201
ADDRLP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $201
LABELV $203
line 255
;254:				(!VectorCompare( vec3_origin, other->s.apos.trDelta ) && other->s.apos.trType != TR_STATIONARY) )
;255:			{//thing I stuck to is moving or rotating now, kill me
line 256
;256:				G_Damage( ent, other, other, NULL, NULL, 99999, 0, MOD_CRUSH );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
CNSTP4 0
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
ARGP4
CNSTI4 99999
ARGI4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 257
;257:				return;
ADDRGP4 $196
JUMPV
LABELV $201
line 259
;258:			}
;259:		}
LABELV $199
line 260
;260:	}
LABELV $197
line 262
;261:	// check think function
;262:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 263
;263:}
LABELV $196
endproc G_RunStuckMissile 32 32
export G_BounceProjectile
proc G_BounceProjectile 64 4
line 270
;264:
;265:/*
;266:================
;267:G_BounceProjectile
;268:================
;269:*/
;270:void G_BounceProjectile( vec3_t start, vec3_t impact, vec3_t dir, vec3_t endout ) {
line 274
;271:	vec3_t v, newv;
;272:	float dot;
;273:
;274:	VectorSubtract( impact, start, v );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 36
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 275
;275:	dot = DotProduct( v, dir );
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 276
;276:	VectorMA( v, -2*dot, dir, newv );
ADDRLP4 48
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 52
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 24
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 278
;277:
;278:	VectorNormalize(newv);
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 279
;279:	VectorMA(impact, 8192, newv, endout);
ADDRFP4 12
INDIRP4
ADDRFP4 4
INDIRP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
CNSTI4 4
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
CNSTI4 8
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
CNSTF4 1174405120
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 280
;280:}
LABELV $205
endproc G_BounceProjectile 64 4
export CreateMissile
proc CreateMissile 20 0
line 287
;281:
;282:
;283://-----------------------------------------------------------------------------
;284:gentity_t *CreateMissile( vec3_t org, vec3_t dir, float vel, int life, 
;285:							gentity_t *owner, qboolean altFire)
;286://-----------------------------------------------------------------------------
;287:{
line 290
;288:	gentity_t	*missile;
;289:
;290:	missile = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 292
;291:	
;292:	missile->nextthink = level.time + life;
ADDRLP4 0
INDIRP4
CNSTI4 632
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
ASGNI4
line 293
;293:	missile->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 294
;294:	missile->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 295
;295:	missile->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 304
ADDP4
CNSTI4 128
ASGNI4
line 296
;296:	missile->parent = owner;
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
ADDRFP4 16
INDIRP4
ASGNP4
line 297
;297:	missile->r.ownerNum = owner->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 396
ADDP4
ADDRFP4 16
INDIRP4
INDIRI4
ASGNI4
line 299
;298:
;299:	if (altFire)
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $218
line 300
;300:	{
line 301
;301:		missile->s.eFlags |= EF_ALT_FIRING;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 302
;302:	}
LABELV $218
line 304
;303:
;304:	missile->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 305
;305:	missile->s.pos.trTime = level.time;// - MISSILE_PRESTEP_TIME;	// NOTENOTE This is a Quake 3 addition over JK2
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 306
;306:	missile->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 604
ADDP4
CNSTP4 0
ASGNP4
line 308
;307:
;308:	SnapVector(org);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 309
;309:	VectorCopy( org, missile->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 310
;310:	VectorScale( dir, vel, missile->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 4
INDIRP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 311
;311:	VectorCopy( org, missile->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 368
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 312
;312:	SnapVector(missile->s.pos.trDelta);
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 314
;313:
;314:	return missile;
ADDRLP4 0
INDIRP4
RETP4
LABELV $216
endproc CreateMissile 20 0
export G_MissileImpact
proc G_MissileImpact 104 32
line 323
;315:}
;316:
;317:
;318:/*
;319:================
;320:G_MissileImpact
;321:================
;322:*/
;323:void G_MissileImpact( gentity_t *ent, trace_t *trace ) {
line 325
;324:	gentity_t		*other;
;325:	qboolean		hitClient = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 326
;326:	other = &g_entities[trace->entityNum];
ADDRLP4 0
CNSTI4 828
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 329
;327:
;328:	// check for bounce
;329:	if ( !other->takedamage &&
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $222
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRI4
GTI4 $224
ADDRLP4 12
INDIRI4
CNSTI4 -5
NEI4 $222
LABELV $224
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 48
BANDI4
CNSTI4 0
EQI4 $222
line 331
;330:		(ent->bounceCount > 0 || ent->bounceCount == -5) &&
;331:		( ent->s.eFlags & ( EF_BOUNCE | EF_BOUNCE_HALF ) ) ) {
line 332
;332:		G_BounceMissile( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_BounceMissile
CALLV
pop
line 333
;333:		G_AddEvent( ent, EV_GRENADE_BOUNCE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 61
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 334
;334:		return;
ADDRGP4 $221
JUMPV
LABELV $222
line 338
;335:	}
;336:	
;337:	// I would glom onto the EF_BOUNCE code section above, but don't feel like risking breaking something else
;338:	if ( (!other->takedamage && (ent->bounceCount > 0 || ent->bounceCount == -5) && ( ent->s.eFlags&(EF_BOUNCE_SHRAPNEL) ) ) || ((trace->surfaceFlags&SURF_FORCEFIELD)&&!ent->splashDamage&&!ent->splashRadius&&(ent->bounceCount > 0 || ent->bounceCount == -5)) ) 
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $229
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 16
INDIRI4
GTI4 $230
ADDRLP4 20
INDIRI4
CNSTI4 -5
NEI4 $229
LABELV $230
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $231
LABELV $229
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 65536
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $225
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 696
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $225
ADDRLP4 28
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $225
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 24
INDIRI4
GTI4 $231
ADDRLP4 32
INDIRI4
CNSTI4 -5
NEI4 $225
LABELV $231
line 339
;339:	{
line 340
;340:		G_BounceMissile( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_BounceMissile
CALLV
pop
line 342
;341:
;342:		if ( ent->bounceCount < 1 )
ADDRFP4 0
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
CNSTI4 1
GEI4 $221
line 343
;343:		{
line 344
;344:			ent->s.eFlags &= ~EF_BOUNCE_SHRAPNEL;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 345
;345:		}
line 346
;346:		return;
ADDRGP4 $221
JUMPV
LABELV $225
line 362
;347:	}
;348:
;349:	/*
;350:	if ( !other->takedamage && ent->s.weapon == WP_THERMAL && !ent->alt_fire )
;351:	{//rolling thermal det - FIXME: make this an eFlag like bounce & stick!!!
;352:		//G_BounceRollMissile( ent, trace );
;353:		if ( ent->owner && ent->owner->s.number == 0 ) 
;354:		{
;355:			G_MissileAddAlerts( ent );
;356:		}
;357:		//gi.linkentity( ent );
;358:		return;
;359:	}
;360:	*/
;361:
;362:	if (other->r.contents & CONTENTS_LIGHTSABER)
ADDRLP4 0
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 262144
BANDI4
CNSTI4 0
EQI4 $234
line 363
;363:	{ //hit this person's saber, so..
line 364
;364:		gentity_t *otherOwner = &g_entities[other->r.ownerNum];
ADDRLP4 36
CNSTI4 828
ADDRLP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 366
;365:
;366:		if (otherOwner->takedamage && otherOwner->client && otherOwner->client->ps.duelInProgress &&
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $235
ADDRLP4 48
ADDRLP4 36
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $235
ADDRLP4 48
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $235
ADDRLP4 48
INDIRP4
CNSTI4 1284
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
EQI4 $235
line 368
;367:			otherOwner->client->ps.duelIndex != ent->r.ownerNum)
;368:		{
line 369
;369:			goto killProj;
ADDRGP4 $238
JUMPV
line 371
;370:		}
;371:	}
LABELV $234
line 373
;372:	else
;373:	{
line 374
;374:		if (other->takedamage && other->client && other->client->ps.duelInProgress &&
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $239
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $239
ADDRLP4 44
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $239
ADDRLP4 44
INDIRP4
CNSTI4 1284
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
EQI4 $239
line 376
;375:			other->client->ps.duelIndex != ent->r.ownerNum)
;376:		{
line 377
;377:			goto killProj;
ADDRGP4 $238
JUMPV
LABELV $239
line 379
;378:		}
;379:	}
LABELV $235
line 381
;380:
;381:	if (other->takedamage && other->client &&
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $241
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $241
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
ADDRLP4 48
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 10
EQI4 $241
ADDRLP4 52
INDIRI4
CNSTI4 11
EQI4 $241
ADDRLP4 56
CNSTI4 12
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $241
ADDRLP4 52
INDIRI4
CNSTI4 13
EQI4 $241
ADDRLP4 52
INDIRI4
CNSTI4 8
EQI4 $241
ADDRLP4 60
ADDRLP4 48
INDIRP4
CNSTI4 704
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $241
ADDRLP4 60
INDIRI4
CNSTI4 17
EQI4 $241
ADDRLP4 44
INDIRP4
CNSTI4 744
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $241
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 WP_SaberCanBlock
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $241
line 391
;382:		ent->s.weapon != WP_ROCKET_LAUNCHER &&
;383:		ent->s.weapon != WP_THERMAL &&
;384:		ent->s.weapon != WP_TRIP_MINE &&
;385:		ent->s.weapon != WP_DET_PACK &&
;386:		ent->s.weapon != WP_DEMP2 &&
;387:		ent->methodOfDeath != MOD_REPEATER_ALT &&
;388:		ent->methodOfDeath != MOD_FLECHETTE_ALT_SPLASH &&
;389:		other->client->ps.saberBlockTime < level.time &&
;390:		WP_SaberCanBlock(other, ent, ent->r.currentOrigin, 0, 0, qtrue, 0))
;391:	{ //only block one projectile per 200ms (to prevent giant swarms of projectiles being blocked)
line 394
;392:		vec3_t fwd;
;393:		gentity_t *te;
;394:		int otherDefLevel = other->client->ps.fd.forcePowerLevel[FP_SABERDEFEND];
ADDRLP4 68
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 996
ADDP4
INDIRI4
ASGNI4
line 396
;395:
;396:		te = G_TempEntity( ent->r.currentOrigin, EV_SABER_BLOCK );
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
ARGP4
CNSTI4 28
ARGI4
ADDRLP4 88
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 72
ADDRLP4 88
INDIRP4
ASGNP4
line 397
;397:		VectorCopy(ent->r.currentOrigin, te->s.origin);
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
INDIRB
ASGNB 12
line 398
;398:		VectorCopy(trace->plane.normal, te->s.angles);
ADDRLP4 72
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 399
;399:		te->s.eventParm = 0;
ADDRLP4 72
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 0
ASGNI4
line 405
;400:
;401:		/*if (other->client->ps.velocity[2] > 0 ||
;402:			other->client->pers.cmd.forwardmove ||
;403:			other->client->pers.cmd.rightmove)
;404:			*/
;405:		if (other->client->ps.velocity[2] > 0 ||
ADDRLP4 92
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
GTF4 $246
ADDRLP4 92
INDIRP4
CNSTI4 1396
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $244
LABELV $246
line 407
;406:			other->client->pers.cmd.forwardmove < 0) //now we only do it if jumping or running backward. Should be able to full-on charge.
;407:		{
line 408
;408:			otherDefLevel -= 1;
ADDRLP4 68
ADDRLP4 68
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 409
;409:			if (otherDefLevel < 0)
ADDRLP4 68
INDIRI4
CNSTI4 0
GEI4 $247
line 410
;410:			{
line 411
;411:				otherDefLevel = 0;
ADDRLP4 68
CNSTI4 0
ASGNI4
line 412
;412:			}
LABELV $247
line 413
;413:		}
LABELV $244
line 415
;414:
;415:		AngleVectors(other->client->ps.viewangles, fwd, NULL, NULL);
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 96
CNSTP4 0
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 416
;416:		if (otherDefLevel == FORCE_LEVEL_1)
ADDRLP4 68
INDIRI4
CNSTI4 1
NEI4 $249
line 417
;417:		{
line 419
;418:			//if def is only level 1, instead of deflecting the shot it should just die here
;419:		}
ADDRGP4 $250
JUMPV
LABELV $249
line 420
;420:		else if (otherDefLevel == FORCE_LEVEL_2)
ADDRLP4 68
INDIRI4
CNSTI4 2
NEI4 $251
line 421
;421:		{
line 422
;422:			G_DeflectMissile(other, ent, fwd);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 G_DeflectMissile
CALLV
pop
line 423
;423:		}
ADDRGP4 $252
JUMPV
LABELV $251
line 425
;424:		else
;425:		{
line 426
;426:			G_ReflectMissile(other, ent, fwd);
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 G_ReflectMissile
CALLV
pop
line 427
;427:		}
LABELV $252
LABELV $250
line 428
;428:		other->client->ps.saberBlockTime = level.time + (350 - (otherDefLevel*100)); //200;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 744
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 350
CNSTI4 100
ADDRLP4 68
INDIRI4
MULI4
SUBI4
ADDI4
ASGNI4
line 430
;429:
;430:		if (otherDefLevel == FORCE_LEVEL_3)
ADDRLP4 68
INDIRI4
CNSTI4 3
NEI4 $254
line 431
;431:		{
line 432
;432:			other->client->ps.saberBlockTime = 0; //^_^
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 744
ADDP4
CNSTI4 0
ASGNI4
line 433
;433:		}
LABELV $254
line 435
;434:
;435:		if (otherDefLevel == FORCE_LEVEL_1)
ADDRLP4 68
INDIRI4
CNSTI4 1
NEI4 $221
line 436
;436:		{
line 437
;437:			goto killProj;
ADDRGP4 $238
JUMPV
line 439
;438:		}
;439:		return;
LABELV $241
line 510
;440:	}
;441:	//else if (other->r.contents & CONTENTS_LIGHTSABER)	//Boot comment - don't reflect projectiles if not blocking manually
;442:	//{ //hit this person's saber, so..
;443:	//	gentity_t *otherOwner = &g_entities[other->r.ownerNum];
;444:
;445:	//	if (otherOwner->takedamage && otherOwner->client &&
;446:	//		ent->s.weapon != WP_ROCKET_LAUNCHER &&
;447:	//		ent->s.weapon != WP_THERMAL &&
;448:	//		ent->s.weapon != WP_TRIP_MINE &&
;449:	//		ent->s.weapon != WP_DET_PACK &&
;450:	//		ent->s.weapon != WP_DEMP2 &&
;451:	//		ent->methodOfDeath != MOD_REPEATER_ALT &&
;452:	//		ent->methodOfDeath != MOD_FLECHETTE_ALT_SPLASH /*&&
;453:	//		otherOwner->client->ps.saberBlockTime < level.time*/)
;454:	//	{ //for now still deflect even if saberBlockTime >= level.time because it hit the actual saber
;455:	//		vec3_t fwd;
;456:	//		gentity_t *te;
;457:	//		int otherDefLevel = otherOwner->client->ps.fd.forcePowerLevel[FP_SABERDEFEND];
;458:
;459:	//		//in this case, deflect it even if we can't actually block it because it hit our saber
;460:	//		WP_SaberCanBlock(otherOwner, ent, ent->r.currentOrigin, 0, 0, qtrue, 0);
;461:
;462:	//		te = G_TempEntity( ent->r.currentOrigin, EV_SABER_BLOCK );
;463:	//		VectorCopy(ent->r.currentOrigin, te->s.origin);
;464:	//		VectorCopy(trace->plane.normal, te->s.angles);
;465:	//		te->s.eventParm = 0;
;466:
;467:	//		/*if (otherOwner->client->ps.velocity[2] > 0 ||
;468:	//			otherOwner->client->pers.cmd.forwardmove ||
;469:	//			otherOwner->client->pers.cmd.rightmove)*/
;470:	//		if (otherOwner->client->ps.velocity[2] > 0 ||
;471:	//			otherOwner->client->pers.cmd.forwardmove < 0) //now we only do it if jumping or running backward. Should be able to full-on charge.
;472:	//		{
;473:	//			otherDefLevel -= 1;
;474:	//			if (otherDefLevel < 0)
;475:	//			{
;476:	//				otherDefLevel = 0;
;477:	//			}
;478:	//		}
;479:
;480:	//		AngleVectors(otherOwner->client->ps.viewangles, fwd, NULL, NULL);
;481:
;482:	//		if (otherDefLevel == FORCE_LEVEL_1)
;483:	//		{
;484:	//			//if def is only level 1, instead of deflecting the shot it should just die here
;485:	//		}
;486:	//		else if (otherDefLevel == FORCE_LEVEL_2)
;487:	//		{
;488:	//			G_DeflectMissile(otherOwner, ent, fwd);
;489:	//		}
;490:	//		else
;491:	//		{
;492:	//			G_ReflectMissile(otherOwner, ent, fwd);
;493:	//		}
;494:	//		otherOwner->client->ps.saberBlockTime = level.time + (350 - (otherDefLevel*100));//200;
;495:
;496:	//		if (otherDefLevel == FORCE_LEVEL_3)
;497:	//		{
;498:	//			otherOwner->client->ps.saberBlockTime = 0; //^_^
;499:	//		}
;500:
;501:	//		if (otherDefLevel == FORCE_LEVEL_1)
;502:	//		{
;503:	//			goto killProj;
;504:	//		}
;505:	//		return;
;506:	//	}
;507:	//}
;508:
;509:	// check for sticking
;510:	if ( !other->takedamage && ( ent->s.eFlags & EF_MISSILE_STICK ) ) 
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
NEI4 $258
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 68
INDIRI4
EQI4 $258
line 511
;511:	{
line 512
;512:		laserTrapStick( ent, trace->endpos, trace->plane.normal );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 laserTrapStick
CALLV
pop
line 513
;513:		G_AddEvent( ent, EV_MISSILE_STICK, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 62
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 514
;514:		return;
ADDRGP4 $221
JUMPV
LABELV $258
line 518
;515:	}
;516:
;517:	// impact damage
;518:	if (other->takedamage) {
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $260
line 520
;519:		// FIXME: wrong damage direction?
;520:		if ( ent->damage ) {
ADDRFP4 0
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
CNSTI4 0
EQI4 $262
line 523
;521:			vec3_t	velocity;
;522:
;523:			if( LogAccuracyHit( other, &g_entities[ent->r.ownerNum] ) ) {
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 84
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $264
line 524
;524:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 88
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1656
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 525
;525:				hitClient = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 526
;526:			}
LABELV $264
line 527
;527:			BG_EvaluateTrajectoryDelta( &ent->s.pos, level.time, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 72
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 528
;528:			if ( VectorLength( velocity ) == 0 ) {
ADDRLP4 72
ARGP4
ADDRLP4 88
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 88
INDIRF4
CNSTF4 0
NEF4 $268
line 529
;529:				velocity[2] = 1;	// stepped on a grenade
ADDRLP4 72+8
CNSTF4 1065353216
ASGNF4
line 530
;530:			}
LABELV $268
line 532
;531:
;532:			if (ent->s.weapon == WP_BOWCASTER || ent->s.weapon == WP_FLECHETTE ||
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 6
EQI4 $274
ADDRLP4 92
INDIRI4
CNSTI4 9
EQI4 $274
ADDRLP4 92
INDIRI4
CNSTI4 10
NEI4 $271
LABELV $274
line 534
;533:				ent->s.weapon == WP_ROCKET_LAUNCHER)
;534:			{
line 535
;535:				if (ent->s.weapon == WP_FLECHETTE && (ent->s.eFlags & EF_ALT_FIRING))
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 9
NEI4 $275
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $275
line 536
;536:				{
line 537
;537:					ent->think(ent);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 636
ADDP4
INDIRP4
CALLV
pop
line 538
;538:				}
ADDRGP4 $272
JUMPV
LABELV $275
line 540
;539:				else
;540:				{
line 541
;541:					G_Damage (other, ent, &g_entities[ent->r.ownerNum], velocity,
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
CNSTI4 828
ADDRLP4 100
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
ARGI4
CNSTI4 1024
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 704
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 544
;542:						/*ent->s.origin*/ent->r.currentOrigin, ent->damage, 
;543:						DAMAGE_HALF_ABSORB, ent->methodOfDeath);
;544:				}
line 545
;545:			}
ADDRGP4 $272
JUMPV
LABELV $271
line 547
;546:			else
;547:			{
line 548
;548:				G_Damage (other, ent, &g_entities[ent->r.ownerNum], velocity,
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
CNSTI4 828
ADDRLP4 96
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 72
ARGP4
ADDRLP4 96
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 96
INDIRP4
CNSTI4 688
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 96
INDIRP4
CNSTI4 704
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 551
;549:					/*ent->s.origin*/ent->r.currentOrigin, ent->damage, 
;550:					0, ent->methodOfDeath);
;551:			}
LABELV $272
line 552
;552:		}
LABELV $262
line 553
;553:	}
LABELV $260
LABELV $238
line 558
;554:killProj:
;555:	// is it cheaper in bandwidth to just remove this ent and create a new
;556:	// one, rather than changing the missile into the explosion?
;557:
;558:	if ( other->takedamage && other->client ) {
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $277
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $277
line 559
;559:		G_AddEvent( ent, EV_MISSILE_HIT, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 76
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 73
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 560
;560:		ent->s.otherEntityNum = other->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 561
;561:	} else if( trace->surfaceFlags & SURF_METALSTEPS ) {
ADDRGP4 $278
JUMPV
LABELV $277
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $279
line 562
;562:		G_AddEvent( ent, EV_MISSILE_MISS_METAL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 76
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 75
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 563
;563:	} else if (ent->s.weapon != G2_MODEL_PART) {
ADDRGP4 $280
JUMPV
LABELV $279
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
EQI4 $281
line 564
;564:		G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 76
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 74
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 565
;565:	}
LABELV $281
LABELV $280
LABELV $278
line 567
;566:
;567:	ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 1
ASGNI4
line 570
;568:
;569:	// change over to a normal entity right at the point of impact
;570:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 572
;571:
;572:	SnapVectorTowards( trace->endpos, ent->s.pos.trBase );	// save net bandwidth
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 574
;573:
;574:	G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 577
;575:
;576:	// splash damage (doesn't apply to person directly hit)
;577:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 696
ADDP4
INDIRI4
CNSTI4 0
EQI4 $283
line 578
;578:		if( G_RadiusDamage( trace->endpos, ent->parent, ent->splashDamage, ent->splashRadius, 
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 696
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 700
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 708
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $285
line 579
;579:			other, ent->splashMethodOfDeath ) ) {
line 580
;580:			if( !hitClient ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $287
line 581
;581:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 84
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1656
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 582
;582:			}
LABELV $287
line 583
;583:		}
LABELV $285
line 584
;584:	}
LABELV $283
line 586
;585:
;586:	if (ent->s.weapon == G2_MODEL_PART)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
NEI4 $290
line 587
;587:	{
line 588
;588:		ent->freeAfterEvent = qfalse; //it will free itself
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTI4 0
ASGNI4
line 589
;589:	}
LABELV $290
line 591
;590:
;591:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 592
;592:}
LABELV $221
endproc G_MissileImpact 104 32
export G_RunMissile
proc G_RunMissile 2224 28
line 599
;593:
;594:/*
;595:================
;596:G_RunMissile
;597:================
;598:*/
;599:void G_RunMissile( gentity_t *ent ) {
line 605
;600:	vec3_t		origin, groundSpot;
;601:	trace_t		tr;
;602:	int			passent;
;603:
;604:	// get current position
;605:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 1084
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 608
;606:
;607:	// if this missile bounced off an invulnerability sphere
;608:	if ( ent->target_ent ) {
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $294
line 609
;609:		passent = ent->target_ent->s.number;
ADDRLP4 1080
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 610
;610:	}
ADDRGP4 $295
JUMPV
LABELV $294
line 611
;611:	else {
line 613
;612:		// ignore interactions with the missile owner
;613:		passent = ent->r.ownerNum;
ADDRLP4 1080
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ASGNI4
line 614
;614:	}
LABELV $295
line 616
;615:	// trace a line from the previous position to the current position
;616:	trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 1108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1108
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 1108
INDIRP4
CNSTI4 316
ADDP4
ARGP4
ADDRLP4 1108
INDIRP4
CNSTI4 328
ADDP4
ARGP4
ADDRLP4 1084
ARGP4
ADDRLP4 1080
INDIRI4
ARGI4
ADDRLP4 1108
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 618
;617:
;618:	if ( tr.startsolid || tr.allsolid ) {
ADDRLP4 1112
CNSTI4 0
ASGNI4
ADDRLP4 0+4
INDIRI4
ADDRLP4 1112
INDIRI4
NEI4 $299
ADDRLP4 0
INDIRI4
ADDRLP4 1112
INDIRI4
EQI4 $296
LABELV $299
line 620
;619:		// make sure the tr.entityNum is set to the entity we're stuck in
;620:		trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, ent->r.currentOrigin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 1116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1120
ADDRLP4 1116
INDIRP4
CNSTI4 368
ADDP4
ASGNP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRLP4 1116
INDIRP4
CNSTI4 316
ADDP4
ARGP4
ADDRLP4 1116
INDIRP4
CNSTI4 328
ADDP4
ARGP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRLP4 1080
INDIRI4
ARGI4
ADDRLP4 1116
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 621
;621:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 622
;622:	}
ADDRGP4 $297
JUMPV
LABELV $296
line 623
;623:	else {
line 624
;624:		VectorCopy( tr.endpos, ent->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 625
;625:	}
LABELV $297
line 627
;626:
;627:	if (ent->passThroughNum && tr.entityNum == (ent->passThroughNum-1))
ADDRLP4 1116
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1116
INDIRI4
CNSTI4 0
EQI4 $302
ADDRLP4 0+52
INDIRI4
ADDRLP4 1116
INDIRI4
CNSTI4 1
SUBI4
NEI4 $302
line 628
;628:	{
line 629
;629:		VectorCopy( origin, ent->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
ADDRLP4 1084
INDIRB
ASGNB 12
line 630
;630:		trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 631
;631:		goto passthrough;
ADDRGP4 $305
JUMPV
LABELV $302
line 634
;632:	}
;633:
;634:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 636
;635:
;636:	if (ent->s.weapon == G2_MODEL_PART && !ent->bounceCount)
ADDRLP4 1120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1120
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
NEI4 $306
ADDRLP4 1120
INDIRP4
CNSTI4 716
ADDP4
INDIRI4
CNSTI4 0
NEI4 $306
line 637
;637:	{
line 641
;638:		vec3_t lowerOrg;
;639:		trace_t trG;
;640:
;641:		VectorCopy(ent->r.currentOrigin, lowerOrg);
ADDRLP4 2204
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
INDIRB
ASGNB 12
line 642
;642:		lowerOrg[2] -= 1;
ADDRLP4 2204+8
ADDRLP4 2204+8
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 643
;643:		trap_Trace( &trG, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, lowerOrg, passent, ent->clipmask );
ADDRLP4 1124
ARGP4
ADDRLP4 2216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 2216
INDIRP4
CNSTI4 368
ADDP4
ARGP4
ADDRLP4 2216
INDIRP4
CNSTI4 316
ADDP4
ARGP4
ADDRLP4 2216
INDIRP4
CNSTI4 328
ADDP4
ARGP4
ADDRLP4 2204
ARGP4
ADDRLP4 1080
INDIRI4
ARGI4
ADDRLP4 2216
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 645
;644:
;645:		VectorCopy(trG.endpos, groundSpot);
ADDRLP4 1096
ADDRLP4 1124+12
INDIRB
ASGNB 12
line 647
;646:
;647:		if (!trG.startsolid && !trG.allsolid && trG.entityNum == ENTITYNUM_WORLD)
ADDRLP4 2220
CNSTI4 0
ASGNI4
ADDRLP4 1124+4
INDIRI4
ADDRLP4 2220
INDIRI4
NEI4 $310
ADDRLP4 1124
INDIRI4
ADDRLP4 2220
INDIRI4
NEI4 $310
ADDRLP4 1124+52
INDIRI4
CNSTI4 1022
NEI4 $310
line 648
;648:		{
line 649
;649:			ent->s.groundEntityNum = trG.entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
ADDRLP4 1124+52
INDIRI4
ASGNI4
line 650
;650:		}
ADDRGP4 $311
JUMPV
LABELV $310
line 652
;651:		else
;652:		{
line 653
;653:			ent->s.groundEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 1023
ASGNI4
line 654
;654:		}
LABELV $311
line 655
;655:	}
LABELV $306
line 657
;656:
;657:	if ( tr.fraction != 1) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $315
line 659
;658:		// never explode or bounce on sky
;659:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 524288
BANDI4
CNSTI4 0
EQI4 $318
line 661
;660:			// If grapple, reset owner
;661:			if (ent->parent && ent->parent->client && ent->parent->client->hook == ent) {
ADDRLP4 1124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1128
ADDRLP4 1124
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1132
CNSTU4 0
ASGNU4
ADDRLP4 1128
INDIRP4
CVPU4 4
ADDRLP4 1132
INDIRU4
EQU4 $321
ADDRLP4 1136
ADDRLP4 1128
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1136
INDIRP4
CVPU4 4
ADDRLP4 1132
INDIRU4
EQU4 $321
ADDRLP4 1136
INDIRP4
CNSTI4 1700
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 1124
INDIRP4
CVPU4 4
NEU4 $321
line 662
;662:				ent->parent->client->hook = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1700
ADDP4
CNSTP4 0
ASGNP4
line 663
;663:			}
LABELV $321
line 665
;664:
;665:			if (ent->s.weapon == WP_SABER && ent->isSaberEntity)
ADDRLP4 1140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1140
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 2
NEI4 $323
ADDRLP4 1140
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 0
EQI4 $323
line 666
;666:			{
line 667
;667:				G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 668
;668:				return;
ADDRGP4 $292
JUMPV
LABELV $323
line 670
;669:			}
;670:			else if (ent->s.weapon != G2_MODEL_PART)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
EQI4 $325
line 671
;671:			{
line 672
;672:				G_FreeEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 673
;673:				return;
ADDRGP4 $292
JUMPV
LABELV $325
line 675
;674:			}
;675:		}
LABELV $318
line 676
;676:		G_MissileImpact( ent, &tr );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_MissileImpact
CALLV
pop
line 677
;677:		if ( ent->s.eType != ET_MISSILE && ent->s.weapon != G2_MODEL_PART ) {
ADDRLP4 1124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1124
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $327
ADDRLP4 1124
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
EQI4 $327
line 678
;678:			return;		// exploded
ADDRGP4 $292
JUMPV
LABELV $327
line 680
;679:		}
;680:	}
LABELV $315
LABELV $305
line 683
;681:
;682:passthrough:
;683:	if ( ent->s.pos.trType == TR_STATIONARY && (ent->s.eFlags&EF_MISSILE_STICK) )
ADDRLP4 1124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1128
CNSTI4 0
ASGNI4
ADDRLP4 1124
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 1128
INDIRI4
NEI4 $329
ADDRLP4 1124
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 1128
INDIRI4
EQI4 $329
line 684
;684:	{//stuck missiles should check some special stuff
line 685
;685:		G_RunStuckMissile( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunStuckMissile
CALLV
pop
line 686
;686:		return;
ADDRGP4 $292
JUMPV
LABELV $329
line 689
;687:	}
;688:
;689:	if (ent->s.weapon == G2_MODEL_PART)
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 50
NEI4 $331
line 690
;690:	{
line 691
;691:		if (ent->s.groundEntityNum == ENTITYNUM_WORLD)
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 1022
NEI4 $333
line 692
;692:		{
line 693
;693:			ent->s.pos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 694
;694:			VectorClear(ent->s.pos.trDelta);
ADDRLP4 1132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1136
CNSTF4 0
ASGNF4
ADDRLP4 1132
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 1136
INDIRF4
ASGNF4
ADDRLP4 1132
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 1136
INDIRF4
ASGNF4
ADDRLP4 1132
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 1136
INDIRF4
ASGNF4
line 695
;695:			ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 697
;696:
;697:			VectorCopy(groundSpot, ent->s.pos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 1096
INDIRB
ASGNB 12
line 698
;698:			VectorCopy(groundSpot, ent->r.currentOrigin);
ADDRFP4 0
INDIRP4
CNSTI4 368
ADDP4
ADDRLP4 1096
INDIRB
ASGNB 12
line 700
;699:
;700:			if (ent->s.apos.trType != TR_STATIONARY)
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 0
EQI4 $336
line 701
;701:			{
line 702
;702:				ent->s.apos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 703
;703:				ent->s.apos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 705
;704:
;705:				ent->s.apos.trBase[ROLL] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTF4 0
ASGNF4
line 706
;706:				ent->s.apos.trBase[PITCH] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 0
ASGNF4
line 707
;707:			}
LABELV $336
line 708
;708:		}
LABELV $333
line 709
;709:	}
LABELV $331
line 712
;710:
;711:	// check think function after bouncing
;712:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 713
;713:}
LABELV $292
endproc G_RunMissile 2224 28
import RandFloat
import laserTrapStick
import trap_ROFF_Purge_Ent
import trap_ROFF_Play
import trap_ROFF_Cache
import trap_ROFF_UpdateEntities
import trap_ROFF_Clean
import trap_SP_GetStringTextString
import trap_SP_Register
import trap_SP_RegisterServer
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_ForcePower
import trap_EA_Alt_Attack
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import boot_noFlips
import boot_screenShakeOnHeadChop
import boot_trainingMode
import boot_feintTimer
import g_timeouttospec
import g_forceDodge
import g_dismember
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_debugUp
import g_debugRight
import g_debugForward
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_adaptRespawn
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlySaber
import g_friendlyFire
import g_saberInterpolate
import g_capturelimit
import g_timelimit
import g_duel_fraglimit
import g_fraglimit
import g_duelWeaponDisable
import g_weaponDisable
import g_forcePowerDisable
import g_spawnInvulnerability
import g_forceRegenTime
import g_saberLocking
import g_privateDuel
import g_forceBasedTeams
import g_maxForceRank
import g_dmflags
import g_autoMapCycle
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectSagaSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import B_CleanupAlloc
import B_InitAlloc
import InFieldOfVision
import BotOrder
import OrgVisible
import InitSagaMode
import G_ClearClientLog
import G_LogExit
import G_LogWeaponOutput
import G_LogWeaponInit
import G_LogWeaponItem
import G_LogWeaponPowerup
import G_LogWeaponFrag
import G_LogWeaponDeath
import G_LogWeaponKill
import G_LogWeaponDamage
import G_LogWeaponFire
import G_LogWeaponPickup
import Boot_BlockMatchesAttack
import Boot_GetParryAnimFromMovement
import Boot_ManualBlockThink
import Jedi_DodgeEvasion
import ForceTelepathy
import ForceThrow
import ForceSeeing
import ForceTeamForceReplenish
import ForceTeamHeal
import ForceAbsorb
import ForceProtect
import ForceGrip
import ForceRage
import ForceSpeed
import ForceHeal
import ForcePowerUsableOn
import WP_ForcePowersUpdate
import WP_SpawnInitForcePowers
import WP_InitForcePowers
import WP_SaberInitBladeData
import WP_SaberCanBlock
import WP_SaberPositionUpdate
import WP_ForcePowerStop
import HasSetSaberOnly
import G_PreDefSound
import G_RefreshNextMap
import G_DoesMapSupportGametype
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_CheckDroppedItem
import OnSameTeam
import Boot_GetDirFromMouseMovement
import BootPort_PM_SomeoneInFront
import G_RunClient
import ClientEndFrame
import ClientThink
import G_CheckClientTimeouts
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_GetStripEdString
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import g_ff_objectives
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import BlowDetpacks
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import gJMSaberEnt
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamCount
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import WP_FireGenericBlasterMissile
import WP_FireTurretMissile
import G_PlayerBecomeATST
import ATST_ManageDamageBoxes
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import WP_FireBlasterMissile
import G_GetHitLocation
import ExplodeDeath
import TossClientCubes
import TossClientItems
import TossClientWeapon
import body_die
import G_RadiusDamage
import G_Damage
import CanDamage
import trap_G2API_SetBoneAnim
import trap_G2API_GetGLAName
import trap_G2API_SetBoneAngles
import trap_G2API_CleanGhoul2Models
import trap_G2API_RemoveGhoul2Model
import trap_G2API_HasGhoul2ModelOnIndex
import trap_G2API_DuplicateGhoul2Instance
import trap_G2API_CopySpecificGhoul2Model
import trap_G2API_CopyGhoul2Instance
import trap_G2API_SetBoltInfo
import trap_G2API_AddBolt
import trap_G2API_InitGhoul2Model
import trap_G2API_GetBoltMatrix_NoReconstruct
import trap_G2API_GetBoltMatrix
import trap_G2_HaveWeGhoul2Models
import trap_G2_SetGhoul2ModelIndexes
import trap_G2_ListModelBones
import trap_G2_ListModelSurfaces
import G_SkinIndex
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_RunObject
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_KillG2Queue
import G_SendG2KillQueue
import TryUse
import G_EntitySound
import G_SoundAtLoc
import G_Sound
import G_MuteSound
import G_ScreenShake
import G_PlayEffect
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetAngles
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_RadiusList
import G_Find
import G_KillBox
import G_TeamCommand
import G_EffectIndex
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import ItemUse_MedPack
import ItemUse_Seeker
import ItemUse_Sentry
import ItemUse_Shield
import ItemUse_Binoculars
import G_GetDuelWinner
import Cmd_EngageDuel_f
import Cmd_ToggleSaber_f
import G_ItemUsable
import Cmd_SaberAttackCycle_f
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import bootSession
import g2SaberInstance
import precachedKyle
import forcePowerDarkLight
import WeaponAttackAnim
import WeaponReadyAnim
import BG_OutOfMemory
import BG_StringAlloc
import BG_TempFree
import BG_TempAlloc
import BG_AllocUnaligned
import BG_Alloc
import BG_CanUseFPNow
import BG_HasYsalamiri
import BG_GetItemIndexByTag
import BG_ParseAnimationFile
import BG_PlayerTouchesItem
import BG_G2PlayerAngles
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_ForcePowerDrain
import BG_SaberStartTransAnim
import BG_InDeathAnim
import BG_InRoll
import BG_SaberInSpecialAttack
import BG_SpinningSaberAnim
import BG_FlippingAnim
import BG_SaberInIdle
import BG_SaberInSpecial
import BG_SaberInAttack
import BG_DirectFlippingAnim
import BG_InSaberStandAnim
import BG_InSpecialJump
import BG_LegalizedForcePowers
import saberMoveData
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import vectoyaw
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import pm
import bgForcePowerCost
import forceMasteryPoints
import forceMasteryLevels
import bgGlobalAnimations
import BGPAFtextLoaded
import forcePowerSorted
import WP_MuzzlePoint
import ammoData
import weaponData
import GetStringForID
import GetIDForString
import Q_irand
import irand
import flrand
import Rand_Init
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import SkipWhitespace
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import powf
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkBlue
import colorLtBlue
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import colorTable
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import forceSpeedLevels
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $172
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 47
char 1 98
char 1 111
char 1 117
char 1 110
char 1 99
char 1 101
char 1 37
char 1 105
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $169
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 116
char 1 104
char 1 101
char 1 114
char 1 109
char 1 97
char 1 108
char 1 47
char 1 98
char 1 111
char 1 117
char 1 110
char 1 99
char 1 101
char 1 37
char 1 105
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
