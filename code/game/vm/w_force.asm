data
export speedLoopSound
align 4
LABELV speedLoopSound
byte 4 0
export rageLoopSound
align 4
LABELV rageLoopSound
byte 4 0
export protectLoopSound
align 4
LABELV protectLoopSound
byte 4 0
export absorbLoopSound
align 4
LABELV absorbLoopSound
byte 4 0
export seeLoopSound
align 4
LABELV seeLoopSound
byte 4 0
export ysalamiriLoopSound
align 4
LABELV ysalamiriLoopSound
byte 4 0
export G_PreDefSound
code
proc G_PreDefSound 8 8
file "../w_force.c"
line 25
;1:#include "g_local.h"
;2:#include "w_saber.h"
;3:#include "ai_main.h"
;4:#include "..\ghoul2\g2.h"
;5:
;6:#define METROID_JUMP 1
;7:
;8:extern bot_state_t *botstates[MAX_CLIENTS];
;9:
;10:int speedLoopSound = 0;
;11: 
;12:int rageLoopSound = 0;
;13:
;14:int protectLoopSound = 0;
;15:
;16:int absorbLoopSound = 0;
;17:
;18:int seeLoopSound = 0;
;19:
;20:int	ysalamiriLoopSound = 0;
;21:
;22:#define FORCE_VELOCITY_DAMAGE 0
;23:
;24:void G_PreDefSound(vec3_t org, int pdSound)
;25:{
line 28
;26:	gentity_t	*te;
;27:
;28:	te = G_TempEntity( org, EV_PREDEFSOUND );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 36
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 29
;29:	te->s.eventParm = pdSound;
ADDRLP4 0
INDIRP4
CNSTI4 256
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 30
;30:	VectorCopy(org, te->s.origin);
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 31
;31:}
LABELV $82
endproc G_PreDefSound 8 8
export InFront
proc InFront 64 16
line 34
;32:
;33:qboolean InFront( vec3_t spot, vec3_t from, vec3_t fromAngles, float threshHold )
;34:{
line 38
;35:	vec3_t	dir, forward, angles;
;36:	float	dot;
;37:
;38:	VectorSubtract( spot, from, dir );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 48
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 40
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 52
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 39
;39:	dir[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 40
;40:	VectorNormalize( dir );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 42
;41:
;42:	VectorCopy( fromAngles, angles );
ADDRLP4 24
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 43
;43:	angles[0] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 44
;44:	AngleVectors( angles, forward, NULL, NULL );
ADDRLP4 24
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 56
CNSTP4 0
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 46
;45:
;46:	dot = DotProduct( dir, forward );
ADDRLP4 36
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 48
;47:
;48:	return (dot > threshHold);
ADDRLP4 36
INDIRF4
ADDRFP4 12
INDIRF4
LEF4 $92
ADDRLP4 60
CNSTI4 1
ASGNI4
ADDRGP4 $93
JUMPV
LABELV $92
ADDRLP4 60
CNSTI4 0
ASGNI4
LABELV $93
ADDRLP4 60
INDIRI4
RETI4
LABELV $83
endproc InFront 64 16
data
export forcePowerMinRank
align 4
LABELV forcePowerMinRank
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 10
byte 4 0
byte 4 0
byte 4 0
byte 4 0
byte 4 10
byte 4 15
byte 4 10
byte 4 15
byte 4 15
byte 4 15
byte 4 10
byte 4 10
byte 4 10
byte 4 5
byte 4 0
byte 4 0
byte 4 0
byte 4 10
byte 4 0
byte 4 0
byte 4 0
byte 4 0
byte 4 10
byte 4 15
byte 4 10
byte 4 15
byte 4 15
byte 4 15
byte 4 10
byte 4 10
byte 4 10
byte 4 5
byte 4 5
byte 4 5
byte 4 5
byte 4 10
byte 4 0
byte 4 0
byte 4 0
byte 4 0
byte 4 10
byte 4 15
byte 4 10
byte 4 15
byte 4 15
byte 4 15
byte 4 10
byte 4 10
byte 4 10
byte 4 5
byte 4 10
byte 4 10
byte 4 10
export WP_InitForcePowers
code
proc WP_InitForcePowers 1632 24
line 140
;49:}
;50:
;51:int forcePowerMinRank[NUM_FORCE_POWER_LEVELS][NUM_FORCE_POWERS] = //0 == neutral
;52:{
;53:	{
;54:		999,//FP_HEAL,//instant
;55:		999,//FP_LEVITATION,//hold/duration
;56:		999,//FP_SPEED,//duration
;57:		999,//FP_PUSH,//hold/duration
;58:		999,//FP_PULL,//hold/duration
;59:		999,//FP_TELEPATHY,//instant
;60:		999,//FP_GRIP,//hold/duration
;61:		999,//FP_LIGHTNING,//hold/duration
;62:		999,//FP_RAGE,//duration
;63:		999,//FP_PROTECT,//duration
;64:		999,//FP_ABSORB,//duration
;65:		999,//FP_TEAM_HEAL,//instant
;66:		999,//FP_TEAM_FORCE,//instant
;67:		999,//FP_DRAIN,//hold/duration
;68:		999,//FP_SEE,//duration
;69:		999,//FP_SABERATTACK,
;70:		999,//FP_SABERDEFEND,
;71:		999//FP_SABERTHROW,
;72:		//NUM_FORCE_POWERS
;73:	},
;74:	{
;75:		10,//FP_HEAL,//instant
;76:		0,//FP_LEVITATION,//hold/duration
;77:		0,//FP_SPEED,//duration
;78:		0,//FP_PUSH,//hold/duration
;79:		0,//FP_PULL,//hold/duration
;80:		10,//FP_TELEPATHY,//instant
;81:		15,//FP_GRIP,//hold/duration
;82:		10,//FP_LIGHTNING,//hold/duration
;83:		15,//FP_RAGE,//duration
;84:		15,//FP_PROTECT,//duration
;85:		15,//FP_ABSORB,//duration
;86:		10,//FP_TEAM_HEAL,//instant
;87:		10,//FP_TEAM_FORCE,//instant
;88:		10,//FP_DRAIN,//hold/duration
;89:		5,//FP_SEE,//duration
;90:		0,//FP_SABERATTACK,
;91:		0,//FP_SABERDEFEND,
;92:		0//FP_SABERTHROW,
;93:		//NUM_FORCE_POWERS
;94:	},
;95:	{
;96:		10,//FP_HEAL,//instant
;97:		0,//FP_LEVITATION,//hold/duration
;98:		0,//FP_SPEED,//duration
;99:		0,//FP_PUSH,//hold/duration
;100:		0,//FP_PULL,//hold/duration
;101:		10,//FP_TELEPATHY,//instant
;102:		15,//FP_GRIP,//hold/duration
;103:		10,//FP_LIGHTNING,//hold/duration
;104:		15,//FP_RAGE,//duration
;105:		15,//FP_PROTECT,//duration
;106:		15,//FP_ABSORB,//duration
;107:		10,//FP_TEAM_HEAL,//instant
;108:		10,//FP_TEAM_FORCE,//instant
;109:		10,//FP_DRAIN,//hold/duration
;110:		5,//FP_SEE,//duration
;111:		5,//FP_SABERATTACK,
;112:		5,//FP_SABERDEFEND,
;113:		5//FP_SABERTHROW,
;114:		//NUM_FORCE_POWERS
;115:	},
;116:	{
;117:		10,//FP_HEAL,//instant
;118:		0,//FP_LEVITATION,//hold/duration
;119:		0,//FP_SPEED,//duration
;120:		0,//FP_PUSH,//hold/duration
;121:		0,//FP_PULL,//hold/duration
;122:		10,//FP_TELEPATHY,//instant
;123:		15,//FP_GRIP,//hold/duration
;124:		10,//FP_LIGHTNING,//hold/duration
;125:		15,//FP_RAGE,//duration
;126:		15,//FP_PROTECT,//duration
;127:		15,//FP_ABSORB,//duration
;128:		10,//FP_TEAM_HEAL,//instant
;129:		10,//FP_TEAM_FORCE,//instant
;130:		10,//FP_DRAIN,//hold/duration
;131:		5,//FP_SEE,//duration
;132:		10,//FP_SABERATTACK,
;133:		10,//FP_SABERDEFEND,
;134:		10//FP_SABERTHROW,
;135:		//NUM_FORCE_POWERS
;136:	}
;137:};
;138:
;139:void WP_InitForcePowers( gentity_t *ent )
;140:{
line 143
;141:	int i;
;142:	int i_r;
;143:	int maxRank = g_maxForceRank.integer;
ADDRLP4 520
ADDRGP4 g_maxForceRank+12
INDIRI4
ASGNI4
line 144
;144:	qboolean warnClient = qfalse;
ADDRLP4 528
CNSTI4 0
ASGNI4
line 145
;145:	qboolean warnClientLimit = qfalse;
ADDRLP4 1560
CNSTI4 0
ASGNI4
line 149
;146:	char userinfo[MAX_INFO_STRING];
;147:	char forcePowers[256];
;148:	char readBuf[256];
;149:	int lastFPKnown = -1;
ADDRLP4 524
CNSTI4 -1
ASGNI4
line 150
;150:	qboolean didEvent = qfalse;
ADDRLP4 1556
CNSTI4 0
ASGNI4
line 152
;151:
;152:	if (!maxRank)
ADDRLP4 520
INDIRI4
CNSTI4 0
NEI4 $96
line 153
;153:	{ //if server has no max rank, default to max (50)
line 154
;154:		maxRank = FORCE_MASTERY_JEDI_MASTER;
ADDRLP4 520
CNSTI4 7
ASGNI4
line 155
;155:	}
LABELV $96
line 165
;156:
;157:	/*
;158:	if (g_forcePowerDisable.integer)
;159:	{
;160:		maxRank = FORCE_MASTERY_UNINITIATED;
;161:	}
;162:	*/
;163:	//rww - don't do this
;164:
;165:	if ( !ent || !ent->client )
ADDRLP4 1564
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1568
CNSTU4 0
ASGNU4
ADDRLP4 1564
INDIRP4
CVPU4 4
ADDRLP4 1568
INDIRU4
EQU4 $100
ADDRLP4 1564
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 1568
INDIRU4
NEU4 $98
LABELV $100
line 166
;166:	{
line 167
;167:		return;
ADDRGP4 $94
JUMPV
LABELV $98
line 170
;168:	}
;169:
;170:	ent->client->ps.fd.saberAnimLevel = ent->client->sess.saberLevel;
ADDRLP4 1572
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1572
INDIRP4
CNSTI4 1216
ADDP4
ADDRLP4 1572
INDIRP4
CNSTI4 1548
ADDP4
INDIRI4
ASGNI4
line 172
;171:
;172:	if (ent->client->ps.fd.saberAnimLevel < FORCE_LEVEL_1 ||
ADDRLP4 1576
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1576
INDIRI4
CNSTI4 1
LTI4 $103
ADDRLP4 1576
INDIRI4
CNSTI4 3
LEI4 $101
LABELV $103
line 174
;173:		ent->client->ps.fd.saberAnimLevel > FORCE_LEVEL_3)
;174:	{
line 175
;175:		ent->client->ps.fd.saberAnimLevel = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1216
ADDP4
CNSTI4 1
ASGNI4
line 176
;176:	}
LABELV $101
line 178
;177:
;178:	if (!speedLoopSound)
ADDRGP4 speedLoopSound
INDIRI4
CNSTI4 0
NEI4 $104
line 179
;179:	{ //so that the client configstring is already modified with this when we need it
line 180
;180:		speedLoopSound = G_SoundIndex("sound/weapons/force/speedloop.wav");
ADDRGP4 $106
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 speedLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 181
;181:	}
LABELV $104
line 183
;182:
;183:	if (!rageLoopSound)
ADDRGP4 rageLoopSound
INDIRI4
CNSTI4 0
NEI4 $107
line 184
;184:	{
line 185
;185:		rageLoopSound = G_SoundIndex("sound/weapons/force/rageloop.wav");
ADDRGP4 $109
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 rageLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 186
;186:	}
LABELV $107
line 188
;187:
;188:	if (!absorbLoopSound)
ADDRGP4 absorbLoopSound
INDIRI4
CNSTI4 0
NEI4 $110
line 189
;189:	{
line 190
;190:		absorbLoopSound = G_SoundIndex("sound/weapons/force/absorbloop.wav");
ADDRGP4 $112
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 absorbLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 191
;191:	}
LABELV $110
line 193
;192:
;193:	if (!protectLoopSound)
ADDRGP4 protectLoopSound
INDIRI4
CNSTI4 0
NEI4 $113
line 194
;194:	{
line 195
;195:		protectLoopSound = G_SoundIndex("sound/weapons/force/protectloop.wav");
ADDRGP4 $115
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 protectLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 196
;196:	}
LABELV $113
line 198
;197:
;198:	if (!seeLoopSound)
ADDRGP4 seeLoopSound
INDIRI4
CNSTI4 0
NEI4 $116
line 199
;199:	{
line 200
;200:		seeLoopSound = G_SoundIndex("sound/weapons/force/seeloop.wav");
ADDRGP4 $118
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 seeLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 201
;201:	}
LABELV $116
line 203
;202:
;203:	if (!ysalamiriLoopSound)
ADDRGP4 ysalamiriLoopSound
INDIRI4
CNSTI4 0
NEI4 $119
line 204
;204:	{
line 205
;205:		ysalamiriLoopSound = G_SoundIndex("sound/player/nullifyloop.wav");
ADDRGP4 $121
ARGP4
ADDRLP4 1580
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRGP4 ysalamiriLoopSound
ADDRLP4 1580
INDIRI4
ASGNI4
line 206
;206:	}
LABELV $119
line 208
;207:
;208:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $123
JUMPV
LABELV $122
line 210
;209:	while (i < NUM_FORCE_POWERS)
;210:	{
line 211
;211:		ent->client->ps.fd.forcePowerLevel[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 212
;212:		ent->client->ps.fd.forcePowersKnown &= ~(1 << i);
ADDRLP4 1580
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 1580
INDIRP4
ADDRLP4 1580
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 213
;213:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 214
;214:	}
LABELV $123
line 209
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $122
line 216
;215:
;216:	ent->client->ps.fd.forcePowerSelected = -1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
CNSTI4 -1
ASGNI4
line 218
;217:
;218:	ent->client->ps.fd.forceSide = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1176
ADDP4
CNSTI4 0
ASGNI4
line 220
;219:
;220:	trap_GetUserinfo( ent->s.number, userinfo, sizeof( userinfo ) );
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 532
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 222
;221:
;222:	Q_strncpyz( forcePowers, Info_ValueForKey (userinfo, "forcepowers"), sizeof( forcePowers ) );
ADDRLP4 532
ARGP4
ADDRGP4 $125
ARGP4
ADDRLP4 1580
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 8
ARGP4
ADDRLP4 1580
INDIRP4
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 224
;223:
;224:	if ( ent->r.svFlags & SVF_BOT && botstates[ent->s.number] )
ADDRLP4 1584
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1584
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $126
ADDRLP4 1584
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 botstates
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $126
line 225
;225:	{ //if it's a bot just copy the info directly from its personality
line 226
;226:		Com_sprintf(forcePowers, sizeof(forcePowers), "%s\0", botstates[ent->s.number]->forceinfo);
ADDRLP4 8
ARGP4
CNSTI4 256
ARGI4
ADDRGP4 $128
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 botstates
ADDP4
INDIRP4
CNSTI4 2732
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 227
;227:	}
LABELV $126
line 230
;228:
;229:	//rww - parse through the string manually and eat out all the appropriate data
;230:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 232
;231:
;232:	if (g_forceBasedTeams.integer)
ADDRGP4 g_forceBasedTeams+12
INDIRI4
CNSTI4 0
EQI4 $129
line 233
;233:	{
line 234
;234:		if (ent->client->sess.sessionTeam == TEAM_RED)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 1
NEI4 $132
line 235
;235:		{
line 236
;236:			warnClient = !(BG_LegalizedForcePowers(forcePowers, maxRank, HasSetSaberOnly(), FORCE_DARKSIDE, g_gametype.integer, g_forcePowerDisable.integer));
ADDRLP4 1592
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 8
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
ADDRLP4 1592
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRGP4 g_forcePowerDisable+12
INDIRI4
ARGI4
ADDRLP4 1596
ADDRGP4 BG_LegalizedForcePowers
CALLI4
ASGNI4
ADDRLP4 1596
INDIRI4
CNSTI4 0
NEI4 $137
ADDRLP4 1588
CNSTI4 1
ASGNI4
ADDRGP4 $138
JUMPV
LABELV $137
ADDRLP4 1588
CNSTI4 0
ASGNI4
LABELV $138
ADDRLP4 528
ADDRLP4 1588
INDIRI4
ASGNI4
line 237
;237:		}
ADDRGP4 $130
JUMPV
LABELV $132
line 238
;238:		else if (ent->client->sess.sessionTeam == TEAM_BLUE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 2
NEI4 $139
line 239
;239:		{
line 240
;240:			warnClient = !(BG_LegalizedForcePowers(forcePowers, maxRank, HasSetSaberOnly(), FORCE_LIGHTSIDE, g_gametype.integer, g_forcePowerDisable.integer));
ADDRLP4 1592
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 8
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
ADDRLP4 1592
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRGP4 g_forcePowerDisable+12
INDIRI4
ARGI4
ADDRLP4 1596
ADDRGP4 BG_LegalizedForcePowers
CALLI4
ASGNI4
ADDRLP4 1596
INDIRI4
CNSTI4 0
NEI4 $144
ADDRLP4 1588
CNSTI4 1
ASGNI4
ADDRGP4 $145
JUMPV
LABELV $144
ADDRLP4 1588
CNSTI4 0
ASGNI4
LABELV $145
ADDRLP4 528
ADDRLP4 1588
INDIRI4
ASGNI4
line 241
;241:		}
ADDRGP4 $130
JUMPV
LABELV $139
line 243
;242:		else
;243:		{
line 244
;244:			warnClient = !(BG_LegalizedForcePowers(forcePowers, maxRank, HasSetSaberOnly(), 0, g_gametype.integer, g_forcePowerDisable.integer));
ADDRLP4 1592
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 8
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
ADDRLP4 1592
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRGP4 g_forcePowerDisable+12
INDIRI4
ARGI4
ADDRLP4 1596
ADDRGP4 BG_LegalizedForcePowers
CALLI4
ASGNI4
ADDRLP4 1596
INDIRI4
CNSTI4 0
NEI4 $149
ADDRLP4 1588
CNSTI4 1
ASGNI4
ADDRGP4 $150
JUMPV
LABELV $149
ADDRLP4 1588
CNSTI4 0
ASGNI4
LABELV $150
ADDRLP4 528
ADDRLP4 1588
INDIRI4
ASGNI4
line 245
;245:		}
line 246
;246:	}
ADDRGP4 $130
JUMPV
LABELV $129
line 248
;247:	else
;248:	{
line 249
;249:		warnClient = !(BG_LegalizedForcePowers(forcePowers, maxRank, HasSetSaberOnly(), 0, g_gametype.integer, g_forcePowerDisable.integer));
ADDRLP4 1592
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 8
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
ADDRLP4 1592
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRGP4 g_forcePowerDisable+12
INDIRI4
ARGI4
ADDRLP4 1596
ADDRGP4 BG_LegalizedForcePowers
CALLI4
ASGNI4
ADDRLP4 1596
INDIRI4
CNSTI4 0
NEI4 $154
ADDRLP4 1588
CNSTI4 1
ASGNI4
ADDRGP4 $155
JUMPV
LABELV $154
ADDRLP4 1588
CNSTI4 0
ASGNI4
LABELV $155
ADDRLP4 528
ADDRLP4 1588
INDIRI4
ASGNI4
line 250
;250:	}
LABELV $130
line 252
;251:
;252:	i_r = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $157
JUMPV
LABELV $156
line 254
;253:	while (forcePowers[i] && forcePowers[i] != '-')
;254:	{
line 255
;255:		readBuf[i_r] = forcePowers[i];
ADDRLP4 4
INDIRI4
ADDRLP4 264
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 256
;256:		i_r++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 257
;257:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 258
;258:	}
LABELV $157
line 253
ADDRLP4 1588
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1588
INDIRI4
CNSTI4 0
EQI4 $159
ADDRLP4 1588
INDIRI4
CNSTI4 45
NEI4 $156
LABELV $159
line 259
;259:	readBuf[i_r] = 0;
ADDRLP4 4
INDIRI4
ADDRLP4 264
ADDP4
CNSTI1 0
ASGNI1
line 261
;260:	//THE RANK
;261:	ent->client->ps.fd.forceRank = atoi(readBuf);
ADDRLP4 264
ARGP4
ADDRLP4 1592
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1180
ADDP4
ADDRLP4 1592
INDIRI4
ASGNI4
line 262
;262:	i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 264
;263:
;264:	i_r = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $161
JUMPV
LABELV $160
line 266
;265:	while (forcePowers[i] && forcePowers[i] != '-')
;266:	{
line 267
;267:		readBuf[i_r] = forcePowers[i];
ADDRLP4 4
INDIRI4
ADDRLP4 264
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 268
;268:		i_r++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 269
;269:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 270
;270:	}
LABELV $161
line 265
ADDRLP4 1596
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1596
INDIRI4
CNSTI4 0
EQI4 $163
ADDRLP4 1596
INDIRI4
CNSTI4 45
NEI4 $160
LABELV $163
line 271
;271:	readBuf[i_r] = 0;
ADDRLP4 4
INDIRI4
ADDRLP4 264
ADDP4
CNSTI1 0
ASGNI1
line 273
;272:	//THE SIDE
;273:	ent->client->ps.fd.forceSide = atoi(readBuf);
ADDRLP4 264
ARGP4
ADDRLP4 1600
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1176
ADDP4
ADDRLP4 1600
INDIRI4
ASGNI4
line 274
;274:	i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 276
;275:
;276:	i_r = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $165
JUMPV
LABELV $164
line 279
;277:	while (forcePowers[i] && forcePowers[i] != '\n' &&
;278:		i_r < NUM_FORCE_POWERS)
;279:	{
line 280
;280:		readBuf[0] = forcePowers[i];
ADDRLP4 264
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
ASGNI1
line 281
;281:		readBuf[1] = 0;
ADDRLP4 264+1
CNSTI1 0
ASGNI1
line 283
;282:
;283:		ent->client->ps.fd.forcePowerLevel[i_r] = atoi(readBuf);
ADDRLP4 264
ARGP4
ADDRLP4 1604
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
ADDRLP4 1604
INDIRI4
ASGNI4
line 284
;284:		if (ent->client->ps.fd.forcePowerLevel[i_r])
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $168
line 285
;285:		{
line 286
;286:			ent->client->ps.fd.forcePowersKnown |= (1 << i_r);
ADDRLP4 1608
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 1608
INDIRP4
ADDRLP4 1608
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 287
;287:		}
ADDRGP4 $169
JUMPV
LABELV $168
line 289
;288:		else
;289:		{
line 290
;290:			ent->client->ps.fd.forcePowersKnown &= ~(1 << i_r);
ADDRLP4 1608
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 1608
INDIRP4
ADDRLP4 1608
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 291
;291:		}
LABELV $169
line 292
;292:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 293
;293:		i_r++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 294
;294:	}
LABELV $165
line 277
ADDRLP4 1604
ADDRLP4 0
INDIRI4
ADDRLP4 8
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1604
INDIRI4
CNSTI4 0
EQI4 $171
ADDRLP4 1604
INDIRI4
CNSTI4 10
EQI4 $171
ADDRLP4 4
INDIRI4
CNSTI4 18
LTI4 $164
LABELV $171
line 297
;295:	//THE POWERS
;296:
;297:	if (HasSetSaberOnly())
ADDRLP4 1608
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 1608
INDIRI4
CNSTI4 0
EQI4 $172
line 298
;298:	{
line 299
;299:		gentity_t *te = G_TempEntity( vec3_origin, EV_SET_FREE_SABER );
ADDRGP4 vec3_origin
ARGP4
CNSTI4 93
ARGI4
ADDRLP4 1616
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 1612
ADDRLP4 1616
INDIRP4
ASGNP4
line 300
;300:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 1620
ADDRLP4 1612
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 1620
INDIRP4
ADDRLP4 1620
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 301
;301:		te->s.eventParm = 1;
ADDRLP4 1612
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 1
ASGNI4
line 302
;302:	}
ADDRGP4 $173
JUMPV
LABELV $172
line 304
;303:	else
;304:	{
line 305
;305:		gentity_t *te = G_TempEntity( vec3_origin, EV_SET_FREE_SABER );
ADDRGP4 vec3_origin
ARGP4
CNSTI4 93
ARGI4
ADDRLP4 1616
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 1612
ADDRLP4 1616
INDIRP4
ASGNP4
line 306
;306:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 1620
ADDRLP4 1612
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 1620
INDIRP4
ADDRLP4 1620
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 307
;307:		te->s.eventParm = 0;
ADDRLP4 1612
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 0
ASGNI4
line 308
;308:	}
LABELV $173
line 310
;309:
;310:	if (g_forcePowerDisable.integer)
ADDRGP4 g_forcePowerDisable+12
INDIRI4
CNSTI4 0
EQI4 $174
line 311
;311:	{
line 312
;312:		gentity_t *te = G_TempEntity( vec3_origin, EV_SET_FORCE_DISABLE );
ADDRGP4 vec3_origin
ARGP4
CNSTI4 94
ARGI4
ADDRLP4 1616
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 1612
ADDRLP4 1616
INDIRP4
ASGNP4
line 313
;313:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 1620
ADDRLP4 1612
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 1620
INDIRP4
ADDRLP4 1620
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 314
;314:		te->s.eventParm = 1;
ADDRLP4 1612
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 1
ASGNI4
line 315
;315:	}
ADDRGP4 $175
JUMPV
LABELV $174
line 317
;316:	else
;317:	{
line 318
;318:		gentity_t *te = G_TempEntity( vec3_origin, EV_SET_FORCE_DISABLE );
ADDRGP4 vec3_origin
ARGP4
CNSTI4 94
ARGI4
ADDRLP4 1616
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 1612
ADDRLP4 1616
INDIRP4
ASGNP4
line 319
;319:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 1620
ADDRLP4 1612
INDIRP4
CNSTI4 304
ADDP4
ASGNP4
ADDRLP4 1620
INDIRP4
ADDRLP4 1620
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 320
;320:		te->s.eventParm = 0;
ADDRLP4 1612
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 0
ASGNI4
line 321
;321:	}
LABELV $175
line 325
;322:
;323:	//rww - It seems we currently want to always do this, even if the player isn't exceeding the max
;324:	//rank, so..
;325:	if (g_gametype.integer == GT_TOURNAMENT)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
NEI4 $177
line 326
;326:	{ //totally messes duel up to force someone into spec mode, and besides, each "round" is
line 328
;327:	  //counted as a full restart
;328:		ent->client->sess.setForce = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1552
ADDP4
CNSTI4 1
ASGNI4
line 329
;329:	}
LABELV $177
line 331
;330:
;331:	if (warnClient || !ent->client->sess.setForce)
ADDRLP4 1612
CNSTI4 0
ASGNI4
ADDRLP4 528
INDIRI4
ADDRLP4 1612
INDIRI4
NEI4 $182
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1552
ADDP4
INDIRI4
ADDRLP4 1612
INDIRI4
NEI4 $180
LABELV $182
line 332
;332:	{ //the client's rank is too high for the server and has been autocapped, so tell them
line 333
;333:		if (g_gametype.integer != GT_HOLOCRON && g_gametype.integer != GT_JEDIMASTER)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
EQI4 $183
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
EQI4 $183
line 334
;334:		{
line 343
;335:#ifdef EVENT_FORCE_RANK
;336:			gentity_t *te = G_TempEntity( vec3_origin, EV_GIVE_NEW_RANK );
;337:
;338:			te->r.svFlags |= SVF_BROADCAST;
;339:			te->s.trickedentindex = ent->s.number;
;340:			te->s.eventParm = maxRank;
;341:			te->s.bolt1 = 0;
;342:#endif
;343:			didEvent = qtrue;
ADDRLP4 1556
CNSTI4 1
ASGNI4
line 345
;344:
;345:			if (!(ent->r.svFlags & SVF_BOT) && g_gametype.integer != GT_TOURNAMENT)
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $187
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 3
EQI4 $187
line 346
;346:			{
line 347
;347:				if (g_gametype.integer < GT_TEAM || !g_teamAutoJoin.integer)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
LTI4 $194
ADDRGP4 g_teamAutoJoin+12
INDIRI4
CNSTI4 0
NEI4 $190
LABELV $194
line 348
;348:				{
line 350
;349:					//Make them a spectator so they can set their powerups up without being bothered.
;350:					ent->client->sess.sessionTeam = TEAM_SPECTATOR;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
CNSTI4 3
ASGNI4
line 351
;351:					ent->client->sess.spectatorState = SPECTATOR_FREE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1528
ADDP4
CNSTI4 1
ASGNI4
line 352
;352:					ent->client->sess.spectatorClient = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1532
ADDP4
CNSTI4 0
ASGNI4
line 354
;353:
;354:					ent->client->pers.teamState.state = TEAM_BEGIN;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1460
ADDP4
CNSTI4 0
ASGNI4
line 355
;355:				}
LABELV $190
line 356
;356:			}
LABELV $187
line 363
;357:
;358:#ifdef EVENT_FORCE_RANK
;359:			te->s.bolt2 = ent->client->sess.sessionTeam;
;360:#else
;361:			//Event isn't very reliable, I made it a string. This way I can send it to just one
;362:			//client also, as opposed to making a broadcast event.
;363:			trap_SendServerCommand(ent->s.number, va("nfr %i %i %i", maxRank, 1, ent->client->sess.sessionTeam));
ADDRGP4 $195
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
ARGI4
ADDRLP4 1616
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 1616
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 366
;364:			//Arg1 is new max rank, arg2 is non-0 if force menu should be shown, arg3 is the current team
;365:#endif
;366:		}
LABELV $183
line 367
;367:		ent->client->sess.setForce = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1552
ADDP4
CNSTI4 1
ASGNI4
line 368
;368:	}
LABELV $180
line 370
;369:
;370:	if (!didEvent)
ADDRLP4 1556
INDIRI4
CNSTI4 0
NEI4 $196
line 371
;371:	{
line 381
;372:#ifdef EVENT_FORCE_RANK
;373:		gentity_t *te = G_TempEntity( vec3_origin, EV_GIVE_NEW_RANK );
;374:
;375:		te->r.svFlags |= SVF_BROADCAST;
;376:		te->s.trickedentindex = ent->s.number;
;377:		te->s.eventParm = maxRank;
;378:		te->s.bolt1 = 1;
;379:		te->s.bolt2 = ent->client->sess.sessionTeam;
;380:#else
;381:		trap_SendServerCommand(ent->s.number, va("nfr %i %i %i", maxRank, 0, ent->client->sess.sessionTeam));
ADDRGP4 $195
ARGP4
ADDRLP4 520
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
ARGI4
ADDRLP4 1616
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 1616
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 383
;382:#endif
;383:	}
LABELV $196
line 385
;384:
;385:	if (warnClientLimit)
ADDRLP4 1560
INDIRI4
CNSTI4 0
EQI4 $198
line 386
;386:	{ //the server has one or more force powers disabled and the client is using them in his config
line 388
;387:		//trap_SendServerCommand(ent-g_entities, va("print \"The server has one or more force powers that you have chosen disabled.\nYou will not be able to use the disable force power(s) while playing on this server.\n\""));
;388:	}
LABELV $198
line 390
;389:
;390:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $201
JUMPV
LABELV $200
line 392
;391:	while (i < NUM_FORCE_POWERS)
;392:	{
line 393
;393:		if ((ent->client->ps.fd.forcePowersKnown & (1 << i)) &&
ADDRLP4 1616
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1624
CNSTI4 0
ASGNI4
ADDRLP4 1616
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
ADDRLP4 1624
INDIRI4
EQI4 $203
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1616
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
ADDRLP4 1624
INDIRI4
NEI4 $203
line 395
;394:			!ent->client->ps.fd.forcePowerLevel[i])
;395:		{ //err..
line 396
;396:			ent->client->ps.fd.forcePowersKnown &= ~(1 << i);
ADDRLP4 1628
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 1628
INDIRP4
ADDRLP4 1628
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 397
;397:		}
ADDRGP4 $204
JUMPV
LABELV $203
line 399
;398:		else
;399:		{
line 400
;400:			if (i != FP_LEVITATION && i != FP_SABERATTACK && i != FP_SABERDEFEND && i != FP_SABERTHROW)
ADDRLP4 0
INDIRI4
CNSTI4 1
EQI4 $205
ADDRLP4 0
INDIRI4
CNSTI4 15
EQI4 $205
ADDRLP4 0
INDIRI4
CNSTI4 16
EQI4 $205
ADDRLP4 0
INDIRI4
CNSTI4 17
EQI4 $205
line 401
;401:			{
line 402
;402:				lastFPKnown = i;
ADDRLP4 524
ADDRLP4 0
INDIRI4
ASGNI4
line 403
;403:			}
LABELV $205
line 404
;404:		}
LABELV $204
line 406
;405:
;406:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 407
;407:	}
LABELV $201
line 391
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $200
line 409
;408:
;409:	if (ent->client->ps.fd.forcePowersKnown & ent->client->sess.selectedFP)
ADDRLP4 1616
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1616
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
ADDRLP4 1616
INDIRP4
CNSTI4 1544
ADDP4
INDIRI4
BANDI4
CNSTI4 0
EQI4 $207
line 410
;410:	{
line 411
;411:		ent->client->ps.fd.forcePowerSelected = ent->client->sess.selectedFP;
ADDRLP4 1620
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1620
INDIRP4
CNSTI4 840
ADDP4
ADDRLP4 1620
INDIRP4
CNSTI4 1544
ADDP4
INDIRI4
ASGNI4
line 412
;412:	}
LABELV $207
line 414
;413:
;414:	if (!(ent->client->ps.fd.forcePowersKnown & (1 << ent->client->ps.fd.forcePowerSelected)))
ADDRLP4 1620
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1620
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 1620
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $209
line 415
;415:	{
line 416
;416:		if (lastFPKnown != -1)
ADDRLP4 524
INDIRI4
CNSTI4 -1
EQI4 $211
line 417
;417:		{
line 418
;418:			ent->client->ps.fd.forcePowerSelected = lastFPKnown;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
ADDRLP4 524
INDIRI4
ASGNI4
line 419
;419:		}
ADDRGP4 $212
JUMPV
LABELV $211
line 421
;420:		else
;421:		{
line 422
;422:			ent->client->ps.fd.forcePowerSelected = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
CNSTI4 0
ASGNI4
line 423
;423:		}
LABELV $212
line 424
;424:	}
LABELV $209
line 425
;425:}
LABELV $94
endproc WP_InitForcePowers 1632 24
export WP_SpawnInitForcePowers
proc WP_SpawnInitForcePowers 28 8
line 428
;426:
;427:void WP_SpawnInitForcePowers( gentity_t *ent )
;428:{
line 429
;429:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 431
;430:
;431:	ent->client->ps.saberAttackChainCount = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1296
ADDP4
CNSTI4 0
ASGNI4
line 433
;432:
;433:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $215
JUMPV
LABELV $214
line 436
;434:
;435:	while (i < NUM_FORCE_POWERS)
;436:	{
line 437
;437:		if (ent->client->ps.fd.forcePowersActive & (1 << i))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $217
line 438
;438:		{
line 439
;439:			WP_ForcePowerStop(ent, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 440
;440:		}
LABELV $217
line 442
;441:
;442:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 443
;443:	}
LABELV $215
line 435
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $214
line 445
;444:
;445:	ent->client->ps.fd.forceDeactivateAll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1184
ADDP4
CNSTI4 0
ASGNI4
line 447
;446:
;447:	ent->client->ps.fd.forcePower = ent->client->ps.fd.forcePowerMax = FORCE_POWER_MAX;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 100
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 924
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 920
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 448
;448:	ent->client->ps.fd.forcePowerRegenDebounceTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 928
ADDP4
CNSTI4 0
ASGNI4
line 449
;449:	ent->client->ps.fd.forceGripEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
CNSTI4 1023
ASGNI4
line 450
;450:	ent->client->ps.fd.forceMindtrickTargetIndex = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1144
ADDP4
CNSTI4 0
ASGNI4
line 451
;451:	ent->client->ps.fd.forceMindtrickTargetIndex2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1148
ADDP4
CNSTI4 0
ASGNI4
line 452
;452:	ent->client->ps.fd.forceMindtrickTargetIndex3 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1152
ADDP4
CNSTI4 0
ASGNI4
line 453
;453:	ent->client->ps.fd.forceMindtrickTargetIndex4 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1156
ADDP4
CNSTI4 0
ASGNI4
line 455
;454:
;455:	ent->client->ps.holocronBits = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 712
ADDP4
CNSTI4 0
ASGNI4
line 457
;456:
;457:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $220
JUMPV
LABELV $219
line 459
;458:	while (i < NUM_FORCE_POWERS)
;459:	{
line 460
;460:		ent->client->ps.holocronsCarried[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 632
ADDP4
ADDP4
CNSTF4 0
ASGNF4
line 461
;461:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 462
;462:	}
LABELV $220
line 458
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $219
line 464
;463:
;464:	if (g_gametype.integer == GT_HOLOCRON)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $222
line 465
;465:	{
line 466
;466:		i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $226
JUMPV
LABELV $225
line 468
;467:		while (i < NUM_FORCE_POWERS)
;468:		{
line 469
;469:			ent->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 470
;470:			i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 471
;471:		}
LABELV $226
line 467
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $225
line 473
;472:
;473:		if (HasSetSaberOnly())
ADDRLP4 12
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $228
line 474
;474:		{
line 480
;475:			/*
;476:			ent->client->ps.fd.forcePowerLevel[FP_SABERATTACK] = FORCE_LEVEL_3;
;477:			ent->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] = FORCE_LEVEL_3;
;478:			ent->client->ps.fd.forcePowerLevel[FP_SABERTHROW] = FORCE_LEVEL_3;
;479:			*/
;480:			if (ent->client->ps.fd.forcePowerLevel[FP_SABERATTACK] < FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
CNSTI4 1
GEI4 $230
line 481
;481:			{
line 482
;482:				ent->client->ps.fd.forcePowerLevel[FP_SABERATTACK] = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 1
ASGNI4
line 483
;483:			}
LABELV $230
line 484
;484:			if (ent->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] < FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 996
ADDP4
INDIRI4
CNSTI4 1
GEI4 $232
line 485
;485:			{
line 486
;486:				ent->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 1
ASGNI4
line 487
;487:			}
LABELV $232
line 488
;488:		}
LABELV $228
line 489
;489:	}
LABELV $222
line 491
;490:
;491:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $235
JUMPV
LABELV $234
line 494
;492:
;493:	while (i < NUM_FORCE_POWERS)
;494:	{
line 495
;495:		ent->client->ps.fd.forcePowerBaseLevel[i] = ent->client->ps.fd.forcePowerLevel[i];
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 1004
ADDP4
ADDP4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
ASGNI4
line 497
;496:
;497:		ent->client->ps.fd.forcePowerDebounce[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 498
;498:		ent->client->ps.fd.forcePowerDuration[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 500
;499:
;500:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 501
;501:	}
LABELV $235
line 493
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $234
line 503
;502:
;503:	ent->client->ps.fd.forcePowerRegenDebounceTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 928
ADDP4
CNSTI4 0
ASGNI4
line 504
;504:	ent->client->ps.fd.forceUsingAdded = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 505
;505:	ent->client->ps.fd.forceJumpZStart = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1080
ADDP4
CNSTF4 0
ASGNF4
line 506
;506:	ent->client->ps.fd.forceJumpCharge = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 0
ASGNF4
line 507
;507:	ent->client->ps.fd.forceJumpSound = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 0
ASGNI4
line 508
;508:	ent->client->ps.fd.forceGripDamageDebounceTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
CNSTI4 0
ASGNI4
line 509
;509:	ent->client->ps.fd.forceGripBeingGripped = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
CNSTF4 0
ASGNF4
line 510
;510:	ent->client->ps.fd.forceGripCripple = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1108
ADDP4
CNSTI4 0
ASGNI4
line 511
;511:	ent->client->ps.fd.forceGripUseTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1112
ADDP4
CNSTI4 0
ASGNI4
line 512
;512:	ent->client->ps.fd.forceGripSoundTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1116
ADDP4
CNSTF4 0
ASGNF4
line 513
;513:	ent->client->ps.fd.forceGripStarted = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
CNSTF4 0
ASGNF4
line 514
;514:	ent->client->ps.fd.forceSpeedSmash = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1124
ADDP4
CNSTF4 0
ASGNF4
line 515
;515:	ent->client->ps.fd.forceSpeedDoDamage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1128
ADDP4
CNSTF4 0
ASGNF4
line 516
;516:	ent->client->ps.fd.forceSpeedHitIndex = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1132
ADDP4
CNSTI4 0
ASGNI4
line 517
;517:	ent->client->ps.fd.forceHealTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1136
ADDP4
CNSTI4 0
ASGNI4
line 518
;518:	ent->client->ps.fd.forceHealAmount = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1140
ADDP4
CNSTI4 0
ASGNI4
line 519
;519:	ent->client->ps.fd.forceRageRecoveryTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1160
ADDP4
CNSTI4 0
ASGNI4
line 520
;520:	ent->client->ps.fd.forceDrainEntNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1164
ADDP4
CNSTI4 1023
ASGNI4
line 521
;521:	ent->client->ps.fd.forceDrainTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1168
ADDP4
CNSTF4 0
ASGNF4
line 523
;522:
;523:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $238
JUMPV
LABELV $237
line 525
;524:	while (i < NUM_FORCE_POWERS)
;525:	{
line 526
;526:		if ((ent->client->ps.fd.forcePowersKnown & (1 << i)) &&
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
ADDRLP4 20
INDIRI4
EQI4 $240
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $240
line 528
;527:			!ent->client->ps.fd.forcePowerLevel[i])
;528:		{ //err..
line 529
;529:			ent->client->ps.fd.forcePowersKnown &= ~(1 << i);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 530
;530:		}
LABELV $240
line 532
;531:
;532:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 533
;533:	}
LABELV $238
line 524
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $237
line 534
;534:}
LABELV $213
endproc WP_SpawnInitForcePowers 28 8
export ForcePowerUsableOn
proc ForcePowerUsableOn 68 16
line 537
;535:
;536:int ForcePowerUsableOn(gentity_t *attacker, gentity_t *other, forcePowers_t forcePower)
;537:{
line 538
;538:	if (other && other->client && other->client->ps.usingATST)
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRU4
EQU4 $243
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRU4
EQU4 $243
ADDRLP4 8
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $243
line 539
;539:	{
line 540
;540:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $242
JUMPV
LABELV $243
line 543
;541:	}
;542:
;543:	if (other && other->client && BG_HasYsalamiri(g_gametype.integer, &other->client->ps))
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTU4 0
ASGNU4
ADDRLP4 12
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $245
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $245
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $245
line 544
;544:	{
line 545
;545:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $242
JUMPV
LABELV $245
line 548
;546:	}
;547:
;548:	if (attacker && attacker->client && !BG_CanUseFPNow(g_gametype.integer, &attacker->client->ps, level.time, forcePower))
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
CNSTU4 0
ASGNU4
ADDRLP4 28
INDIRP4
CVPU4 4
ADDRLP4 32
INDIRU4
EQU4 $248
ADDRLP4 36
ADDRLP4 28
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 32
INDIRU4
EQU4 $248
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $248
line 549
;549:	{
line 550
;550:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $242
JUMPV
LABELV $248
line 554
;551:	}
;552:
;553:	//Dueling fighters cannot use force powers on others, with the exception of force push when locked with each other
;554:	if (attacker && attacker->client && attacker->client->ps.duelInProgress)
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
CNSTU4 0
ASGNU4
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRLP4 48
INDIRU4
EQU4 $252
ADDRLP4 52
ADDRLP4 44
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
ADDRLP4 48
INDIRU4
EQU4 $252
ADDRLP4 52
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
CNSTI4 0
EQI4 $252
line 555
;555:	{
line 556
;556:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $242
JUMPV
LABELV $252
line 559
;557:	}
;558:
;559:	if (other && other->client && other->client->ps.duelInProgress)
ADDRLP4 56
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 60
CNSTU4 0
ASGNU4
ADDRLP4 56
INDIRP4
CVPU4 4
ADDRLP4 60
INDIRU4
EQU4 $254
ADDRLP4 64
ADDRLP4 56
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CVPU4 4
ADDRLP4 60
INDIRU4
EQU4 $254
ADDRLP4 64
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
CNSTI4 0
EQI4 $254
line 560
;560:	{
line 561
;561:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $242
JUMPV
LABELV $254
line 564
;562:	}
;563:
;564:	return 1;
CNSTI4 1
RETI4
LABELV $242
endproc ForcePowerUsableOn 68 16
export WP_ForcePowerAvailable
proc WP_ForcePowerAvailable 8 0
line 568
;565:}
;566:
;567:qboolean WP_ForcePowerAvailable( gentity_t *self, forcePowers_t forcePower )
;568:{
line 569
;569:	int	drain = forcePowerNeeded[self->client->ps.fd.forcePowerLevel[forcePower]][forcePower];
ADDRLP4 4
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 72
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded
ADDP4
ADDP4
INDIRI4
ASGNI4
line 571
;570:
;571:	if (self->client->ps.fd.forcePowersActive & (1 << forcePower))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $257
line 572
;572:	{ //we're probably going to deactivate it..
line 573
;573:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $256
JUMPV
LABELV $257
line 576
;574:	}
;575:
;576:	if ( forcePower == FP_LEVITATION )
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $259
line 577
;577:	{
line 578
;578:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $256
JUMPV
LABELV $259
line 580
;579:	}
;580:	if ( !drain )
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $261
line 581
;581:	{
line 582
;582:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $256
JUMPV
LABELV $261
line 584
;583:	}
;584:	if ( self->client->ps.fd.forcePower < drain )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $263
line 585
;585:	{
line 586
;586:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $256
JUMPV
LABELV $263
line 588
;587:	}
;588:	return qtrue;
CNSTI4 1
RETI4
LABELV $256
endproc WP_ForcePowerAvailable 8 0
export WP_ForcePowerInUse
proc WP_ForcePowerInUse 0 0
line 592
;589:}
;590:
;591:qboolean WP_ForcePowerInUse( gentity_t *self, forcePowers_t forcePower )
;592:{
line 593
;593:	if ( (self->client->ps.fd.forcePowersActive & ( 1 << forcePower )) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $266
line 594
;594:	{//already using this power
line 595
;595:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $265
JUMPV
LABELV $266
line 598
;596:	}
;597:
;598:	return qfalse;
CNSTI4 0
RETI4
LABELV $265
endproc WP_ForcePowerInUse 0 0
export WP_ForcePowerUsable
proc WP_ForcePowerUsable 24 16
line 602
;599:}
;600:
;601:qboolean WP_ForcePowerUsable( gentity_t *self, forcePowers_t forcePower )
;602:{
line 603
;603:	if (BG_HasYsalamiri(g_gametype.integer, &self->client->ps))
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $269
line 604
;604:	{
line 605
;605:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $269
line 608
;606:	}
;607:
;608:	if (self->health <= 0 || self->client->ps.stats[STAT_HEALTH] <= 0 ||
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
LEI4 $275
ADDRLP4 12
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
LEI4 $275
ADDRLP4 12
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 8
INDIRI4
EQI4 $272
LABELV $275
line 610
;609:		(self->client->ps.eFlags & EF_DEAD))
;610:	{
line 611
;611:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $272
line 614
;612:	}
;613:
;614:	if (self->client->ps.pm_flags & PMF_FOLLOW)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $276
line 615
;615:	{ //specs can't use powers through people
line 616
;616:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $276
line 618
;617:	}
;618:	if (self->client->sess.sessionTeam == TEAM_SPECTATOR)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 3
NEI4 $278
line 619
;619:	{
line 620
;620:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $278
line 623
;621:	}
;622:
;623:	if (!BG_CanUseFPNow(g_gametype.integer, &self->client->ps, level.time, forcePower))
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $280
line 624
;624:	{
line 625
;625:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $280
line 628
;626:	}
;627:
;628:	if ( !(self->client->ps.fd.forcePowersKnown & ( 1 << forcePower )) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $284
line 629
;629:	{//don't know this power
line 630
;630:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $284
line 633
;631:	}
;632:	
;633:	if ( (self->client->ps.fd.forcePowersActive & ( 1 << forcePower )) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $286
line 634
;634:	{//already using this power
line 635
;635:		if (forcePower != FP_LEVITATION)
ADDRFP4 4
INDIRI4
CNSTI4 1
EQI4 $288
line 636
;636:		{
line 637
;637:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $288
line 639
;638:		}
;639:	}
LABELV $286
line 641
;640:
;641:	if (forcePower == FP_LEVITATION && self->client->fjDidJump)
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $290
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1752
ADDP4
INDIRI4
CNSTI4 0
EQI4 $290
line 642
;642:	{
line 643
;643:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $290
line 646
;644:	}
;645:
;646:	if (!self->client->ps.fd.forcePowerLevel[forcePower])
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $292
line 647
;647:	{
line 648
;648:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $268
JUMPV
LABELV $292
line 651
;649:	}
;650:
;651:	return WP_ForcePowerAvailable( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 WP_ForcePowerAvailable
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
RETI4
LABELV $268
endproc WP_ForcePowerUsable 24 16
export WP_AbsorbConversion
proc WP_AbsorbConversion 20 8
line 655
;652:}
;653:
;654:int WP_AbsorbConversion(gentity_t *attacked, int atdAbsLevel, gentity_t *attacker, int atPower, int atPowerLevel, int atForceSpent)
;655:{
line 656
;656:	int getLevel = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 657
;657:	int addTot = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 659
;658:
;659:	if (atPower != FP_LIGHTNING &&
ADDRLP4 8
ADDRFP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 7
EQI4 $295
ADDRLP4 8
INDIRI4
CNSTI4 13
EQI4 $295
ADDRLP4 8
INDIRI4
CNSTI4 6
EQI4 $295
ADDRLP4 8
INDIRI4
CNSTI4 3
EQI4 $295
ADDRLP4 8
INDIRI4
CNSTI4 4
EQI4 $295
line 664
;660:		atPower != FP_DRAIN &&
;661:		atPower != FP_GRIP &&
;662:		atPower != FP_PUSH &&
;663:		atPower != FP_PULL)
;664:	{ //Only these powers can be absorbed
line 665
;665:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $294
JUMPV
LABELV $295
line 668
;666:	}
;667:
;668:	if (!atdAbsLevel)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $297
line 669
;669:	{ //looks like attacker doesn't have any absorb power
line 670
;670:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $294
JUMPV
LABELV $297
line 673
;671:	}
;672:
;673:	if (!(attacked->client->ps.fd.forcePowersActive & (1 << FP_ABSORB)))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $299
line 674
;674:	{ //absorb is not active
line 675
;675:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $294
JUMPV
LABELV $299
line 679
;676:	}
;677:
;678:	//Subtract absorb power level from the offensive force power
;679:	getLevel = atPowerLevel;
ADDRLP4 0
ADDRFP4 16
INDIRI4
ASGNI4
line 680
;680:	getLevel -= atdAbsLevel;
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 4
INDIRI4
SUBI4
ASGNI4
line 682
;681:
;682:	if (getLevel < 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $301
line 683
;683:	{
line 684
;684:		getLevel = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 685
;685:	}
LABELV $301
line 688
;686:
;687:	//let the attacker absorb an amount of force used in this attack based on his level of absorb
;688:	addTot = (atForceSpent/3)*attacked->client->ps.fd.forcePowerLevel[FP_ABSORB];
ADDRLP4 4
ADDRFP4 20
INDIRI4
CNSTI4 3
DIVI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 972
ADDP4
INDIRI4
MULI4
ASGNI4
line 690
;689:
;690:	if (addTot < 1 && atForceSpent >= 1)
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
GEI4 $303
ADDRFP4 20
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $303
line 691
;691:	{
line 692
;692:		addTot = 1;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 693
;693:	}
LABELV $303
line 694
;694:	attacked->client->ps.fd.forcePower += addTot;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 695
;695:	if (attacked->client->ps.fd.forcePower > 100)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 100
LEI4 $305
line 696
;696:	{
line 697
;697:		attacked->client->ps.fd.forcePower = 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
CNSTI4 100
ASGNI4
line 698
;698:	}
LABELV $305
line 701
;699:
;700:	//play sound indicating that attack was absorbed
;701:	G_PreDefSound(attacker->client->ps.origin, PDSOUND_ABSORBHIT);
ADDRFP4 8
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 703
;702:
;703:	return getLevel;
ADDRLP4 0
INDIRI4
RETI4
LABELV $294
endproc WP_AbsorbConversion 20 8
export WP_ForcePowerRegenerate
proc WP_ForcePowerRegenerate 8 0
line 707
;704:}
;705:
;706:void WP_ForcePowerRegenerate( gentity_t *self, int overrideAmt )
;707:{
line 708
;708:	if ( !self->client )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $308
line 709
;709:	{
line 710
;710:		return;
ADDRGP4 $307
JUMPV
LABELV $308
line 713
;711:	}
;712:
;713:	if ( overrideAmt )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $310
line 714
;714:	{
line 715
;715:		self->client->ps.fd.forcePower += overrideAmt;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 716
;716:	}
ADDRGP4 $311
JUMPV
LABELV $310
line 718
;717:	else
;718:	{
line 719
;719:		self->client->ps.fd.forcePower++;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 720
;720:	}
LABELV $311
line 721
;721:	if ( self->client->ps.fd.forcePower > self->client->ps.fd.forcePowerMax )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
LEI4 $312
line 722
;722:	{
line 723
;723:		self->client->ps.fd.forcePower = self->client->ps.fd.forcePowerMax;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 920
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
ASGNI4
line 724
;724:	}
LABELV $312
line 725
;725:}
LABELV $307
endproc WP_ForcePowerRegenerate 8 0
export WP_ForcePowerStart
proc WP_ForcePowerStart 80 12
line 728
;726:
;727:void WP_ForcePowerStart( gentity_t *self, forcePowers_t forcePower, int overrideAmt )
;728:{
line 729
;729:	int	duration = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 730
;730:	qboolean hearable = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 731
;731:	float hearDist = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 733
;732:
;733:	if (!WP_ForcePowerAvailable( self, forcePower ))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 WP_ForcePowerAvailable
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $315
line 734
;734:	{
line 735
;735:		return;
ADDRGP4 $314
JUMPV
LABELV $315
line 742
;736:	}
;737:
;738:	//FIXME: debounce some of these
;739:
;740:	//and it in
;741:	//set up duration time
;742:	switch( (int)forcePower )
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $318
ADDRLP4 16
INDIRI4
CNSTI4 17
GTI4 $318
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $365
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $365
address $320
address $321
address $322
address $331
address $332
address $333
address $340
address $342
address $343
address $350
address $351
address $352
address $353
address $354
address $355
address $318
address $318
address $318
code
line 743
;743:	{
LABELV $320
line 745
;744:	case FP_HEAL:
;745:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 746
;746:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 747
;747:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 748
;748:		break;
ADDRGP4 $318
JUMPV
LABELV $321
line 750
;749:	case FP_LEVITATION:
;750:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 751
;751:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 752
;752:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 753
;753:		break;
ADDRGP4 $318
JUMPV
LABELV $322
line 755
;754:	case FP_SPEED:
;755:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 756
;756:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 757
;757:		if (self->client->ps.fd.forcePowerLevel[FP_SPEED] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
CNSTI4 1
NEI4 $323
line 758
;758:		{
line 759
;759:			duration = 10000;
ADDRLP4 4
CNSTI4 10000
ASGNI4
line 760
;760:		}
ADDRGP4 $324
JUMPV
LABELV $323
line 761
;761:		else if (self->client->ps.fd.forcePowerLevel[FP_SPEED] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
CNSTI4 2
NEI4 $325
line 762
;762:		{
line 763
;763:			duration = 15000;
ADDRLP4 4
CNSTI4 15000
ASGNI4
line 764
;764:		}
ADDRGP4 $326
JUMPV
LABELV $325
line 765
;765:		else if (self->client->ps.fd.forcePowerLevel[FP_SPEED] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
CNSTI4 3
NEI4 $318
line 766
;766:		{
line 767
;767:			duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 768
;768:		}
line 770
;769:		else //shouldn't get here
;770:		{
line 771
;771:			break;
LABELV $328
LABELV $326
LABELV $324
line 774
;772:		}
;773:
;774:		if (overrideAmt)
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $329
line 775
;775:		{
line 776
;776:			duration = overrideAmt;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
line 777
;777:		}
LABELV $329
line 779
;778:
;779:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 780
;780:		break;
ADDRGP4 $318
JUMPV
LABELV $331
line 782
;781:	case FP_PUSH:
;782:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 783
;783:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 784
;784:		break;
ADDRGP4 $318
JUMPV
LABELV $332
line 786
;785:	case FP_PULL:
;786:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 787
;787:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 788
;788:		break;
ADDRGP4 $318
JUMPV
LABELV $333
line 790
;789:	case FP_TELEPATHY:
;790:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 791
;791:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 792
;792:		if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 1
NEI4 $334
line 793
;793:		{
line 794
;794:			duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 795
;795:		}
ADDRGP4 $335
JUMPV
LABELV $334
line 796
;796:		else if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 2
NEI4 $336
line 797
;797:		{
line 798
;798:			duration = 25000;
ADDRLP4 4
CNSTI4 25000
ASGNI4
line 799
;799:		}
ADDRGP4 $337
JUMPV
LABELV $336
line 800
;800:		else if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 3
NEI4 $318
line 801
;801:		{
line 802
;802:			duration = 30000;
ADDRLP4 4
CNSTI4 30000
ASGNI4
line 803
;803:		}
line 805
;804:		else //shouldn't get here
;805:		{
line 806
;806:			break;
LABELV $339
LABELV $337
LABELV $335
line 809
;807:		}
;808:
;809:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 810
;810:		break;
ADDRGP4 $318
JUMPV
LABELV $340
line 812
;811:	case FP_GRIP:
;812:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 813
;813:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 815
;814:		//duration = 1000;
;815:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 816
;816:		self->client->ps.powerups[PW_DISINT_4] = level.time + 60000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 380
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 60000
ADDI4
ASGNI4
line 817
;817:		break;
ADDRGP4 $318
JUMPV
LABELV $342
line 819
;818:	case FP_LIGHTNING:
;819:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 820
;820:		hearDist = 512;
ADDRLP4 8
CNSTF4 1140850688
ASGNF4
line 821
;821:		duration = overrideAmt;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
line 822
;822:		overrideAmt = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 823
;823:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 824
;824:		self->client->ps.activeForcePass = self->client->ps.fd.forcePowerLevel[FP_LIGHTNING];
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 960
ADDP4
INDIRI4
ASGNI4
line 825
;825:		break;
ADDRGP4 $318
JUMPV
LABELV $343
line 827
;826:	case FP_RAGE:
;827:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 828
;828:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 829
;829:		if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 1
NEI4 $344
line 830
;830:		{
line 831
;831:			duration = 8000;
ADDRLP4 4
CNSTI4 8000
ASGNI4
line 832
;832:		}
ADDRGP4 $345
JUMPV
LABELV $344
line 833
;833:		else if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 2
NEI4 $346
line 834
;834:		{
line 835
;835:			duration = 14000;
ADDRLP4 4
CNSTI4 14000
ASGNI4
line 836
;836:		}
ADDRGP4 $347
JUMPV
LABELV $346
line 837
;837:		else if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 3
NEI4 $318
line 838
;838:		{
line 839
;839:			duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 840
;840:		}
line 842
;841:		else //shouldn't get here
;842:		{
line 843
;843:			break;
LABELV $349
LABELV $347
LABELV $345
line 846
;844:		}
;845:
;846:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 847
;847:		break;
ADDRGP4 $318
JUMPV
LABELV $350
line 849
;848:	case FP_PROTECT:
;849:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 850
;850:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 851
;851:		duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 852
;852:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 853
;853:		break;
ADDRGP4 $318
JUMPV
LABELV $351
line 855
;854:	case FP_ABSORB:
;855:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 856
;856:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 857
;857:		duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 858
;858:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 859
;859:		break;
ADDRGP4 $318
JUMPV
LABELV $352
line 861
;860:	case FP_TEAM_HEAL:
;861:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 862
;862:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 863
;863:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 864
;864:		break;
ADDRGP4 $318
JUMPV
LABELV $353
line 866
;865:	case FP_TEAM_FORCE:
;866:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 867
;867:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 868
;868:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 869
;869:		break;
ADDRGP4 $318
JUMPV
LABELV $354
line 871
;870:	case FP_DRAIN:
;871:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 872
;872:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 873
;873:		duration = overrideAmt;
ADDRLP4 4
ADDRFP4 8
INDIRI4
ASGNI4
line 874
;874:		overrideAmt = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 875
;875:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 877
;876:		//self->client->ps.activeForcePass = self->client->ps.fd.forcePowerLevel[FP_DRAIN];
;877:		break;
ADDRGP4 $318
JUMPV
LABELV $355
line 879
;878:	case FP_SEE:
;879:		hearable = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 880
;880:		hearDist = 256;
ADDRLP4 8
CNSTF4 1132462080
ASGNF4
line 881
;881:		if (self->client->ps.fd.forcePowerLevel[FP_SEE] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 1
NEI4 $356
line 882
;882:		{
line 883
;883:			duration = 10000;
ADDRLP4 4
CNSTI4 10000
ASGNI4
line 884
;884:		}
ADDRGP4 $357
JUMPV
LABELV $356
line 885
;885:		else if (self->client->ps.fd.forcePowerLevel[FP_SEE] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 2
NEI4 $358
line 886
;886:		{
line 887
;887:			duration = 20000;
ADDRLP4 4
CNSTI4 20000
ASGNI4
line 888
;888:		}
ADDRGP4 $359
JUMPV
LABELV $358
line 889
;889:		else if (self->client->ps.fd.forcePowerLevel[FP_SEE] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 3
NEI4 $318
line 890
;890:		{
line 891
;891:			duration = 30000;
ADDRLP4 4
CNSTI4 30000
ASGNI4
line 892
;892:		}
line 894
;893:		else //shouldn't get here
;894:		{
line 895
;895:			break;
LABELV $361
LABELV $359
LABELV $357
line 898
;896:		}
;897:
;898:		self->client->ps.fd.forcePowersActive |= ( 1 << forcePower );
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 899
;899:		break;
line 901
;900:	case FP_SABERATTACK:
;901:		break;
line 903
;902:	case FP_SABERDEFEND:
;903:		break;
line 905
;904:	case FP_SABERTHROW:
;905:		break;
line 907
;906:	default:
;907:		break;
LABELV $318
line 909
;908:	}
;909:	if ( duration )
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $366
line 910
;910:	{
line 911
;911:		self->client->ps.fd.forcePowerDuration[forcePower] = level.time + duration;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 912
;912:	}
ADDRGP4 $367
JUMPV
LABELV $366
line 914
;913:	else
;914:	{
line 915
;915:		self->client->ps.fd.forcePowerDuration[forcePower] = 0;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 916
;916:	}
LABELV $367
line 918
;917:
;918:	if (hearable)
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $369
line 919
;919:	{
line 920
;920:		self->client->ps.otherSoundLen = hearDist;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1268
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 921
;921:		self->client->ps.otherSoundTime = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1264
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 922
;922:	}
LABELV $369
line 924
;923:	
;924:	self->client->ps.fd.forcePowerDebounce[forcePower] = 0;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 926
;925:
;926:	if ((int)forcePower == FP_SPEED && overrideAmt)
ADDRFP4 4
INDIRI4
CNSTI4 2
NEI4 $372
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $372
line 927
;927:	{
line 928
;928:		BG_ForcePowerDrain( &self->client->ps, forcePower, overrideAmt*0.025 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
CNSTF4 1020054733
ADDRFP4 8
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 929
;929:	}
ADDRGP4 $373
JUMPV
LABELV $372
line 930
;930:	else if ((int)forcePower != FP_GRIP && (int)forcePower != FP_DRAIN)
ADDRLP4 24
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 6
EQI4 $374
ADDRLP4 24
INDIRI4
CNSTI4 13
EQI4 $374
line 931
;931:	{ //grip and drain drain as damage is done
line 932
;932:		BG_ForcePowerDrain( &self->client->ps, forcePower, overrideAmt );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 933
;933:	}
LABELV $374
LABELV $373
line 934
;934:}
LABELV $314
endproc WP_ForcePowerStart 80 12
export ForceHeal
proc ForceHeal 20 12
line 937
;935:
;936:void ForceHeal( gentity_t *self )
;937:{
line 938
;938:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $377
line 939
;939:	{
line 940
;940:		return;
ADDRGP4 $376
JUMPV
LABELV $377
line 949
;941:	}
;942:
;943:	/*if ( WP_ForcePowerInUse(self, FP_HEAL))
;944:	{
;945:		WP_ForcePowerStop(self, FP_HEAL);
;946:		return;
;947:	}*/
;948:
;949:	if ( !WP_ForcePowerUsable( self, FP_HEAL ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 0
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $379
line 950
;950:	{
line 951
;951:		return;
ADDRGP4 $376
JUMPV
LABELV $379
line 954
;952:	}
;953:
;954:	if ( self->health >= self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LTI4 $381
line 955
;955:	{
line 956
;956:		return;
ADDRGP4 $376
JUMPV
LABELV $381
line 959
;957:	}
;958:
;959:	if (self->client->ps.fd.forcePowerLevel[FP_HEAL] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CNSTI4 3
NEI4 $383
line 960
;960:	{
line 961
;961:		self->health += 50;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 963
;962:		
;963:		if (self->health > self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $385
line 964
;964:		{
line 965
;965:			self->health = self->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 966
;966:		}
LABELV $385
line 967
;967:		BG_ForcePowerDrain( &self->client->ps, FP_HEAL, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 968
;968:	}
ADDRGP4 $384
JUMPV
LABELV $383
line 969
;969:	else if (self->client->ps.fd.forcePowerLevel[FP_HEAL] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CNSTI4 2
NEI4 $387
line 970
;970:	{
line 971
;971:		self->health += 25;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 25
ADDI4
ASGNI4
line 973
;972:		
;973:		if (self->health > self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $389
line 974
;974:		{
line 975
;975:			self->health = self->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 976
;976:		}
LABELV $389
line 977
;977:		BG_ForcePowerDrain( &self->client->ps, FP_HEAL, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 978
;978:	}
ADDRGP4 $388
JUMPV
LABELV $387
line 980
;979:	else
;980:	{
line 981
;981:		self->health += 10;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 983
;982:		
;983:		if (self->health > self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $391
line 984
;984:		{
line 985
;985:			self->health = self->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 986
;986:		}
LABELV $391
line 987
;987:		BG_ForcePowerDrain( &self->client->ps, FP_HEAL, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 988
;988:	}
LABELV $388
LABELV $384
line 997
;989:	/*
;990:	else
;991:	{
;992:		WP_ForcePowerStart( self, FP_HEAL, 0 );
;993:	}
;994:	*/
;995:	//NOTE: Decided to make all levels instant.
;996:
;997:	G_Sound( self, CHAN_ITEM, G_SoundIndex("sound/weapons/force/heal.wav") );
ADDRGP4 $393
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1000
;998:	// No character heal voices
;999://	G_Sound( self, CHAN_VOICE, G_SoundIndex(va( "sound/weapons/force/heal%d.mp3", Q_irand( 1, 4 ) )) );
;1000:}
LABELV $376
endproc ForceHeal 20 12
export WP_AddToClientBitflags
proc WP_AddToClientBitflags 4 0
line 1003
;1001:
;1002:void WP_AddToClientBitflags(gentity_t *ent, int entNum)
;1003:{
line 1004
;1004:	if (!ent)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $395
line 1005
;1005:	{
line 1006
;1006:		return;
ADDRGP4 $394
JUMPV
LABELV $395
line 1009
;1007:	}
;1008:
;1009:	if (entNum > 47)
ADDRFP4 4
INDIRI4
CNSTI4 47
LEI4 $397
line 1010
;1010:	{
line 1011
;1011:		ent->s.trickedentindex4 |= (1 << (entNum-48));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 48
SUBI4
LSHI4
BORI4
ASGNI4
line 1012
;1012:	}
ADDRGP4 $398
JUMPV
LABELV $397
line 1013
;1013:	else if (entNum > 31)
ADDRFP4 4
INDIRI4
CNSTI4 31
LEI4 $399
line 1014
;1014:	{
line 1015
;1015:		ent->s.trickedentindex3 |= (1 << (entNum-32));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 32
SUBI4
LSHI4
BORI4
ASGNI4
line 1016
;1016:	}
ADDRGP4 $400
JUMPV
LABELV $399
line 1017
;1017:	else if (entNum > 15)
ADDRFP4 4
INDIRI4
CNSTI4 15
LEI4 $401
line 1018
;1018:	{
line 1019
;1019:		ent->s.trickedentindex2 |= (1 << (entNum-16));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 16
SUBI4
LSHI4
BORI4
ASGNI4
line 1020
;1020:	}
ADDRGP4 $402
JUMPV
LABELV $401
line 1022
;1021:	else
;1022:	{
line 1023
;1023:		ent->s.trickedentindex |= (1 << entNum);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 148
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 1024
;1024:	}
LABELV $402
LABELV $400
LABELV $398
line 1025
;1025:}
LABELV $394
endproc WP_AddToClientBitflags 4 0
export ForceTeamHeal
proc ForceTeamHeal 252 12
line 1028
;1026:
;1027:void ForceTeamHeal( gentity_t *self )
;1028:{
line 1029
;1029:	float radius = 256;
ADDRLP4 156
CNSTF4 1132462080
ASGNF4
line 1030
;1030:	int i = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1033
;1031:	gentity_t *ent;
;1032:	vec3_t a;
;1033:	int numpl = 0;
ADDRLP4 148
CNSTI4 0
ASGNI4
line 1035
;1034:	int pl[MAX_CLIENTS];
;1035:	int healthadd = 0;
ADDRLP4 160
CNSTI4 0
ASGNI4
line 1036
;1036:	gentity_t *te = NULL;
ADDRLP4 152
CNSTP4 0
ASGNP4
line 1038
;1037:
;1038:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $404
line 1039
;1039:	{
line 1040
;1040:		return;
ADDRGP4 $403
JUMPV
LABELV $404
line 1043
;1041:	}
;1042:
;1043:	if ( !WP_ForcePowerUsable( self, FP_TEAM_HEAL ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 164
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $406
line 1044
;1044:	{
line 1045
;1045:		return;
ADDRGP4 $403
JUMPV
LABELV $406
line 1048
;1046:	}
;1047:
;1048:	if (self->client->ps.fd.forcePowerLevel[FP_TEAM_HEAL] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 976
ADDP4
INDIRI4
CNSTI4 2
NEI4 $408
line 1049
;1049:	{
line 1050
;1050:		radius *= 1.5;
ADDRLP4 156
CNSTF4 1069547520
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 1051
;1051:	}
LABELV $408
line 1052
;1052:	if (self->client->ps.fd.forcePowerLevel[FP_TEAM_HEAL] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 976
ADDP4
INDIRI4
CNSTI4 3
NEI4 $413
line 1053
;1053:	{
line 1054
;1054:		radius *= 2;
ADDRLP4 156
CNSTF4 1073741824
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 1055
;1055:	}
ADDRGP4 $413
JUMPV
LABELV $412
line 1058
;1056:
;1057:	while (i < MAX_CLIENTS)
;1058:	{
line 1059
;1059:		ent = &g_entities[i];
ADDRLP4 0
CNSTI4 828
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1061
;1060:
;1061:		if (ent && ent->client && self != ent && OnSameTeam(self, ent) && ent->client->ps.stats[STAT_HEALTH] < ent->client->ps.stats[STAT_MAX_HEALTH] && ent->client->ps.stats[STAT_HEALTH] > 0 && ForcePowerUsableOn(self, ent, FP_TEAM_HEAL) &&
ADDRLP4 172
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 176
CNSTU4 0
ASGNU4
ADDRLP4 172
INDIRU4
ADDRLP4 176
INDIRU4
EQU4 $415
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 176
INDIRU4
EQU4 $415
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
INDIRP4
CVPU4 4
ADDRLP4 172
INDIRU4
EQU4 $415
ADDRLP4 180
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 188
CNSTI4 0
ASGNI4
ADDRLP4 184
INDIRI4
ADDRLP4 188
INDIRI4
EQI4 $415
ADDRLP4 196
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 200
ADDRLP4 196
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 200
INDIRI4
ADDRLP4 196
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
GEI4 $415
ADDRLP4 200
INDIRI4
ADDRLP4 188
INDIRI4
LEI4 $415
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 204
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
EQI4 $415
ADDRLP4 208
CNSTI4 408
ASGNI4
ADDRLP4 212
CNSTI4 20
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 208
INDIRI4
ADDP4
INDIRP4
ADDRLP4 212
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 208
INDIRI4
ADDP4
INDIRP4
ADDRLP4 212
INDIRI4
ADDP4
ARGP4
ADDRLP4 216
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
EQI4 $415
line 1063
;1062:			trap_InPVS(self->client->ps.origin, ent->client->ps.origin))
;1063:		{
line 1064
;1064:			VectorSubtract(self->client->ps.origin, ent->client->ps.origin, a);
ADDRLP4 220
CNSTI4 408
ASGNI4
ADDRLP4 224
ADDRFP4 0
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
ASGNP4
ADDRLP4 228
CNSTI4 20
ASGNI4
ADDRLP4 232
ADDRLP4 0
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
ASGNP4
ADDRLP4 136
ADDRLP4 224
INDIRP4
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
ADDRLP4 232
INDIRP4
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 236
CNSTI4 24
ASGNI4
ADDRLP4 136+4
ADDRLP4 224
INDIRP4
INDIRP4
ADDRLP4 236
INDIRI4
ADDP4
INDIRF4
ADDRLP4 232
INDIRP4
INDIRP4
ADDRLP4 236
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 240
CNSTI4 408
ASGNI4
ADDRLP4 244
CNSTI4 28
ASGNI4
ADDRLP4 136+8
ADDRFP4 0
INDIRP4
ADDRLP4 240
INDIRI4
ADDP4
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 240
INDIRI4
ADDP4
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1066
;1065:
;1066:			if (VectorLength(a) <= radius)
ADDRLP4 136
ARGP4
ADDRLP4 248
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 248
INDIRF4
ADDRLP4 156
INDIRF4
GTF4 $419
line 1067
;1067:			{
line 1068
;1068:				pl[numpl] = i;
ADDRLP4 148
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1069
;1069:				numpl++;
ADDRLP4 148
ADDRLP4 148
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1070
;1070:			}
LABELV $419
line 1071
;1071:		}
LABELV $415
line 1073
;1072:
;1073:		i++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1074
;1074:	}
LABELV $413
line 1057
ADDRLP4 4
INDIRI4
CNSTI4 32
LTI4 $412
line 1076
;1075:
;1076:	if (numpl < 1)
ADDRLP4 148
INDIRI4
CNSTI4 1
GEI4 $421
line 1077
;1077:	{
line 1078
;1078:		return;
ADDRGP4 $403
JUMPV
LABELV $421
line 1081
;1079:	}
;1080:
;1081:	if (numpl == 1)
ADDRLP4 148
INDIRI4
CNSTI4 1
NEI4 $423
line 1082
;1082:	{
line 1083
;1083:		healthadd = 50;
ADDRLP4 160
CNSTI4 50
ASGNI4
line 1084
;1084:	}
ADDRGP4 $424
JUMPV
LABELV $423
line 1085
;1085:	else if (numpl == 2)
ADDRLP4 148
INDIRI4
CNSTI4 2
NEI4 $425
line 1086
;1086:	{
line 1087
;1087:		healthadd = 33;
ADDRLP4 160
CNSTI4 33
ASGNI4
line 1088
;1088:	}
ADDRGP4 $426
JUMPV
LABELV $425
line 1090
;1089:	else
;1090:	{
line 1091
;1091:		healthadd = 25;
ADDRLP4 160
CNSTI4 25
ASGNI4
line 1092
;1092:	}
LABELV $426
LABELV $424
line 1094
;1093:
;1094:	i = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $428
JUMPV
LABELV $427
line 1097
;1095:
;1096:	while (i < numpl)
;1097:	{
line 1098
;1098:		if (g_entities[pl[i]].client->ps.stats[STAT_HEALTH] > 0 &&
ADDRLP4 168
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 172
CNSTI4 0
ASGNI4
ADDRLP4 168
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
LEI4 $430
ADDRLP4 168
INDIRI4
ADDRGP4 g_entities+676
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
LEI4 $430
line 1100
;1099:			g_entities[pl[i]].health > 0)
;1100:		{
line 1101
;1101:			g_entities[pl[i]].client->ps.stats[STAT_HEALTH] += healthadd;
ADDRLP4 176
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ASGNP4
ADDRLP4 176
INDIRP4
ADDRLP4 176
INDIRP4
INDIRI4
ADDRLP4 160
INDIRI4
ADDI4
ASGNI4
line 1102
;1102:			if (g_entities[pl[i]].client->ps.stats[STAT_HEALTH] > g_entities[pl[i]].client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 180
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 180
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 180
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $435
line 1103
;1103:			{
line 1104
;1104:				g_entities[pl[i]].client->ps.stats[STAT_HEALTH] = g_entities[pl[i]].client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 184
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 184
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 184
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 1105
;1105:			}
LABELV $435
line 1107
;1106:
;1107:			g_entities[pl[i]].health = g_entities[pl[i]].client->ps.stats[STAT_HEALTH];
ADDRLP4 184
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 184
INDIRI4
ADDRGP4 g_entities+676
ADDP4
ADDRLP4 184
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 1110
;1108:
;1109:			//At this point we know we got one, so add him into the collective event client bitflag
;1110:			if (!te)
ADDRLP4 152
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $443
line 1111
;1111:			{
line 1112
;1112:				te = G_TempEntity( self->client->ps.origin, EV_TEAM_POWER);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 37
ARGI4
ADDRLP4 188
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 152
ADDRLP4 188
INDIRP4
ASGNP4
line 1113
;1113:				te->s.eventParm = 1; //eventParm 1 is heal, eventParm 2 is force regen
ADDRLP4 152
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 1
ASGNI4
line 1116
;1114:
;1115:				//since we had an extra check above, do the drain now because we got at least one guy
;1116:				BG_ForcePowerDrain( &self->client->ps, FP_TEAM_HEAL, forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_TEAM_HEAL]][FP_TEAM_HEAL] );
ADDRLP4 192
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
CNSTI4 11
ARGI4
CNSTI4 72
ADDRLP4 192
INDIRP4
CNSTI4 976
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+44
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 1117
;1117:			}
LABELV $443
line 1119
;1118:
;1119:			WP_AddToClientBitflags(te, pl[i]);
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 WP_AddToClientBitflags
CALLV
pop
line 1122
;1120:			//Now cramming it all into one event.. doing this many g_sound events at once was a Bad Thing.
;1121:			//G_Sound( &g_entities[pl[i]], CHAN_ITEM, G_SoundIndex("sound/weapons/force/teamheal.wav") );
;1122:		}
LABELV $430
line 1123
;1123:		i++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1124
;1124:	}
LABELV $428
line 1096
ADDRLP4 4
INDIRI4
ADDRLP4 148
INDIRI4
LTI4 $427
line 1125
;1125:}
LABELV $403
endproc ForceTeamHeal 252 12
export ForceTeamForceReplenish
proc ForceTeamForceReplenish 240 12
line 1128
;1126:
;1127:void ForceTeamForceReplenish( gentity_t *self )
;1128:{
line 1129
;1129:	float radius = 256;
ADDRLP4 160
CNSTF4 1132462080
ASGNF4
line 1130
;1130:	int i = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1133
;1131:	gentity_t *ent;
;1132:	vec3_t a;
;1133:	int numpl = 0;
ADDRLP4 152
CNSTI4 0
ASGNI4
line 1135
;1134:	int pl[MAX_CLIENTS];
;1135:	int poweradd = 0;
ADDRLP4 156
CNSTI4 0
ASGNI4
line 1136
;1136:	gentity_t *te = NULL;
ADDRLP4 136
CNSTP4 0
ASGNP4
line 1138
;1137:
;1138:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $447
line 1139
;1139:	{
line 1140
;1140:		return;
ADDRGP4 $446
JUMPV
LABELV $447
line 1143
;1141:	}
;1142:
;1143:	if ( !WP_ForcePowerUsable( self, FP_TEAM_FORCE ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 12
ARGI4
ADDRLP4 164
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 164
INDIRI4
CNSTI4 0
NEI4 $449
line 1144
;1144:	{
line 1145
;1145:		return;
ADDRGP4 $446
JUMPV
LABELV $449
line 1148
;1146:	}
;1147:
;1148:	if (self->client->ps.fd.forcePowerLevel[FP_TEAM_FORCE] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 980
ADDP4
INDIRI4
CNSTI4 2
NEI4 $451
line 1149
;1149:	{
line 1150
;1150:		radius *= 1.5;
ADDRLP4 160
CNSTF4 1069547520
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
line 1151
;1151:	}
LABELV $451
line 1152
;1152:	if (self->client->ps.fd.forcePowerLevel[FP_TEAM_FORCE] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 980
ADDP4
INDIRI4
CNSTI4 3
NEI4 $456
line 1153
;1153:	{
line 1154
;1154:		radius *= 2;
ADDRLP4 160
CNSTF4 1073741824
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
line 1155
;1155:	}
ADDRGP4 $456
JUMPV
LABELV $455
line 1158
;1156:
;1157:	while (i < MAX_CLIENTS)
;1158:	{
line 1159
;1159:		ent = &g_entities[i];
ADDRLP4 0
CNSTI4 828
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1161
;1160:
;1161:		if (ent && ent->client && self != ent && OnSameTeam(self, ent) && ent->client->ps.fd.forcePower < 100 && ForcePowerUsableOn(self, ent, FP_TEAM_FORCE) &&
ADDRLP4 172
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 176
CNSTU4 0
ASGNU4
ADDRLP4 172
INDIRU4
ADDRLP4 176
INDIRU4
EQU4 $458
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 176
INDIRU4
EQU4 $458
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
INDIRP4
CVPU4 4
ADDRLP4 172
INDIRU4
EQU4 $458
ADDRLP4 180
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
EQI4 $458
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 100
GEI4 $458
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 12
ARGI4
ADDRLP4 192
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
EQI4 $458
ADDRLP4 196
CNSTI4 408
ASGNI4
ADDRLP4 200
CNSTI4 20
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 196
INDIRI4
ADDP4
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 196
INDIRI4
ADDP4
INDIRP4
ADDRLP4 200
INDIRI4
ADDP4
ARGP4
ADDRLP4 204
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
EQI4 $458
line 1163
;1162:			trap_InPVS(self->client->ps.origin, ent->client->ps.origin))
;1163:		{
line 1164
;1164:			VectorSubtract(self->client->ps.origin, ent->client->ps.origin, a);
ADDRLP4 208
CNSTI4 408
ASGNI4
ADDRLP4 212
ADDRFP4 0
INDIRP4
ADDRLP4 208
INDIRI4
ADDP4
ASGNP4
ADDRLP4 216
CNSTI4 20
ASGNI4
ADDRLP4 220
ADDRLP4 0
INDIRP4
ADDRLP4 208
INDIRI4
ADDP4
ASGNP4
ADDRLP4 140
ADDRLP4 212
INDIRP4
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
ADDRLP4 220
INDIRP4
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 224
CNSTI4 24
ASGNI4
ADDRLP4 140+4
ADDRLP4 212
INDIRP4
INDIRP4
ADDRLP4 224
INDIRI4
ADDP4
INDIRF4
ADDRLP4 220
INDIRP4
INDIRP4
ADDRLP4 224
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 228
CNSTI4 408
ASGNI4
ADDRLP4 232
CNSTI4 28
ASGNI4
ADDRLP4 140+8
ADDRFP4 0
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1166
;1165:
;1166:			if (VectorLength(a) <= radius)
ADDRLP4 140
ARGP4
ADDRLP4 236
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 236
INDIRF4
ADDRLP4 160
INDIRF4
GTF4 $462
line 1167
;1167:			{
line 1168
;1168:				pl[numpl] = i;
ADDRLP4 152
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1169
;1169:				numpl++;
ADDRLP4 152
ADDRLP4 152
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1170
;1170:			}
LABELV $462
line 1171
;1171:		}
LABELV $458
line 1173
;1172:
;1173:		i++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1174
;1174:	}
LABELV $456
line 1157
ADDRLP4 4
INDIRI4
CNSTI4 32
LTI4 $455
line 1176
;1175:
;1176:	if (numpl < 1)
ADDRLP4 152
INDIRI4
CNSTI4 1
GEI4 $464
line 1177
;1177:	{
line 1178
;1178:		return;
ADDRGP4 $446
JUMPV
LABELV $464
line 1181
;1179:	}
;1180:
;1181:	if (numpl == 1)
ADDRLP4 152
INDIRI4
CNSTI4 1
NEI4 $466
line 1182
;1182:	{
line 1183
;1183:		poweradd = 50;
ADDRLP4 156
CNSTI4 50
ASGNI4
line 1184
;1184:	}
ADDRGP4 $467
JUMPV
LABELV $466
line 1185
;1185:	else if (numpl == 2)
ADDRLP4 152
INDIRI4
CNSTI4 2
NEI4 $468
line 1186
;1186:	{
line 1187
;1187:		poweradd = 33;
ADDRLP4 156
CNSTI4 33
ASGNI4
line 1188
;1188:	}
ADDRGP4 $469
JUMPV
LABELV $468
line 1190
;1189:	else
;1190:	{
line 1191
;1191:		poweradd = 25;
ADDRLP4 156
CNSTI4 25
ASGNI4
line 1192
;1192:	}
LABELV $469
LABELV $467
line 1194
;1193:
;1194:	BG_ForcePowerDrain( &self->client->ps, FP_TEAM_FORCE, forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_TEAM_FORCE]][FP_TEAM_FORCE] );
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
CNSTI4 12
ARGI4
CNSTI4 72
ADDRLP4 168
INDIRP4
CNSTI4 980
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+48
ADDP4
INDIRI4
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 1196
;1195:
;1196:	i = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $472
JUMPV
LABELV $471
line 1199
;1197:
;1198:	while (i < numpl)
;1199:	{
line 1200
;1200:		g_entities[pl[i]].client->ps.fd.forcePower += poweradd;
ADDRLP4 172
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ASGNP4
ADDRLP4 172
INDIRP4
ADDRLP4 172
INDIRP4
INDIRI4
ADDRLP4 156
INDIRI4
ADDI4
ASGNI4
line 1201
;1201:		if (g_entities[pl[i]].client->ps.fd.forcePower > 100)
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 100
LEI4 $475
line 1202
;1202:		{
line 1203
;1203:			g_entities[pl[i]].client->ps.fd.forcePower = 100;
CNSTI4 828
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
CNSTI4 100
ASGNI4
line 1204
;1204:		}
LABELV $475
line 1207
;1205:
;1206:		//At this point we know we got one, so add him into the collective event client bitflag
;1207:		if (!te)
ADDRLP4 136
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $479
line 1208
;1208:		{
line 1209
;1209:			te = G_TempEntity( self->client->ps.origin, EV_TEAM_POWER);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 37
ARGI4
ADDRLP4 176
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 136
ADDRLP4 176
INDIRP4
ASGNP4
line 1210
;1210:			te->s.eventParm = 2; //eventParm 1 is heal, eventParm 2 is force regen
ADDRLP4 136
INDIRP4
CNSTI4 256
ADDP4
CNSTI4 2
ASGNI4
line 1211
;1211:		}
LABELV $479
line 1213
;1212:
;1213:		WP_AddToClientBitflags(te, pl[i]);
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 WP_AddToClientBitflags
CALLV
pop
line 1217
;1214:		//Now cramming it all into one event.. doing this many g_sound events at once was a Bad Thing.
;1215:		//G_Sound( &g_entities[pl[i]], CHAN_ITEM, G_SoundIndex("sound/weapons/force/teamforce.wav") );
;1216:		
;1217:		i++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1218
;1218:	}
LABELV $472
line 1198
ADDRLP4 4
INDIRI4
ADDRLP4 152
INDIRI4
LTI4 $471
line 1219
;1219:}
LABELV $446
endproc ForceTeamForceReplenish 240 12
export ForceGrip
proc ForceGrip 1144 28
line 1222
;1220:
;1221:void ForceGrip( gentity_t *self )
;1222:{
line 1226
;1223:	trace_t tr;
;1224:	vec3_t tfrom, tto, fwd;
;1225:
;1226:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $482
line 1227
;1227:	{
line 1228
;1228:		return;
ADDRGP4 $481
JUMPV
LABELV $482
line 1231
;1229:	}
;1230:
;1231:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $484
line 1232
;1232:	{
line 1233
;1233:		return;
ADDRGP4 $481
JUMPV
LABELV $484
line 1236
;1234:	}
;1235:
;1236:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $486
line 1237
;1237:	{
line 1238
;1238:		return;
ADDRGP4 $481
JUMPV
LABELV $486
line 1241
;1239:	}
;1240:
;1241:	if (self->client->ps.fd.forceGripUseTime > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1112
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $488
line 1242
;1242:	{
line 1243
;1243:		return;
ADDRGP4 $481
JUMPV
LABELV $488
line 1246
;1244:	}
;1245:
;1246:	if ( !WP_ForcePowerUsable( self, FP_GRIP ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 1116
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 1116
INDIRI4
CNSTI4 0
NEI4 $491
line 1247
;1247:	{
line 1248
;1248:		return;
ADDRGP4 $481
JUMPV
LABELV $491
line 1251
;1249:	}
;1250:
;1251:	VectorCopy(self->client->ps.origin, tfrom);
ADDRLP4 1080
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1252
;1252:	tfrom[2] += self->client->ps.viewheight;
ADDRLP4 1080+8
ADDRLP4 1080+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1253
;1253:	AngleVectors(self->client->ps.viewangles, fwd, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 1104
ARGP4
ADDRLP4 1120
CNSTP4 0
ASGNP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1254
;1254:	tto[0] = tfrom[0] + fwd[0]*MAX_GRIP_DISTANCE;
ADDRLP4 1092
ADDRLP4 1080
INDIRF4
CNSTF4 1132462080
ADDRLP4 1104
INDIRF4
MULF4
ADDF4
ASGNF4
line 1255
;1255:	tto[1] = tfrom[1] + fwd[1]*MAX_GRIP_DISTANCE;
ADDRLP4 1092+4
ADDRLP4 1080+4
INDIRF4
CNSTF4 1132462080
ADDRLP4 1104+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1256
;1256:	tto[2] = tfrom[2] + fwd[2]*MAX_GRIP_DISTANCE;
ADDRLP4 1092+8
ADDRLP4 1080+8
INDIRF4
CNSTF4 1132462080
ADDRLP4 1104+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1258
;1257:
;1258:	trap_Trace(&tr, tfrom, NULL, NULL, tto, self->s.number, MASK_PLAYERSOLID);
ADDRLP4 0
ARGP4
ADDRLP4 1080
ARGP4
ADDRLP4 1124
CNSTP4 0
ASGNP4
ADDRLP4 1124
INDIRP4
ARGP4
ADDRLP4 1124
INDIRP4
ARGP4
ADDRLP4 1092
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1260
;1259:
;1260:	if ( tr.fraction != 1.0 &&
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $500
ADDRLP4 0+52
INDIRI4
CNSTI4 1023
EQI4 $500
ADDRLP4 1128
CNSTI4 828
ASGNI4
ADDRLP4 1128
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $500
ADDRLP4 1128
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1108
ADDP4
INDIRI4
CNSTI4 0
NEI4 $500
ADDRLP4 1128
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $500
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 1128
INDIRI4
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 1132
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 1136
CNSTI4 0
ASGNI4
ADDRLP4 1132
INDIRI4
ADDRLP4 1136
INDIRI4
EQI4 $500
ADDRGP4 g_friendlyFire+12
INDIRI4
ADDRLP4 1136
INDIRI4
NEI4 $514
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 828
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 1140
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 1140
INDIRI4
CNSTI4 0
NEI4 $500
LABELV $514
line 1268
;1261:		tr.entityNum != ENTITYNUM_NONE &&
;1262:		g_entities[tr.entityNum].client &&
;1263:		!g_entities[tr.entityNum].client->ps.fd.forceGripCripple &&
;1264:		g_entities[tr.entityNum].client->ps.fd.forceGripBeingGripped < level.time &&
;1265:		ForcePowerUsableOn(self, &g_entities[tr.entityNum], FP_GRIP) &&
;1266:		//g_entities[tr.entityNum].client->ps.fd.forcePowerLevel[FP_ABSORB] < self->client->ps.fd.forcePowerLevel[FP_GRIP] &&
;1267:		(g_friendlyFire.integer || !OnSameTeam(self, &g_entities[tr.entityNum])) ) //don't grip someone who's still crippled
;1268:	{
line 1269
;1269:		self->client->ps.fd.forceGripEntityNum = tr.entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 1270
;1270:		g_entities[tr.entityNum].client->ps.fd.forceGripStarted = level.time;
CNSTI4 828
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ASGNF4
line 1271
;1271:		self->client->ps.fd.forceGripDamageDebounceTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
CNSTI4 0
ASGNI4
line 1273
;1272:
;1273:		self->client->ps.forceHandExtend = HANDEXTEND_FORCEGRIP;//HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 3
ASGNI4
line 1274
;1274:		self->client->ps.forceHandExtendTime = level.time + 5000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 1275
;1275:	}
ADDRGP4 $501
JUMPV
LABELV $500
line 1277
;1276:	else
;1277:	{
line 1278
;1278:		self->client->ps.fd.forceGripEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
CNSTI4 1023
ASGNI4
line 1279
;1279:		return;
LABELV $501
line 1281
;1280:	}
;1281:}
LABELV $481
endproc ForceGrip 1144 28
export ForceSpeed
proc ForceSpeed 12 12
line 1284
;1282:
;1283:void ForceSpeed( gentity_t *self, int forceDuration )
;1284:{
line 1285
;1285:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $521
line 1286
;1286:	{
line 1287
;1287:		return;
ADDRGP4 $520
JUMPV
LABELV $521
line 1290
;1288:	}
;1289:
;1290:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $523
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $523
line 1292
;1291:		(self->client->ps.fd.forcePowersActive & (1 << FP_SPEED)) )
;1292:	{
line 1293
;1293:		WP_ForcePowerStop( self, FP_SPEED );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1294
;1294:		return;
ADDRGP4 $520
JUMPV
LABELV $523
line 1297
;1295:	}
;1296:
;1297:	if ( !WP_ForcePowerUsable( self, FP_SPEED ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $526
line 1298
;1298:	{
line 1299
;1299:		return;
ADDRGP4 $520
JUMPV
LABELV $526
line 1302
;1300:	}
;1301:
;1302:	self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 1304
;1303:
;1304:	WP_ForcePowerStart( self, FP_SPEED, forceDuration );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1305
;1305:	G_Sound( self, CHAN_BODY, G_SoundIndex("sound/weapons/force/speed.wav") );
ADDRGP4 $529
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1307
;1306:	//G_AddEvent(self, EV_STARTLOOPINGSOUND, speedLoopSound);
;1307:	G_Sound( self, TRACK_CHANNEL_2, speedLoopSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 52
ARGI4
ADDRGP4 speedLoopSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1308
;1308:	self->client->ps.fd.forceSpeedSmash = 2; //initial boost (will automax to whatever is appropriate for force level)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1124
ADDP4
CNSTF4 1073741824
ASGNF4
line 1309
;1309:	self->client->ps.fd.forceSpeedDoDamage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1128
ADDP4
CNSTF4 0
ASGNF4
line 1310
;1310:}
LABELV $520
endproc ForceSpeed 12 12
export ForceSeeing
proc ForceSeeing 12 12
line 1313
;1311:
;1312:void ForceSeeing( gentity_t *self )
;1313:{
line 1314
;1314:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $531
line 1315
;1315:	{
line 1316
;1316:		return;
ADDRGP4 $530
JUMPV
LABELV $531
line 1319
;1317:	}
;1318:
;1319:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $533
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $533
line 1321
;1320:		(self->client->ps.fd.forcePowersActive & (1 << FP_SEE)) )
;1321:	{
line 1322
;1322:		WP_ForcePowerStop( self, FP_SEE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 14
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1323
;1323:		return;
ADDRGP4 $530
JUMPV
LABELV $533
line 1326
;1324:	}
;1325:
;1326:	if ( !WP_ForcePowerUsable( self, FP_SEE ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 14
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $536
line 1327
;1327:	{
line 1328
;1328:		return;
ADDRGP4 $530
JUMPV
LABELV $536
line 1331
;1329:	}
;1330:
;1331:	self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 1333
;1332:
;1333:	WP_ForcePowerStart( self, FP_SEE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 14
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1335
;1334:
;1335:	G_Sound( self, CHAN_AUTO, G_SoundIndex("sound/weapons/force/see.wav") );
ADDRGP4 $539
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1336
;1336:	G_Sound( self, TRACK_CHANNEL_5, seeLoopSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 55
ARGI4
ADDRGP4 seeLoopSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1337
;1337:}
LABELV $530
endproc ForceSeeing 12 12
export ForceProtect
proc ForceProtect 8 12
line 1340
;1338:
;1339:void ForceProtect( gentity_t *self )
;1340:{
line 1341
;1341:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $541
line 1342
;1342:	{
line 1343
;1343:		return;
ADDRGP4 $540
JUMPV
LABELV $541
line 1346
;1344:	}
;1345:
;1346:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $543
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $543
line 1348
;1347:		(self->client->ps.fd.forcePowersActive & (1 << FP_PROTECT)) )
;1348:	{
line 1349
;1349:		WP_ForcePowerStop( self, FP_PROTECT );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1350
;1350:		return;
ADDRGP4 $540
JUMPV
LABELV $543
line 1353
;1351:	}
;1352:
;1353:	if ( !WP_ForcePowerUsable( self, FP_PROTECT ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $546
line 1354
;1354:	{
line 1355
;1355:		return;
ADDRGP4 $540
JUMPV
LABELV $546
line 1359
;1356:	}
;1357:
;1358:	// Make sure to turn off Force Rage and Force Absorb.
;1359:	if (self->client->ps.fd.forcePowersActive & (1 << FP_RAGE) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $548
line 1360
;1360:	{
line 1361
;1361:		WP_ForcePowerStop( self, FP_RAGE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 8
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1362
;1362:	}
LABELV $548
line 1363
;1363:	if (self->client->ps.fd.forcePowersActive & (1 << FP_ABSORB) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $550
line 1364
;1364:	{
line 1365
;1365:		WP_ForcePowerStop( self, FP_ABSORB );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1366
;1366:	}
LABELV $550
line 1368
;1367:
;1368:	self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 1370
;1369:
;1370:	WP_ForcePowerStart( self, FP_PROTECT, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1371
;1371:	G_PreDefSound(self->client->ps.origin, PDSOUND_PROTECT);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 1372
;1372:	G_Sound( self, TRACK_CHANNEL_3, protectLoopSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 53
ARGI4
ADDRGP4 protectLoopSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1373
;1373:}
LABELV $540
endproc ForceProtect 8 12
export ForceAbsorb
proc ForceAbsorb 8 12
line 1376
;1374:
;1375:void ForceAbsorb( gentity_t *self )
;1376:{
line 1377
;1377:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $554
line 1378
;1378:	{
line 1379
;1379:		return;
ADDRGP4 $553
JUMPV
LABELV $554
line 1382
;1380:	}
;1381:
;1382:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $556
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $556
line 1384
;1383:		(self->client->ps.fd.forcePowersActive & (1 << FP_ABSORB)) )
;1384:	{
line 1385
;1385:		WP_ForcePowerStop( self, FP_ABSORB );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1386
;1386:		return;
ADDRGP4 $553
JUMPV
LABELV $556
line 1389
;1387:	}
;1388:
;1389:	if ( !WP_ForcePowerUsable( self, FP_ABSORB ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $559
line 1390
;1390:	{
line 1391
;1391:		return;
ADDRGP4 $553
JUMPV
LABELV $559
line 1395
;1392:	}
;1393:
;1394:	// Make sure to turn off Force Rage and Force Protection.
;1395:	if (self->client->ps.fd.forcePowersActive & (1 << FP_RAGE) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $561
line 1396
;1396:	{
line 1397
;1397:		WP_ForcePowerStop( self, FP_RAGE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 8
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1398
;1398:	}
LABELV $561
line 1399
;1399:	if (self->client->ps.fd.forcePowersActive & (1 << FP_PROTECT) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $563
line 1400
;1400:	{
line 1401
;1401:		WP_ForcePowerStop( self, FP_PROTECT );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1402
;1402:	}
LABELV $563
line 1404
;1403:
;1404:	self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 1406
;1405:
;1406:	WP_ForcePowerStart( self, FP_ABSORB, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1407
;1407:	G_PreDefSound(self->client->ps.origin, PDSOUND_ABSORB);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 1408
;1408:	G_Sound( self, TRACK_CHANNEL_3, absorbLoopSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 53
ARGI4
ADDRGP4 absorbLoopSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1409
;1409:}
LABELV $553
endproc ForceAbsorb 8 12
export ForceRage
proc ForceRage 12 12
line 1412
;1410:
;1411:void ForceRage( gentity_t *self )
;1412:{
line 1413
;1413:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $567
line 1414
;1414:	{
line 1415
;1415:		return;
ADDRGP4 $566
JUMPV
LABELV $567
line 1418
;1416:	}
;1417:
;1418:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $569
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $569
line 1420
;1419:		(self->client->ps.fd.forcePowersActive & (1 << FP_RAGE)) )
;1420:	{
line 1421
;1421:		WP_ForcePowerStop( self, FP_RAGE );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 8
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1422
;1422:		return;
ADDRGP4 $566
JUMPV
LABELV $569
line 1425
;1423:	}
;1424:
;1425:	if ( !WP_ForcePowerUsable( self, FP_RAGE ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 8
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $572
line 1426
;1426:	{
line 1427
;1427:		return;
ADDRGP4 $566
JUMPV
LABELV $572
line 1430
;1428:	}
;1429:
;1430:	if (self->client->ps.fd.forceRageRecoveryTime >= level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1160
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LTI4 $574
line 1431
;1431:	{
line 1432
;1432:		return;
ADDRGP4 $566
JUMPV
LABELV $574
line 1435
;1433:	}
;1434:
;1435:	if (self->health < 10)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 10
GEI4 $577
line 1436
;1436:	{
line 1437
;1437:		return;
ADDRGP4 $566
JUMPV
LABELV $577
line 1441
;1438:	}
;1439:
;1440:	// Make sure to turn off Force Protection and Force Absorb.
;1441:	if (self->client->ps.fd.forcePowersActive & (1 << FP_PROTECT) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $579
line 1442
;1442:	{
line 1443
;1443:		WP_ForcePowerStop( self, FP_PROTECT );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 9
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1444
;1444:	}
LABELV $579
line 1445
;1445:	if (self->client->ps.fd.forcePowersActive & (1 << FP_ABSORB) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $581
line 1446
;1446:	{
line 1447
;1447:		WP_ForcePowerStop( self, FP_ABSORB );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 10
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 1448
;1448:	}
LABELV $581
line 1450
;1449:
;1450:	self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 1452
;1451:
;1452:	WP_ForcePowerStart( self, FP_RAGE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 8
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1454
;1453:
;1454:	G_Sound( self, TRACK_CHANNEL_4, G_SoundIndex("sound/weapons/force/rage.wav") );
ADDRGP4 $584
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 54
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1455
;1455:	G_Sound( self, TRACK_CHANNEL_3, rageLoopSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 53
ARGI4
ADDRGP4 rageLoopSound
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1456
;1456:}
LABELV $566
endproc ForceRage 12 12
export ForceLightning
proc ForceLightning 12 12
line 1459
;1457:
;1458:void ForceLightning( gentity_t *self )
;1459:{
line 1460
;1460:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $586
line 1461
;1461:	{
line 1462
;1462:		return;
ADDRGP4 $585
JUMPV
LABELV $586
line 1464
;1463:	}
;1464:	if ( self->client->ps.fd.forcePower < 25 || !WP_ForcePowerUsable( self, FP_LIGHTNING ) )
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 25
LTI4 $590
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $588
LABELV $590
line 1465
;1465:	{
line 1466
;1466:		return;
ADDRGP4 $585
JUMPV
LABELV $588
line 1468
;1467:	}
;1468:	if ( self->client->ps.fd.forcePowerDebounce[FP_LIGHTNING] > level.time )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 788
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $591
line 1469
;1469:	{//stops it while using it and also after using it, up to 3 second delay
line 1470
;1470:		return;
ADDRGP4 $585
JUMPV
LABELV $591
line 1473
;1471:	}
;1472:
;1473:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $594
line 1474
;1474:	{
line 1475
;1475:		return;
ADDRGP4 $585
JUMPV
LABELV $594
line 1478
;1476:	}
;1477:
;1478:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $596
line 1479
;1479:	{
line 1480
;1480:		return;
ADDRGP4 $585
JUMPV
LABELV $596
line 1487
;1481:	}
;1482:
;1483:	//Shoot lightning from hand
;1484://	self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
;1485://	self->client->ps.forceHandExtendTime = level.time + 1000;
;1486:	//rww - using grip anim now, to extend the burst time
;1487:	self->client->ps.forceHandExtend = HANDEXTEND_FORCEGRIP;//HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 3
ASGNI4
line 1488
;1488:	self->client->ps.forceHandExtendTime = level.time + 20000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 20000
ADDI4
ASGNI4
line 1492
;1489:
;1490:
;1491:	//G_SoundOnEnt( self, CHAN_BODY, "sound/weapons/force/lightning.wav" );
;1492:	G_Sound( self, CHAN_BODY, G_SoundIndex("sound/weapons/force/lightning.wav") );
ADDRGP4 $599
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1494
;1493:	
;1494:	WP_ForcePowerStart( self, FP_LIGHTNING, 500 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 7
ARGI4
CNSTI4 500
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1495
;1495:}
LABELV $585
endproc ForceLightning 12 12
export ForceLightningDamage
proc ForceLightningDamage 40 32
line 1498
;1496:
;1497:void ForceLightningDamage( gentity_t *self, gentity_t *traceEnt, vec3_t dir, vec3_t impactPoint )
;1498:{
line 1499
;1499:	self->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1748
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1500
;1500:	self->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 1501
;1501:	self->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1564
ADDP4
CNSTI4 0
ASGNI4
line 1503
;1502:
;1503:	if ( traceEnt && traceEnt->takedamage )
ADDRLP4 4
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $602
ADDRLP4 4
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $602
line 1504
;1504:	{
line 1505
;1505:		if ( traceEnt->client )
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $604
line 1506
;1506:		{//an enemy or object
line 1507
;1507:			if (ForcePowerUsableOn(self, traceEnt, FP_LIGHTNING))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRLP4 8
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $606
line 1508
;1508:			{
line 1509
;1509:				int	dmg = Q_irand(1,2); //Q_irand( 1, 3 );
CNSTI4 1
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 20
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 1511
;1510:				
;1511:				int modPowerLevel = -1;
ADDRLP4 12
CNSTI4 -1
ASGNI4
line 1513
;1512:				
;1513:				if (traceEnt->client)
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $608
line 1514
;1514:				{
line 1515
;1515:					modPowerLevel = WP_AbsorbConversion(traceEnt, traceEnt->client->ps.fd.forcePowerLevel[FP_ABSORB], self, FP_LIGHTNING, self->client->ps.fd.forcePowerLevel[FP_LIGHTNING], 1);
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
CNSTI4 408
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRP4
CNSTI4 972
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRLP4 32
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRP4
CNSTI4 960
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 36
ADDRGP4 WP_AbsorbConversion
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 1516
;1516:				}
LABELV $608
line 1518
;1517:
;1518:				if (modPowerLevel != -1)
ADDRLP4 12
INDIRI4
CNSTI4 -1
EQI4 $610
line 1519
;1519:				{
line 1520
;1520:					if (!modPowerLevel)
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $612
line 1521
;1521:					{
line 1522
;1522:						dmg = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1523
;1523:					}
ADDRGP4 $613
JUMPV
LABELV $612
line 1524
;1524:					else if (modPowerLevel == 1)
ADDRLP4 12
INDIRI4
CNSTI4 1
NEI4 $614
line 1525
;1525:					{
line 1526
;1526:						dmg = 1;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 1527
;1527:					}
ADDRGP4 $615
JUMPV
LABELV $614
line 1528
;1528:					else if (modPowerLevel == 2)
ADDRLP4 12
INDIRI4
CNSTI4 2
NEI4 $616
line 1529
;1529:					{
line 1530
;1530:						dmg = 1;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 1531
;1531:					}
LABELV $616
LABELV $615
LABELV $613
line 1532
;1532:				}
LABELV $610
line 1534
;1533:
;1534:				if (dmg)
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $618
line 1535
;1535:				{
line 1537
;1536:					//rww - Shields can now absorb lightning too.
;1537:					G_Damage( traceEnt, self, self, dir, impactPoint, dmg, /*DAMAGE_NO_ARMOR*/0, MOD_FORCE_DARK );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 27
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1538
;1538:				}
LABELV $618
line 1539
;1539:				if ( traceEnt->client )
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $620
line 1540
;1540:				{
line 1541
;1541:					if ( !Q_irand( 0, 2 ) )
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 24
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $622
line 1542
;1542:					{
line 1543
;1543:						G_Sound( traceEnt, CHAN_BODY, G_SoundIndex( "sound/weapons/force/lightninghit.wav" ) );
ADDRGP4 $624
ARGP4
ADDRLP4 28
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1544
;1544:					}
LABELV $622
line 1546
;1545:
;1546:					if (traceEnt->client->ps.electrifyTime < (level.time + 400))
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 728
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 400
ADDI4
GEI4 $625
line 1547
;1547:					{ //only update every 400ms to reduce bandwidth usage (as it is passing a 32-bit time value)
line 1548
;1548:						traceEnt->client->ps.electrifyTime = level.time + 800;
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 728
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 800
ADDI4
ASGNI4
line 1549
;1549:					}
LABELV $625
line 1550
;1550:				}
LABELV $620
line 1551
;1551:			}
LABELV $606
line 1552
;1552:		}
LABELV $604
line 1553
;1553:	}
LABELV $602
line 1554
;1554:}
LABELV $600
endproc ForceLightningDamage 40 32
export ForceShootLightning
proc ForceShootLightning 9460 28
line 1557
;1555:
;1556:void ForceShootLightning( gentity_t *self )
;1557:{
line 1562
;1558:	trace_t	tr;
;1559:	vec3_t	end, forward;
;1560:	gentity_t	*traceEnt;
;1561:
;1562:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $630
line 1563
;1563:	{
line 1564
;1564:		return;
ADDRGP4 $629
JUMPV
LABELV $630
line 1566
;1565:	}
;1566:	AngleVectors( self->client->ps.viewangles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 1108
CNSTP4 0
ASGNP4
ADDRLP4 1108
INDIRP4
ARGP4
ADDRLP4 1108
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1567
;1567:	VectorNormalize( forward );
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1569
;1568:
;1569:	if ( self->client->ps.fd.forcePowerLevel[FP_LIGHTNING] > FORCE_LEVEL_2 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 960
ADDP4
INDIRI4
CNSTI4 2
LEI4 $632
line 1570
;1570:	{//arc
line 1572
;1571:		vec3_t	center, mins, maxs, dir, ent_org, size, v;
;1572:		float	radius = FORCE_LIGHTNING_RADIUS, dot, dist;
ADDRLP4 1176
CNSTF4 1133903872
ASGNF4
line 1577
;1573:		gentity_t	*entityList[MAX_GENTITIES];
;1574:		int			iEntityList[MAX_GENTITIES];
;1575:		int		e, numListedEntities, i;
;1576:
;1577:		VectorCopy( self->client->ps.origin, center );
ADDRLP4 1116
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1578
;1578:		for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 1112
CNSTI4 0
ASGNI4
LABELV $634
line 1579
;1579:		{
line 1580
;1580:			mins[i] = center[i] - radius;
ADDRLP4 9412
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9412
INDIRI4
ADDRLP4 5288
ADDP4
ADDRLP4 9412
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
ADDRLP4 1176
INDIRF4
SUBF4
ASGNF4
line 1581
;1581:			maxs[i] = center[i] + radius;
ADDRLP4 9416
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9416
INDIRI4
ADDRLP4 5300
ADDP4
ADDRLP4 9416
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
ADDRLP4 1176
INDIRF4
ADDF4
ASGNF4
line 1582
;1582:		}
LABELV $635
line 1578
ADDRLP4 1112
ADDRLP4 1112
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1112
INDIRI4
CNSTI4 3
LTI4 $634
line 1583
;1583:		numListedEntities = trap_EntitiesInBox( mins, maxs, iEntityList, MAX_GENTITIES );
ADDRLP4 5288
ARGP4
ADDRLP4 5300
ARGP4
ADDRLP4 5312
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 9412
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 1184
ADDRLP4 9412
INDIRI4
ASGNI4
line 1585
;1584:
;1585:		i = 0;
ADDRLP4 1112
CNSTI4 0
ASGNI4
ADDRGP4 $639
JUMPV
LABELV $638
line 1587
;1586:		while (i < numListedEntities)
;1587:		{
line 1588
;1588:			entityList[i] = &g_entities[iEntityList[i]];
ADDRLP4 9416
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9416
INDIRI4
ADDRLP4 1192
ADDP4
CNSTI4 828
ADDRLP4 9416
INDIRI4
ADDRLP4 5312
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1590
;1589:
;1590:			i++;
ADDRLP4 1112
ADDRLP4 1112
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1591
;1591:		}
LABELV $639
line 1586
ADDRLP4 1112
INDIRI4
ADDRLP4 1184
INDIRI4
LTI4 $638
line 1593
;1592:
;1593:		for ( e = 0 ; e < numListedEntities ; e++ ) 
ADDRLP4 1180
CNSTI4 0
ASGNI4
ADDRGP4 $644
JUMPV
LABELV $641
line 1594
;1594:		{
line 1595
;1595:			traceEnt = entityList[e];
ADDRLP4 0
ADDRLP4 1180
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1192
ADDP4
INDIRP4
ASGNP4
line 1597
;1596:
;1597:			if ( !traceEnt )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $645
line 1598
;1598:				continue;
ADDRGP4 $642
JUMPV
LABELV $645
line 1599
;1599:			if ( traceEnt == self )
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $647
line 1600
;1600:				continue;
ADDRGP4 $642
JUMPV
LABELV $647
line 1601
;1601:			if ( traceEnt->r.ownerNum == self->s.number && traceEnt->s.weapon != WP_THERMAL )//can push your own thermals
ADDRLP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $649
ADDRLP4 0
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 11
EQI4 $649
line 1602
;1602:				continue;
ADDRGP4 $642
JUMPV
LABELV $649
line 1603
;1603:			if ( !traceEnt->inuse )
ADDRLP4 0
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
NEI4 $651
line 1604
;1604:				continue;
ADDRGP4 $642
JUMPV
LABELV $651
line 1605
;1605:			if ( !traceEnt->takedamage )
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
NEI4 $653
line 1606
;1606:				continue;
ADDRGP4 $642
JUMPV
LABELV $653
line 1607
;1607:			if ( traceEnt->health <= 0 )//no torturing corpses
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $655
line 1608
;1608:				continue;
ADDRGP4 $642
JUMPV
LABELV $655
line 1609
;1609:			if ( !g_friendlyFire.integer && OnSameTeam(self, traceEnt))
ADDRGP4 g_friendlyFire+12
INDIRI4
CNSTI4 0
NEI4 $657
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 9420
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 9420
INDIRI4
CNSTI4 0
EQI4 $657
line 1610
;1610:				continue;
ADDRGP4 $642
JUMPV
LABELV $657
line 1613
;1611:			//this is all to see if we need to start a saber attack, if it's in flight, this doesn't matter
;1612:			// find the distance from the edge of the bounding box
;1613:			for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 1112
CNSTI4 0
ASGNI4
LABELV $660
line 1614
;1614:			{
line 1615
;1615:				if ( center[i] < traceEnt->r.absmin[i] ) 
ADDRLP4 9424
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9424
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
ADDRLP4 9424
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
GEF4 $664
line 1616
;1616:				{
line 1617
;1617:					v[i] = traceEnt->r.absmin[i] - center[i];
ADDRLP4 9428
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9428
INDIRI4
ADDRLP4 1128
ADDP4
ADDRLP4 9428
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
ADDRLP4 9428
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1618
;1618:				} else if ( center[i] > traceEnt->r.absmax[i] ) 
ADDRGP4 $665
JUMPV
LABELV $664
ADDRLP4 9428
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9428
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
ADDRLP4 9428
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
LEF4 $666
line 1619
;1619:				{
line 1620
;1620:					v[i] = center[i] - traceEnt->r.absmax[i];
ADDRLP4 9432
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9432
INDIRI4
ADDRLP4 1128
ADDP4
ADDRLP4 9432
INDIRI4
ADDRLP4 1116
ADDP4
INDIRF4
ADDRLP4 9432
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1621
;1621:				} else 
ADDRGP4 $667
JUMPV
LABELV $666
line 1622
;1622:				{
line 1623
;1623:					v[i] = 0;
ADDRLP4 1112
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1128
ADDP4
CNSTF4 0
ASGNF4
line 1624
;1624:				}
LABELV $667
LABELV $665
line 1625
;1625:			}
LABELV $661
line 1613
ADDRLP4 1112
ADDRLP4 1112
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1112
INDIRI4
CNSTI4 3
LTI4 $660
line 1627
;1626:
;1627:			VectorSubtract( traceEnt->r.absmax, traceEnt->r.absmin, size );
ADDRLP4 1164
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1164+4
ADDRLP4 0
INDIRP4
CNSTI4 360
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1164+8
ADDRLP4 0
INDIRP4
CNSTI4 364
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1628
;1628:			VectorMA( traceEnt->r.absmin, 0.5, size, ent_org );
ADDRLP4 9436
CNSTF4 1056964608
ASGNF4
ADDRLP4 1140
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
ADDRLP4 9436
INDIRF4
ADDRLP4 1164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1140+4
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
ADDRLP4 9436
INDIRF4
ADDRLP4 1164+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1140+8
ADDRLP4 0
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 1164+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1632
;1629:
;1630:			//see if they're in front of me
;1631:			//must be within the forward cone
;1632:			VectorSubtract( ent_org, center, dir );
ADDRLP4 1152
ADDRLP4 1140
INDIRF4
ADDRLP4 1116
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1152+4
ADDRLP4 1140+4
INDIRF4
ADDRLP4 1116+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1152+8
ADDRLP4 1140+8
INDIRF4
ADDRLP4 1116+8
INDIRF4
SUBF4
ASGNF4
line 1633
;1633:			VectorNormalize( dir );
ADDRLP4 1152
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1634
;1634:			if ( (dot = DotProduct( dir, forward )) < 0.5 )
ADDRLP4 9440
ADDRLP4 1152
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 1152+4
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDF4
ADDRLP4 1152+8
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 9408
ADDRLP4 9440
INDIRF4
ASGNF4
ADDRLP4 9440
INDIRF4
CNSTF4 1056964608
GEF4 $680
line 1635
;1635:				continue;
ADDRGP4 $642
JUMPV
LABELV $680
line 1638
;1636:
;1637:			//must be close enough
;1638:			dist = VectorLength( v );
ADDRLP4 1128
ARGP4
ADDRLP4 9444
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 1188
ADDRLP4 9444
INDIRF4
ASGNF4
line 1639
;1639:			if ( dist >= radius ) 
ADDRLP4 1188
INDIRF4
ADDRLP4 1176
INDIRF4
LTF4 $686
line 1640
;1640:			{
line 1641
;1641:				continue;
ADDRGP4 $642
JUMPV
LABELV $686
line 1645
;1642:			}
;1643:		
;1644:			//in PVS?
;1645:			if ( !traceEnt->r.bmodel && !trap_InPVS( ent_org, /*self->client->renderInfo.handLPoint*/self->client->ps.origin ) )
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
INDIRI4
CNSTI4 0
NEI4 $688
ADDRLP4 1140
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9448
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 9448
INDIRI4
CNSTI4 0
NEI4 $688
line 1646
;1646:			{//must be in PVS
line 1647
;1647:				continue;
ADDRGP4 $642
JUMPV
LABELV $688
line 1651
;1648:			}
;1649:
;1650:			//Now check and see if we can actually hit it
;1651:			trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, ent_org, self->s.number, MASK_SHOT );
ADDRLP4 16
ARGP4
ADDRLP4 9452
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9452
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9456
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 9456
INDIRP4
ARGP4
ADDRLP4 9456
INDIRP4
ARGP4
ADDRLP4 1140
ARGP4
ADDRLP4 9452
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1652
;1652:			if ( tr.fraction < 1.0f && tr.entityNum != traceEnt->s.number )
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
GEF4 $690
ADDRLP4 16+52
INDIRI4
ADDRLP4 0
INDIRP4
INDIRI4
EQI4 $690
line 1653
;1653:			{//must have clear LOS
line 1654
;1654:				continue;
ADDRGP4 $642
JUMPV
LABELV $690
line 1658
;1655:			}
;1656:
;1657:			// ok, we are within the radius, add us to the incoming list
;1658:			ForceLightningDamage( self, traceEnt, dir, ent_org );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1152
ARGP4
ADDRLP4 1140
ARGP4
ADDRGP4 ForceLightningDamage
CALLV
pop
line 1659
;1659:		}
LABELV $642
line 1593
ADDRLP4 1180
ADDRLP4 1180
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $644
ADDRLP4 1180
INDIRI4
ADDRLP4 1184
INDIRI4
LTI4 $641
line 1661
;1660:
;1661:	}
ADDRGP4 $633
JUMPV
LABELV $632
line 1663
;1662:	else
;1663:	{//trace-line
line 1664
;1664:		VectorMA( self->client->ps.origin, 2048, forward, end );
ADDRLP4 1112
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1116
CNSTF4 1157627904
ASGNF4
ADDRLP4 1096
ADDRLP4 1112
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1116
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+4
ADDRLP4 1112
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1116
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1096+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1157627904
ADDRLP4 4+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1666
;1665:		
;1666:		trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, end, self->s.number, MASK_SHOT );
ADDRLP4 16
ARGP4
ADDRLP4 1120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1120
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1124
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 1124
INDIRP4
ARGP4
ADDRLP4 1124
INDIRP4
ARGP4
ADDRLP4 1096
ARGP4
ADDRLP4 1120
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1667
;1667:		if ( tr.entityNum == ENTITYNUM_NONE || tr.fraction == 1.0 || tr.allsolid || tr.startsolid )
ADDRLP4 16+52
INDIRI4
CNSTI4 1023
EQI4 $705
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
EQF4 $705
ADDRLP4 1128
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 1128
INDIRI4
NEI4 $705
ADDRLP4 16+4
INDIRI4
ADDRLP4 1128
INDIRI4
EQI4 $698
LABELV $705
line 1668
;1668:		{
line 1669
;1669:			return;
ADDRGP4 $629
JUMPV
LABELV $698
line 1672
;1670:		}
;1671:		
;1672:		traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 828
ADDRLP4 16+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1673
;1673:		ForceLightningDamage( self, traceEnt, forward, tr.endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 16+12
ARGP4
ADDRGP4 ForceLightningDamage
CALLV
pop
line 1674
;1674:	}
LABELV $633
line 1675
;1675:}
LABELV $629
endproc ForceShootLightning 9460 28
export ForceDrain
proc ForceDrain 12 12
line 1680
;1676:
;1677:int ForceShootDrain( gentity_t *self );
;1678:
;1679:void ForceDrain( gentity_t *self )
;1680:{
line 1681
;1681:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $709
line 1682
;1682:	{
line 1683
;1683:		return;
ADDRGP4 $708
JUMPV
LABELV $709
line 1686
;1684:	}
;1685:
;1686:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $711
line 1687
;1687:	{
line 1688
;1688:		return;
ADDRGP4 $708
JUMPV
LABELV $711
line 1691
;1689:	}
;1690:
;1691:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $713
line 1692
;1692:	{
line 1693
;1693:		return;
ADDRGP4 $708
JUMPV
LABELV $713
line 1696
;1694:	}
;1695:
;1696:	if ( self->client->ps.fd.forcePower < 25 || !WP_ForcePowerUsable( self, FP_DRAIN ) )
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 25
LTI4 $717
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $715
LABELV $717
line 1697
;1697:	{
line 1698
;1698:		return;
ADDRGP4 $708
JUMPV
LABELV $715
line 1700
;1699:	}
;1700:	if ( self->client->ps.fd.forcePowerDebounce[FP_DRAIN] > level.time )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $718
line 1701
;1701:	{//stops it while using it and also after using it, up to 3 second delay
line 1702
;1702:		return;
ADDRGP4 $708
JUMPV
LABELV $718
line 1707
;1703:	}
;1704:
;1705://	self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
;1706://	self->client->ps.forceHandExtendTime = level.time + 1000;
;1707:	self->client->ps.forceHandExtend = HANDEXTEND_FORCEGRIP;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 3
ASGNI4
line 1708
;1708:	self->client->ps.forceHandExtendTime = level.time + 20000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 20000
ADDI4
ASGNI4
line 1710
;1709:
;1710:	G_Sound( self, CHAN_BODY, G_SoundIndex("sound/weapons/force/drain.wav") );
ADDRGP4 $722
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 1712
;1711:	
;1712:	WP_ForcePowerStart( self, FP_DRAIN, 500 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 500
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 1713
;1713:}
LABELV $708
endproc ForceDrain 12 12
export ForceDrainDamage
proc ForceDrainDamage 68 24
line 1716
;1714:
;1715:void ForceDrainDamage( gentity_t *self, gentity_t *traceEnt, vec3_t dir, vec3_t impactPoint )
;1716:{
line 1719
;1717:	gentity_t *tent;
;1718:
;1719:	self->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1748
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1720
;1720:	self->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 1721
;1721:	self->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1564
ADDP4
CNSTI4 0
ASGNI4
line 1723
;1722:
;1723:	if ( traceEnt && traceEnt->takedamage )
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $725
ADDRLP4 8
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
EQI4 $725
line 1724
;1724:	{
line 1725
;1725:		if ( traceEnt->client && (!OnSameTeam(self, traceEnt) || g_friendlyFire.integer) && self->client->ps.fd.forceDrainTime < level.time && traceEnt->client->ps.fd.forcePower )
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $727
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $731
ADDRGP4 g_friendlyFire+12
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $727
LABELV $731
ADDRLP4 24
CNSTI4 408
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRP4
CNSTI4 1168
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $727
ADDRFP4 4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 0
EQI4 $727
line 1726
;1726:		{//an enemy or object
line 1727
;1727:			if (ForcePowerUsableOn(self, traceEnt, FP_DRAIN))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRLP4 28
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $732
line 1728
;1728:			{
line 1729
;1729:				int modPowerLevel = -1;
ADDRLP4 36
CNSTI4 -1
ASGNI4
line 1730
;1730:				int	dmg = 0; //Q_irand( 1, 3 );
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1731
;1731:				if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 1
NEI4 $734
line 1732
;1732:				{
line 1733
;1733:					dmg = 2; //because it's one-shot
ADDRLP4 32
CNSTI4 2
ASGNI4
line 1734
;1734:				}
ADDRGP4 $735
JUMPV
LABELV $734
line 1735
;1735:				else if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 2
NEI4 $736
line 1736
;1736:				{
line 1737
;1737:					dmg = 3;
ADDRLP4 32
CNSTI4 3
ASGNI4
line 1738
;1738:				}
ADDRGP4 $737
JUMPV
LABELV $736
line 1739
;1739:				else if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 3
NEI4 $738
line 1740
;1740:				{
line 1741
;1741:					dmg = 4;
ADDRLP4 32
CNSTI4 4
ASGNI4
line 1742
;1742:				}
LABELV $738
LABELV $737
LABELV $735
line 1744
;1743:			
;1744:				if (traceEnt->client)
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $740
line 1745
;1745:				{
line 1746
;1746:					modPowerLevel = WP_AbsorbConversion(traceEnt, traceEnt->client->ps.fd.forcePowerLevel[FP_ABSORB], self, FP_DRAIN, self->client->ps.fd.forcePowerLevel[FP_DRAIN], 0);
ADDRLP4 40
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
CNSTI4 408
ASGNI4
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
CNSTI4 972
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRLP4 48
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 52
ADDRGP4 WP_AbsorbConversion
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 52
INDIRI4
ASGNI4
line 1748
;1747:					//Since this is drain, don't absorb any power, but nullify the affect it has
;1748:				}
LABELV $740
line 1750
;1749:
;1750:				if (modPowerLevel != -1)
ADDRLP4 36
INDIRI4
CNSTI4 -1
EQI4 $742
line 1751
;1751:				{
line 1752
;1752:					if (!modPowerLevel)
ADDRLP4 36
INDIRI4
CNSTI4 0
NEI4 $744
line 1753
;1753:					{
line 1754
;1754:						dmg = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1755
;1755:					}
ADDRGP4 $745
JUMPV
LABELV $744
line 1756
;1756:					else if (modPowerLevel == 1)
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $746
line 1757
;1757:					{
line 1758
;1758:						dmg = 1;
ADDRLP4 32
CNSTI4 1
ASGNI4
line 1759
;1759:					}
ADDRGP4 $747
JUMPV
LABELV $746
line 1760
;1760:					else if (modPowerLevel == 2)
ADDRLP4 36
INDIRI4
CNSTI4 2
NEI4 $748
line 1761
;1761:					{
line 1762
;1762:						dmg = 2;
ADDRLP4 32
CNSTI4 2
ASGNI4
line 1763
;1763:					}
LABELV $748
LABELV $747
LABELV $745
line 1764
;1764:				}
LABELV $742
line 1767
;1765:				//G_Damage( traceEnt, self, self, dir, impactPoint, dmg, 0, MOD_FORCE_DARK );
;1766:
;1767:				if (dmg)
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $750
line 1768
;1768:				{
line 1769
;1769:					traceEnt->client->ps.fd.forcePower -= dmg;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 32
INDIRI4
SUBI4
ASGNI4
line 1770
;1770:				}
LABELV $750
line 1771
;1771:				if (traceEnt->client->ps.fd.forcePower < 0)
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 0
GEI4 $752
line 1772
;1772:				{
line 1773
;1773:					traceEnt->client->ps.fd.forcePower = 0;
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
CNSTI4 0
ASGNI4
line 1774
;1774:				}
LABELV $752
line 1776
;1775:
;1776:				if (self->client->ps.stats[STAT_HEALTH] < self->client->ps.stats[STAT_MAX_HEALTH] &&
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 44
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
ADDRLP4 44
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
GEI4 $754
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
LEI4 $754
ADDRLP4 48
INDIRI4
ADDRLP4 52
INDIRI4
LEI4 $754
line 1778
;1777:					self->health > 0 && self->client->ps.stats[STAT_HEALTH] > 0)
;1778:				{
line 1779
;1779:					self->health += dmg;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRLP4 32
INDIRI4
ADDI4
ASGNI4
line 1780
;1780:					if (self->health > self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 60
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $756
line 1781
;1781:					{
line 1782
;1782:						self->health = self->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 1783
;1783:					}
LABELV $756
line 1784
;1784:					self->client->ps.stats[STAT_HEALTH] = self->health;
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ASGNI4
line 1785
;1785:				}
LABELV $754
line 1787
;1786:
;1787:				traceEnt->client->ps.fd.forcePowerRegenDebounceTime = level.time + 800; //don't let the client being drained get force power back right away
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 800
ADDI4
ASGNI4
line 1811
;1788:
;1789:				//Drain the standard amount since we just drained someone else
;1790:
;1791:				/*
;1792:				if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_1)
;1793:				{
;1794:					BG_ForcePowerDrain( &self->client->ps, FP_DRAIN, 0 );
;1795:				}
;1796:				else
;1797:				{
;1798:					BG_ForcePowerDrain( &self->client->ps, FP_DRAIN, forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_DRAIN]][FP_DRAIN]/5 );
;1799:				}
;1800:
;1801:				if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_1)
;1802:				{
;1803:					self->client->ps.fd.forceDrainTime = level.time + 100;
;1804:				}
;1805:				else
;1806:				{
;1807:					self->client->ps.fd.forceDrainTime = level.time + 20;
;1808:				}
;1809:				*/
;1810:
;1811:				if ( traceEnt->client )
ADDRFP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $759
line 1812
;1812:				{
line 1813
;1813:					if ( !Q_irand( 0, 2 ) )
CNSTI4 0
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 56
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $761
line 1814
;1814:					{
line 1816
;1815:						//G_Sound( traceEnt, CHAN_BODY, G_SoundIndex( "sound/weapons/force/lightninghit.wav" ) );
;1816:					}
LABELV $761
line 1820
;1817:				//	traceEnt->s.powerups |= ( 1 << PW_DISINT_1 );
;1818:
;1819:				//	traceEnt->client->ps.powerups[PW_DISINT_1] = level.time + 500;
;1820:				}
LABELV $759
line 1822
;1821:
;1822:				tent = G_TempEntity( impactPoint, EV_FORCE_DRAINED);
ADDRFP4 12
INDIRP4
ARGP4
CNSTI4 84
ARGI4
ADDRLP4 56
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
ASGNP4
line 1823
;1823:				tent->s.eventParm = DirToByte(dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 256
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 1824
;1824:				tent->s.owner = traceEnt->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 260
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 1825
;1825:			}
LABELV $732
line 1826
;1826:		}
LABELV $727
line 1827
;1827:	}
LABELV $725
line 1828
;1828:}
LABELV $723
endproc ForceDrainDamage 68 24
export ForceShootDrain
proc ForceShootDrain 9460 28
line 1831
;1829:
;1830:int ForceShootDrain( gentity_t *self )
;1831:{
line 1835
;1832:	trace_t	tr;
;1833:	vec3_t	end, forward;
;1834:	gentity_t	*traceEnt;
;1835:	int			gotOneOrMore = 0;
ADDRLP4 1096
CNSTI4 0
ASGNI4
line 1837
;1836:
;1837:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $764
line 1838
;1838:	{
line 1839
;1839:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $763
JUMPV
LABELV $764
line 1841
;1840:	}
;1841:	AngleVectors( self->client->ps.viewangles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 1084
ARGP4
ADDRLP4 1112
CNSTP4 0
ASGNP4
ADDRLP4 1112
INDIRP4
ARGP4
ADDRLP4 1112
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1842
;1842:	VectorNormalize( forward );
ADDRLP4 1084
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1844
;1843:
;1844:	if ( self->client->ps.fd.forcePowerLevel[FP_DRAIN] > FORCE_LEVEL_2 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 2
LEI4 $766
line 1845
;1845:	{//arc
line 1847
;1846:		vec3_t	center, mins, maxs, dir, ent_org, size, v;
;1847:		float	radius = MAX_DRAIN_DISTANCE, dot, dist;
ADDRLP4 1180
CNSTF4 1140850688
ASGNF4
line 1852
;1848:		gentity_t	*entityList[MAX_GENTITIES];
;1849:		int			iEntityList[MAX_GENTITIES];
;1850:		int		e, numListedEntities, i;
;1851:
;1852:		VectorCopy( self->client->ps.origin, center );
ADDRLP4 1120
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1853
;1853:		for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 1116
CNSTI4 0
ASGNI4
LABELV $768
line 1854
;1854:		{
line 1855
;1855:			mins[i] = center[i] - radius;
ADDRLP4 9416
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9416
INDIRI4
ADDRLP4 5292
ADDP4
ADDRLP4 9416
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
ADDRLP4 1180
INDIRF4
SUBF4
ASGNF4
line 1856
;1856:			maxs[i] = center[i] + radius;
ADDRLP4 9420
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9420
INDIRI4
ADDRLP4 5304
ADDP4
ADDRLP4 9420
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
ADDRLP4 1180
INDIRF4
ADDF4
ASGNF4
line 1857
;1857:		}
LABELV $769
line 1853
ADDRLP4 1116
ADDRLP4 1116
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1116
INDIRI4
CNSTI4 3
LTI4 $768
line 1858
;1858:		numListedEntities = trap_EntitiesInBox( mins, maxs, iEntityList, MAX_GENTITIES );
ADDRLP4 5292
ARGP4
ADDRLP4 5304
ARGP4
ADDRLP4 5316
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 9416
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 1188
ADDRLP4 9416
INDIRI4
ASGNI4
line 1860
;1859:
;1860:		i = 0;
ADDRLP4 1116
CNSTI4 0
ASGNI4
ADDRGP4 $773
JUMPV
LABELV $772
line 1862
;1861:		while (i < numListedEntities)
;1862:		{
line 1863
;1863:			entityList[i] = &g_entities[iEntityList[i]];
ADDRLP4 9420
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9420
INDIRI4
ADDRLP4 1196
ADDP4
CNSTI4 828
ADDRLP4 9420
INDIRI4
ADDRLP4 5316
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1865
;1864:
;1865:			i++;
ADDRLP4 1116
ADDRLP4 1116
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1866
;1866:		}
LABELV $773
line 1861
ADDRLP4 1116
INDIRI4
ADDRLP4 1188
INDIRI4
LTI4 $772
line 1868
;1867:
;1868:		for ( e = 0 ; e < numListedEntities ; e++ ) 
ADDRLP4 1184
CNSTI4 0
ASGNI4
ADDRGP4 $778
JUMPV
LABELV $775
line 1869
;1869:		{
line 1870
;1870:			traceEnt = entityList[e];
ADDRLP4 0
ADDRLP4 1184
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1196
ADDP4
INDIRP4
ASGNP4
line 1872
;1871:
;1872:			if ( !traceEnt )
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $779
line 1873
;1873:				continue;
ADDRGP4 $776
JUMPV
LABELV $779
line 1874
;1874:			if ( traceEnt == self )
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $781
line 1875
;1875:				continue;
ADDRGP4 $776
JUMPV
LABELV $781
line 1876
;1876:			if ( !traceEnt->inuse )
ADDRLP4 0
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
NEI4 $783
line 1877
;1877:				continue;
ADDRGP4 $776
JUMPV
LABELV $783
line 1878
;1878:			if ( !traceEnt->takedamage )
ADDRLP4 0
INDIRP4
CNSTI4 680
ADDP4
INDIRI4
CNSTI4 0
NEI4 $785
line 1879
;1879:				continue;
ADDRGP4 $776
JUMPV
LABELV $785
line 1880
;1880:			if ( traceEnt->health <= 0 )//no torturing corpses
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $787
line 1881
;1881:				continue;
ADDRGP4 $776
JUMPV
LABELV $787
line 1882
;1882:			if ( !traceEnt->client )
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $789
line 1883
;1883:				continue;
ADDRGP4 $776
JUMPV
LABELV $789
line 1884
;1884:			if ( !traceEnt->client->ps.fd.forcePower )
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 0
NEI4 $791
line 1885
;1885:				continue;
ADDRGP4 $776
JUMPV
LABELV $791
line 1888
;1886://			if (traceEnt->client->ps.fd.forceSide == FORCE_DARKSIDE)	// We no longer care if the victim is dark or light
;1887://				continue;
;1888:			if (OnSameTeam(self, traceEnt))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 9420
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 9420
INDIRI4
CNSTI4 0
EQI4 $793
line 1889
;1889:				continue;
ADDRGP4 $776
JUMPV
LABELV $793
line 1892
;1890:			//this is all to see if we need to start a saber attack, if it's in flight, this doesn't matter
;1891:			// find the distance from the edge of the bounding box
;1892:			for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 1116
CNSTI4 0
ASGNI4
LABELV $795
line 1893
;1893:			{
line 1894
;1894:				if ( center[i] < traceEnt->r.absmin[i] ) 
ADDRLP4 9424
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9424
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
ADDRLP4 9424
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
GEF4 $799
line 1895
;1895:				{
line 1896
;1896:					v[i] = traceEnt->r.absmin[i] - center[i];
ADDRLP4 9428
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9428
INDIRI4
ADDRLP4 1132
ADDP4
ADDRLP4 9428
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
ADDRLP4 9428
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1897
;1897:				} else if ( center[i] > traceEnt->r.absmax[i] ) 
ADDRGP4 $800
JUMPV
LABELV $799
ADDRLP4 9428
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9428
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
ADDRLP4 9428
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
LEF4 $801
line 1898
;1898:				{
line 1899
;1899:					v[i] = center[i] - traceEnt->r.absmax[i];
ADDRLP4 9432
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9432
INDIRI4
ADDRLP4 1132
ADDP4
ADDRLP4 9432
INDIRI4
ADDRLP4 1120
ADDP4
INDIRF4
ADDRLP4 9432
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1900
;1900:				} else 
ADDRGP4 $802
JUMPV
LABELV $801
line 1901
;1901:				{
line 1902
;1902:					v[i] = 0;
ADDRLP4 1116
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1132
ADDP4
CNSTF4 0
ASGNF4
line 1903
;1903:				}
LABELV $802
LABELV $800
line 1904
;1904:			}
LABELV $796
line 1892
ADDRLP4 1116
ADDRLP4 1116
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1116
INDIRI4
CNSTI4 3
LTI4 $795
line 1906
;1905:
;1906:			VectorSubtract( traceEnt->r.absmax, traceEnt->r.absmin, size );
ADDRLP4 1168
ADDRLP4 0
INDIRP4
CNSTI4 356
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1168+4
ADDRLP4 0
INDIRP4
CNSTI4 360
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1168+8
ADDRLP4 0
INDIRP4
CNSTI4 364
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1907
;1907:			VectorMA( traceEnt->r.absmin, 0.5, size, ent_org );
ADDRLP4 9436
CNSTF4 1056964608
ASGNF4
ADDRLP4 1144
ADDRLP4 0
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
ADDRLP4 9436
INDIRF4
ADDRLP4 1168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1144+4
ADDRLP4 0
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
ADDRLP4 9436
INDIRF4
ADDRLP4 1168+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1144+8
ADDRLP4 0
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 1168+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1911
;1908:
;1909:			//see if they're in front of me
;1910:			//must be within the forward cone
;1911:			VectorSubtract( ent_org, center, dir );
ADDRLP4 1156
ADDRLP4 1144
INDIRF4
ADDRLP4 1120
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1156+4
ADDRLP4 1144+4
INDIRF4
ADDRLP4 1120+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1156+8
ADDRLP4 1144+8
INDIRF4
ADDRLP4 1120+8
INDIRF4
SUBF4
ASGNF4
line 1912
;1912:			VectorNormalize( dir );
ADDRLP4 1156
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1913
;1913:			if ( (dot = DotProduct( dir, forward )) < 0.5 )
ADDRLP4 9440
ADDRLP4 1156
INDIRF4
ADDRLP4 1084
INDIRF4
MULF4
ADDRLP4 1156+4
INDIRF4
ADDRLP4 1084+4
INDIRF4
MULF4
ADDF4
ADDRLP4 1156+8
INDIRF4
ADDRLP4 1084+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 9412
ADDRLP4 9440
INDIRF4
ASGNF4
ADDRLP4 9440
INDIRF4
CNSTF4 1056964608
GEF4 $815
line 1914
;1914:				continue;
ADDRGP4 $776
JUMPV
LABELV $815
line 1917
;1915:
;1916:			//must be close enough
;1917:			dist = VectorLength( v );
ADDRLP4 1132
ARGP4
ADDRLP4 9444
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 1192
ADDRLP4 9444
INDIRF4
ASGNF4
line 1918
;1918:			if ( dist >= radius ) 
ADDRLP4 1192
INDIRF4
ADDRLP4 1180
INDIRF4
LTF4 $821
line 1919
;1919:			{
line 1920
;1920:				continue;
ADDRGP4 $776
JUMPV
LABELV $821
line 1924
;1921:			}
;1922:		
;1923:			//in PVS?
;1924:			if ( !traceEnt->r.bmodel && !trap_InPVS( ent_org, /*self->client->renderInfo.handLPoint*/self->client->ps.origin ) )
ADDRLP4 0
INDIRP4
CNSTI4 312
ADDP4
INDIRI4
CNSTI4 0
NEI4 $823
ADDRLP4 1144
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9448
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 9448
INDIRI4
CNSTI4 0
NEI4 $823
line 1925
;1925:			{//must be in PVS
line 1926
;1926:				continue;
ADDRGP4 $776
JUMPV
LABELV $823
line 1930
;1927:			}
;1928:
;1929:			//Now check and see if we can actually hit it
;1930:			trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, ent_org, self->s.number, MASK_SHOT );
ADDRLP4 4
ARGP4
ADDRLP4 9452
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9452
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9456
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 9456
INDIRP4
ARGP4
ADDRLP4 9456
INDIRP4
ARGP4
ADDRLP4 1144
ARGP4
ADDRLP4 9452
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1931
;1931:			if ( tr.fraction < 1.0f && tr.entityNum != traceEnt->s.number )
ADDRLP4 4+8
INDIRF4
CNSTF4 1065353216
GEF4 $825
ADDRLP4 4+52
INDIRI4
ADDRLP4 0
INDIRP4
INDIRI4
EQI4 $825
line 1932
;1932:			{//must have clear LOS
line 1933
;1933:				continue;
ADDRGP4 $776
JUMPV
LABELV $825
line 1937
;1934:			}
;1935:
;1936:			// ok, we are within the radius, add us to the incoming list
;1937:			ForceDrainDamage( self, traceEnt, dir, ent_org );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1156
ARGP4
ADDRLP4 1144
ARGP4
ADDRGP4 ForceDrainDamage
CALLV
pop
line 1938
;1938:			gotOneOrMore = 1;
ADDRLP4 1096
CNSTI4 1
ASGNI4
line 1939
;1939:		}
LABELV $776
line 1868
ADDRLP4 1184
ADDRLP4 1184
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $778
ADDRLP4 1184
INDIRI4
ADDRLP4 1188
INDIRI4
LTI4 $775
line 1941
;1940:
;1941:	}
ADDRGP4 $767
JUMPV
LABELV $766
line 1943
;1942:	else
;1943:	{//trace-line
line 1944
;1944:		VectorMA( self->client->ps.origin, 2048, forward, end );
ADDRLP4 1116
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1120
CNSTF4 1157627904
ASGNF4
ADDRLP4 1100
ADDRLP4 1116
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1120
INDIRF4
ADDRLP4 1084
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 1116
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1120
INDIRF4
ADDRLP4 1084+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1100+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1157627904
ADDRLP4 1084+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1946
;1945:		
;1946:		trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, end, self->s.number, MASK_SHOT );
ADDRLP4 4
ARGP4
ADDRLP4 1124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1124
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1128
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 1128
INDIRP4
ARGP4
ADDRLP4 1128
INDIRP4
ARGP4
ADDRLP4 1100
ARGP4
ADDRLP4 1124
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1947
;1947:		if ( tr.entityNum == ENTITYNUM_NONE || tr.fraction == 1.0 || tr.allsolid || tr.startsolid || !g_entities[tr.entityNum].client || !g_entities[tr.entityNum].inuse )
ADDRLP4 4+52
INDIRI4
CNSTI4 1023
EQI4 $846
ADDRLP4 4+8
INDIRF4
CNSTF4 1065353216
EQF4 $846
ADDRLP4 1132
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 1132
INDIRI4
NEI4 $846
ADDRLP4 4+4
INDIRI4
ADDRLP4 1132
INDIRI4
NEI4 $846
ADDRLP4 1136
CNSTI4 828
ASGNI4
ADDRLP4 1136
INDIRI4
ADDRLP4 4+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $846
ADDRLP4 1136
INDIRI4
ADDRLP4 4+52
INDIRI4
MULI4
ADDRGP4 g_entities+412
ADDP4
INDIRI4
ADDRLP4 1132
INDIRI4
NEI4 $833
LABELV $846
line 1948
;1948:		{
line 1949
;1949:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $763
JUMPV
LABELV $833
line 1952
;1950:		}
;1951:		
;1952:		traceEnt = &g_entities[tr.entityNum];
ADDRLP4 0
CNSTI4 828
ADDRLP4 4+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1953
;1953:		ForceDrainDamage( self, traceEnt, forward, tr.endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1084
ARGP4
ADDRLP4 4+12
ARGP4
ADDRGP4 ForceDrainDamage
CALLV
pop
line 1954
;1954:		gotOneOrMore = 1;
ADDRLP4 1096
CNSTI4 1
ASGNI4
line 1955
;1955:	}
LABELV $767
line 1957
;1956:
;1957:	self->client->ps.activeForcePass = self->client->ps.fd.forcePowerLevel[FP_DRAIN] + FORCE_LEVEL_3;
ADDRLP4 1116
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1116
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 1116
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 3
ADDI4
ASGNI4
line 1964
;1958:
;1959:/*	if (self->client->ps.fd.forcePowerLevel[FP_DRAIN] == FORCE_LEVEL_1)
;1960:	{
;1961:		BG_ForcePowerDrain( &self->client->ps, FP_DRAIN, 0 );
;1962:	}
;1963:	else*/
;1964:	{
line 1965
;1965:		BG_ForcePowerDrain( &self->client->ps, FP_DRAIN, 1 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
CNSTI4 13
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 1966
;1966:	}
line 1968
;1967:
;1968:	self->client->ps.fd.forcePowerRegenDebounceTime = level.time + 500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1970
;1969:
;1970:	return gotOneOrMore;
ADDRLP4 1096
INDIRI4
RETI4
LABELV $763
endproc ForceShootDrain 9460 28
export ForceJumpCharge
proc ForceJumpCharge 24 12
line 1974
;1971:}
;1972:
;1973:void ForceJumpCharge( gentity_t *self, usercmd_t *ucmd )
;1974:{
line 1975
;1975:	float forceJumpChargeInterval = forceJumpStrength[0] / (FORCE_JUMP_CHARGE_TIME/FRAMETIME);
ADDRLP4 0
ADDRGP4 forceJumpStrength
INDIRF4
CNSTF4 1115684864
DIVF4
ASGNF4
line 1977
;1976:
;1977:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $851
line 1978
;1978:	{
line 1979
;1979:		return;
ADDRGP4 $850
JUMPV
LABELV $851
line 1982
;1980:	}
;1981:
;1982:	if (!self->client->ps.fd.forceJumpCharge && self->client->ps.groundEntityNum == ENTITYNUM_NONE)
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
NEF4 $853
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $853
line 1983
;1983:	{
line 1984
;1984:		return;
ADDRGP4 $850
JUMPV
LABELV $853
line 1987
;1985:	}
;1986:
;1987:	if (self->client->ps.fd.forcePower < forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]][FP_LEVITATION])
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 72
ADDRLP4 8
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+4
ADDP4
INDIRI4
GEI4 $855
line 1988
;1988:	{
line 1989
;1989:		G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 1990
;1990:		return;
ADDRGP4 $850
JUMPV
LABELV $855
line 1993
;1991:	}
;1992:
;1993:	if (!self->client->ps.fd.forceJumpCharge)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
NEF4 $858
line 1994
;1994:	{
line 1995
;1995:		self->client->ps.fd.forceJumpAddTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
CNSTI4 0
ASGNI4
line 1996
;1996:	}
LABELV $858
line 1998
;1997:
;1998:	if (self->client->ps.fd.forceJumpAddTime >= level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LTI4 $860
line 1999
;1999:	{
line 2000
;2000:		return;
ADDRGP4 $850
JUMPV
LABELV $860
line 2004
;2001:	}
;2002:
;2003:	//need to play sound
;2004:	if ( !self->client->ps.fd.forceJumpCharge )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
NEF4 $863
line 2005
;2005:	{
line 2006
;2006:		G_Sound( self, TRACK_CHANNEL_1, G_SoundIndex("sound/weapons/force/jumpbuild.wav") );
ADDRGP4 $865
ARGP4
ADDRLP4 12
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 51
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2007
;2007:	}
LABELV $863
line 2010
;2008:
;2009:	//Increment
;2010:	if (self->client->ps.fd.forceJumpAddTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $866
line 2011
;2011:	{
line 2012
;2012:		self->client->ps.fd.forceJumpCharge += forceJumpChargeInterval*50;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1112014848
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 2013
;2013:		self->client->ps.fd.forceJumpAddTime = level.time + 500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1092
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 2014
;2014:	}
LABELV $866
line 2017
;2015:
;2016:	//clamp to max strength for current level
;2017:	if ( self->client->ps.fd.forceJumpCharge > forceJumpStrength[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]] )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceJumpStrength
ADDP4
INDIRF4
LEF4 $870
line 2018
;2018:	{
line 2019
;2019:		self->client->ps.fd.forceJumpCharge = forceJumpStrength[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]];
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 1084
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceJumpStrength
ADDP4
INDIRF4
ASGNF4
line 2020
;2020:		G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 2021
;2021:	}
LABELV $870
line 2024
;2022:
;2023:	//clamp to max available force power
;2024:	if ( self->client->ps.fd.forceJumpCharge/forceJumpChargeInterval/(FORCE_JUMP_CHARGE_TIME/FRAMETIME)*forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]][FP_LEVITATION] > self->client->ps.fd.forcePower )
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
CNSTF4 1115684864
DIVF4
CNSTI4 72
ADDRLP4 16
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+4
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CVIF4 4
LEF4 $872
line 2025
;2025:	{//can't use more than you have
line 2026
;2026:		G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 2027
;2027:		self->client->ps.fd.forceJumpCharge = self->client->ps.fd.forcePower*forceJumpChargeInterval/(FORCE_JUMP_CHARGE_TIME/FRAMETIME);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 1084
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
MULF4
CNSTF4 1115684864
DIVF4
ASGNF4
line 2028
;2028:	}
LABELV $872
line 2031
;2029:	
;2030:	//G_Printf("%f\n", self->client->ps.fd.forceJumpCharge);
;2031:}
LABELV $850
endproc ForceJumpCharge 24 12
export WP_GetVelocityForForceJump
proc WP_GetVelocityForForceJump 64 16
line 2034
;2032:
;2033:int WP_GetVelocityForForceJump( gentity_t *self, vec3_t jumpVel, usercmd_t *ucmd )
;2034:{
line 2035
;2035:	float pushFwd = 0, pushRt = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 4
CNSTF4 0
ASGNF4
line 2037
;2036:	vec3_t	view, forward, right;
;2037:	VectorCopy( self->client->ps.viewangles, view );
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
INDIRB
ASGNB 12
line 2038
;2038:	view[0] = 0;
ADDRLP4 32
CNSTF4 0
ASGNF4
line 2039
;2039:	AngleVectors( view, forward, right, NULL );
ADDRLP4 32
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2040
;2040:	if ( ucmd->forwardmove && ucmd->rightmove )
ADDRLP4 44
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
ADDRLP4 48
INDIRI4
EQI4 $876
ADDRLP4 44
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ADDRLP4 48
INDIRI4
EQI4 $876
line 2041
;2041:	{
line 2042
;2042:		if ( ucmd->forwardmove > 0 )
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $878
line 2043
;2043:		{
line 2044
;2044:			pushFwd = 50;
ADDRLP4 0
CNSTF4 1112014848
ASGNF4
line 2045
;2045:		}
ADDRGP4 $879
JUMPV
LABELV $878
line 2047
;2046:		else
;2047:		{
line 2048
;2048:			pushFwd = -50;
ADDRLP4 0
CNSTF4 3259498496
ASGNF4
line 2049
;2049:		}
LABELV $879
line 2050
;2050:		if ( ucmd->rightmove > 0 )
ADDRFP4 8
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $880
line 2051
;2051:		{
line 2052
;2052:			pushRt = 50;
ADDRLP4 4
CNSTF4 1112014848
ASGNF4
line 2053
;2053:		}
ADDRGP4 $877
JUMPV
LABELV $880
line 2055
;2054:		else
;2055:		{
line 2056
;2056:			pushRt = -50;
ADDRLP4 4
CNSTF4 3259498496
ASGNF4
line 2057
;2057:		}
line 2058
;2058:	}
ADDRGP4 $877
JUMPV
LABELV $876
line 2059
;2059:	else if ( ucmd->forwardmove || ucmd->rightmove )
ADDRLP4 52
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRLP4 52
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
ADDRLP4 56
INDIRI4
NEI4 $884
ADDRLP4 52
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ADDRLP4 56
INDIRI4
EQI4 $882
LABELV $884
line 2060
;2060:	{
line 2061
;2061:		if ( ucmd->forwardmove > 0 )
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $885
line 2062
;2062:		{
line 2063
;2063:			pushFwd = 100;
ADDRLP4 0
CNSTF4 1120403456
ASGNF4
line 2064
;2064:		}
ADDRGP4 $886
JUMPV
LABELV $885
line 2065
;2065:		else if ( ucmd->forwardmove < 0 )
ADDRFP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $887
line 2066
;2066:		{
line 2067
;2067:			pushFwd = -100;
ADDRLP4 0
CNSTF4 3267887104
ASGNF4
line 2068
;2068:		}
ADDRGP4 $888
JUMPV
LABELV $887
line 2069
;2069:		else if ( ucmd->rightmove > 0 )
ADDRFP4 8
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $889
line 2070
;2070:		{
line 2071
;2071:			pushRt = 100;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 2072
;2072:		}
ADDRGP4 $890
JUMPV
LABELV $889
line 2073
;2073:		else if ( ucmd->rightmove < 0 )
ADDRFP4 8
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $891
line 2074
;2074:		{
line 2075
;2075:			pushRt = -100;
ADDRLP4 4
CNSTF4 3267887104
ASGNF4
line 2076
;2076:		}
LABELV $891
LABELV $890
LABELV $888
LABELV $886
line 2077
;2077:	}
LABELV $882
LABELV $877
line 2079
;2078:
;2079:	G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 2081
;2080:
;2081:	G_PreDefSound(self->client->ps.origin, PDSOUND_FORCEJUMP);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 2083
;2082:
;2083:	if (self->client->ps.fd.forceJumpCharge < JUMP_VELOCITY+40)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 1132756992
GEF4 $893
line 2084
;2084:	{ //give him at least a tiny boost from just a tap
line 2085
;2085:		self->client->ps.fd.forceJumpCharge = JUMP_VELOCITY+400;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 1142702080
ASGNF4
line 2086
;2086:	}
LABELV $893
line 2088
;2087:
;2088:	if (self->client->ps.velocity[2] < -30)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 3253731328
GEF4 $895
line 2089
;2089:	{ //so that we can get a good boost when force jumping in a fall
line 2090
;2090:		self->client->ps.velocity[2] = -30;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 3253731328
ASGNF4
line 2091
;2091:	}
LABELV $895
line 2093
;2092:
;2093:	VectorMA( self->client->ps.velocity, pushFwd, forward, jumpVel );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 8+4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 8+8
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 2094
;2094:	VectorMA( self->client->ps.velocity, pushRt, right, jumpVel );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 20+4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 20+8
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2095
;2095:	jumpVel[2] += self->client->ps.fd.forceJumpCharge;//forceJumpStrength;
ADDRLP4 60
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
ADDF4
ASGNF4
line 2096
;2096:	if ( pushFwd > 0 && self->client->ps.fd.forceJumpCharge > 200 )
ADDRLP4 0
INDIRF4
CNSTF4 0
LEF4 $901
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 1128792064
LEF4 $901
line 2097
;2097:	{
line 2098
;2098:		return FJ_FORWARD;
CNSTI4 0
RETI4
ADDRGP4 $875
JUMPV
LABELV $901
line 2100
;2099:	}
;2100:	else if ( pushFwd < 0 && self->client->ps.fd.forceJumpCharge > 200 )
ADDRLP4 0
INDIRF4
CNSTF4 0
GEF4 $903
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 1128792064
LEF4 $903
line 2101
;2101:	{
line 2102
;2102:		return FJ_BACKWARD;
CNSTI4 1
RETI4
ADDRGP4 $875
JUMPV
LABELV $903
line 2104
;2103:	}
;2104:	else if ( pushRt > 0 && self->client->ps.fd.forceJumpCharge > 200 )
ADDRLP4 4
INDIRF4
CNSTF4 0
LEF4 $905
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 1128792064
LEF4 $905
line 2105
;2105:	{
line 2106
;2106:		return FJ_RIGHT;
CNSTI4 2
RETI4
ADDRGP4 $875
JUMPV
LABELV $905
line 2108
;2107:	}
;2108:	else if ( pushRt < 0 && self->client->ps.fd.forceJumpCharge > 200 )
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $907
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 1128792064
LEF4 $907
line 2109
;2109:	{
line 2110
;2110:		return FJ_LEFT;
CNSTI4 3
RETI4
ADDRGP4 $875
JUMPV
LABELV $907
line 2113
;2111:	}
;2112:	else
;2113:	{//FIXME: jump straight up anim
line 2114
;2114:		return FJ_UP;
CNSTI4 4
RETI4
LABELV $875
endproc WP_GetVelocityForForceJump 64 16
export ForceJump
proc ForceJump 44 12
line 2119
;2115:	}
;2116:}
;2117:
;2118:void ForceJump( gentity_t *self, usercmd_t *ucmd )
;2119:{
line 2125
;2120:	float forceJumpChargeInterval;
;2121://	int anim;
;2122:	vec3_t	jumpVel;
;2123://	int	parts = SETANIM_BOTH;
;2124:
;2125:	if ( self->client->ps.fd.forcePowerDuration[FP_LEVITATION] > level.time )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 852
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $910
line 2126
;2126:	{
line 2127
;2127:		return;
ADDRGP4 $909
JUMPV
LABELV $910
line 2129
;2128:	}
;2129:	if ( !WP_ForcePowerUsable( self, FP_LEVITATION ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $913
line 2130
;2130:	{
line 2131
;2131:		return;
ADDRGP4 $909
JUMPV
LABELV $913
line 2133
;2132:	}
;2133:	if ( self->s.groundEntityNum == ENTITYNUM_NONE )
ADDRFP4 0
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $915
line 2134
;2134:	{
line 2135
;2135:		return;
ADDRGP4 $909
JUMPV
LABELV $915
line 2141
;2136:	}
;2137://	if ( self->client->ps.pm_flags&PMF_JUMP_HELD )
;2138://	{
;2139://		return;
;2140://	}
;2141:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $917
line 2142
;2142:	{
line 2143
;2143:		return;
ADDRGP4 $909
JUMPV
LABELV $917
line 2146
;2144:	}
;2145:
;2146:	self->client->fjDidJump = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1752
ADDP4
CNSTI4 1
ASGNI4
line 2148
;2147:
;2148:	forceJumpChargeInterval = forceJumpStrength[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]]/(FORCE_JUMP_CHARGE_TIME/FRAMETIME);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceJumpStrength
ADDP4
INDIRF4
CNSTF4 1115684864
DIVF4
ASGNF4
line 2150
;2149:
;2150:	switch( WP_GetVelocityForForceJump( self, jumpVel, ucmd ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 WP_GetVelocityForForceJump
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
LTI4 $920
ADDRLP4 20
INDIRI4
CNSTI4 4
GTI4 $920
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $927
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $927
address $920
address $920
address $920
address $920
address $920
code
line 2151
;2151:	{
line 2155
;2152:	case FJ_FORWARD:
;2153://		anim = BOTH_FLIP_F;
;2154:		//dmEvent = DM_FLIP;
;2155:		break;
line 2159
;2156:	case FJ_BACKWARD:
;2157://		anim = BOTH_FLIP_B;
;2158:		//dmEvent = DM_FLIP;
;2159:		break;
line 2163
;2160:	case FJ_RIGHT:
;2161://		anim = BOTH_FLIP_R;
;2162:		//dmEvent = DM_FLIP;
;2163:		break;
line 2167
;2164:	case FJ_LEFT:
;2165://		anim = BOTH_FLIP_L;
;2166:		//dmEvent = DM_FLIP;
;2167:		break;
line 2172
;2168:	default:
;2169:	case FJ_UP:
;2170://		anim = BOTH_JUMP1;
;2171:		//dmEvent = DM_JUMP;
;2172:		break;
LABELV $920
line 2175
;2173:	}
;2174:
;2175:	if ( self->client->ps.weaponTime )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
EQI4 $928
line 2176
;2176:	{//FIXME: really only care if we're in a saber attack anim.. maybe trail length?
line 2178
;2177://		parts = SETANIM_LEGS;
;2178:	}
LABELV $928
line 2181
;2179:
;2180:	//NPC_SetAnim( self, parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD );
;2181:	if ( !self->s.number )
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $930
line 2182
;2182:	{
line 2184
;2183:		//G_DynaMixEvent( dmEvent );
;2184:	}
LABELV $930
line 2187
;2185:
;2186:	//FIXME: sound effect
;2187:	self->client->ps.fd.forceJumpZStart = self->client->ps.origin[2];//remember this for when we land
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 1080
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 2188
;2188:	VectorCopy( jumpVel, self->client->ps.velocity );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2192
;2189:	//wasn't allowing them to attack when jumping, but that was annoying
;2190:	//self->client->ps.weaponTime = self->client->ps.torsoAnimTimer;
;2191:
;2192:	WP_ForcePowerStart( self, FP_LEVITATION, self->client->ps.fd.forceJumpCharge/forceJumpChargeInterval/(FORCE_JUMP_CHARGE_TIME/FRAMETIME)*forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_LEVITATION]][FP_LEVITATION] );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 40
ADDRLP4 36
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
DIVF4
CNSTF4 1115684864
DIVF4
CNSTI4 72
ADDRLP4 40
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+4
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2194
;2193:	//self->client->ps.fd.forcePowerDuration[FP_LEVITATION] = level.time + self->client->ps.weaponTime;
;2194:	self->client->ps.fd.forceJumpCharge = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 0
ASGNF4
line 2195
;2195:	self->client->ps.forceJumpFlip = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1232
ADDP4
CNSTI4 1
ASGNI4
line 2196
;2196:}
LABELV $909
endproc ForceJump 44 12
export WP_AddAsMindtricked
proc WP_AddAsMindtricked 4 0
line 2199
;2197:
;2198:void WP_AddAsMindtricked(forcedata_t *fd, int entNum)
;2199:{
line 2200
;2200:	if (!fd)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $934
line 2201
;2201:	{
line 2202
;2202:		return;
ADDRGP4 $933
JUMPV
LABELV $934
line 2205
;2203:	}
;2204:
;2205:	if (entNum > 47)
ADDRFP4 4
INDIRI4
CNSTI4 47
LEI4 $936
line 2206
;2206:	{
line 2207
;2207:		fd->forceMindtrickTargetIndex4 |= (1 << (entNum-48));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 48
SUBI4
LSHI4
BORI4
ASGNI4
line 2208
;2208:	}
ADDRGP4 $937
JUMPV
LABELV $936
line 2209
;2209:	else if (entNum > 31)
ADDRFP4 4
INDIRI4
CNSTI4 31
LEI4 $938
line 2210
;2210:	{
line 2211
;2211:		fd->forceMindtrickTargetIndex3 |= (1 << (entNum-32));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 392
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 32
SUBI4
LSHI4
BORI4
ASGNI4
line 2212
;2212:	}
ADDRGP4 $939
JUMPV
LABELV $938
line 2213
;2213:	else if (entNum > 15)
ADDRFP4 4
INDIRI4
CNSTI4 15
LEI4 $940
line 2214
;2214:	{
line 2215
;2215:		fd->forceMindtrickTargetIndex2 |= (1 << (entNum-16));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 388
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 16
SUBI4
LSHI4
BORI4
ASGNI4
line 2216
;2216:	}
ADDRGP4 $941
JUMPV
LABELV $940
line 2218
;2217:	else
;2218:	{
line 2219
;2219:		fd->forceMindtrickTargetIndex |= (1 << entNum);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 384
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 2220
;2220:	}
LABELV $941
LABELV $939
LABELV $937
line 2221
;2221:}
LABELV $933
endproc WP_AddAsMindtricked 4 0
export ForceTelepathy
proc ForceTelepathy 5388 28
line 2224
;2222:
;2223:void ForceTelepathy(gentity_t *self)
;2224:{
line 2236
;2225:	trace_t tr;
;2226:	vec3_t tfrom, tto, fwd, thispush_org, a;
;2227:	vec3_t mins, maxs, fwdangles, forward, right, center;
;2228:	int i, e;
;2229:	int entityList[MAX_GENTITIES];
;2230:	int numListedEntities;
;2231:	int gotatleastone;
;2232:	float visionArc;
;2233:	float radius;
;2234:	gentity_t *ent;
;2235:
;2236:	visionArc = 0;
ADDRLP4 5284
CNSTF4 0
ASGNF4
line 2238
;2237:
;2238:	radius = MAX_TRICK_DISTANCE;
ADDRLP4 12
CNSTF4 1140850688
ASGNF4
line 2240
;2239:
;2240:	gotatleastone = 0;
ADDRLP4 4164
CNSTI4 0
ASGNI4
line 2242
;2241:
;2242:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $943
line 2243
;2243:	{
line 2244
;2244:		return;
ADDRGP4 $942
JUMPV
LABELV $943
line 2247
;2245:	}
;2246:
;2247:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $945
line 2248
;2248:	{
line 2249
;2249:		return;
ADDRGP4 $942
JUMPV
LABELV $945
line 2252
;2250:	}
;2251:
;2252:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $947
line 2253
;2253:	{
line 2254
;2254:		return;
ADDRGP4 $942
JUMPV
LABELV $947
line 2257
;2255:	}
;2256:
;2257:	if (self->client->ps.powerups[PW_REDFLAG] ||
ADDRLP4 5336
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 5340
CNSTI4 0
ASGNI4
ADDRLP4 5336
INDIRP4
CNSTI4 360
ADDP4
INDIRI4
ADDRLP4 5340
INDIRI4
NEI4 $951
ADDRLP4 5336
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 5340
INDIRI4
EQI4 $949
LABELV $951
line 2259
;2258:		self->client->ps.powerups[PW_BLUEFLAG])
;2259:	{ //can't mindtrick while carrying the flag
line 2260
;2260:		return;
ADDRGP4 $942
JUMPV
LABELV $949
line 2263
;2261:	}
;2262:
;2263:	if (self->client->ps.forceAllowDeactivateTime < level.time &&
ADDRLP4 5344
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 5344
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $952
ADDRLP4 5344
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $952
line 2265
;2264:		(self->client->ps.fd.forcePowersActive & (1 << FP_TELEPATHY)) )
;2265:	{
line 2266
;2266:		WP_ForcePowerStop( self, FP_TELEPATHY );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 2267
;2267:		return;
ADDRGP4 $942
JUMPV
LABELV $952
line 2276
;2268:	}
;2269:
;2270:/*	if ( WP_ForcePowerInUse(self, FP_TELEPATHY))
;2271:	{
;2272:		WP_ForcePowerStop(self, FP_TELEPATHY);
;2273:		return;
;2274:	}*/
;2275:
;2276:	if ( !WP_ForcePowerUsable( self, FP_TELEPATHY ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 5348
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 5348
INDIRI4
CNSTI4 0
NEI4 $955
line 2277
;2277:	{
line 2278
;2278:		return;
ADDRGP4 $942
JUMPV
LABELV $955
line 2281
;2279:	}
;2280:
;2281:	if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 2
NEI4 $957
line 2282
;2282:	{
line 2283
;2283:		visionArc = 360;//180;
ADDRLP4 5284
CNSTF4 1135869952
ASGNF4
line 2284
;2284:	}
ADDRGP4 $958
JUMPV
LABELV $957
line 2285
;2285:	else if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 3
NEI4 $959
line 2286
;2286:	{
line 2287
;2287:		visionArc = 360;
ADDRLP4 5284
CNSTF4 1135869952
ASGNF4
line 2288
;2288:	}
LABELV $959
LABELV $958
line 2290
;2289:
;2290:	VectorCopy( self->client->ps.viewangles, fwdangles );
ADDRLP4 5300
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
INDIRB
ASGNB 12
line 2291
;2291:	AngleVectors( fwdangles, forward, right, NULL );
ADDRLP4 5300
ARGP4
ADDRLP4 5312
ARGP4
ADDRLP4 5324
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2292
;2292:	VectorCopy( self->client->ps.origin, center );
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2294
;2293:
;2294:	for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $961
line 2295
;2295:	{
line 2296
;2296:		mins[i] = center[i] - radius;
ADDRLP4 5352
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5352
INDIRI4
ADDRLP4 4128
ADDP4
ADDRLP4 5352
INDIRI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
line 2297
;2297:		maxs[i] = center[i] + radius;
ADDRLP4 5356
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 5356
INDIRI4
ADDRLP4 4140
ADDP4
ADDRLP4 5356
INDIRI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
line 2298
;2298:	}
LABELV $962
line 2294
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $961
line 2300
;2299:
;2300:	if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 1
NEI4 $965
line 2301
;2301:	{
line 2302
;2302:		VectorCopy(self->client->ps.origin, tfrom);
ADDRLP4 5272
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2303
;2303:		tfrom[2] += self->client->ps.viewheight;
ADDRLP4 5272+8
ADDRLP4 5272+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2304
;2304:		AngleVectors(self->client->ps.viewangles, fwd, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 5288
ARGP4
ADDRLP4 5352
CNSTP4 0
ASGNP4
ADDRLP4 5352
INDIRP4
ARGP4
ADDRLP4 5352
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2305
;2305:		tto[0] = tfrom[0] + fwd[0]*radius/2;
ADDRLP4 4152
ADDRLP4 5272
INDIRF4
ADDRLP4 5288
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2306
;2306:		tto[1] = tfrom[1] + fwd[1]*radius/2;
ADDRLP4 4152+4
ADDRLP4 5272+4
INDIRF4
ADDRLP4 5288+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2307
;2307:		tto[2] = tfrom[2] + fwd[2]*radius/2;
ADDRLP4 4152+8
ADDRLP4 5272+8
INDIRF4
ADDRLP4 5288+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2309
;2308:
;2309:		trap_Trace(&tr, tfrom, NULL, NULL, tto, self->s.number, MASK_PLAYERSOLID);
ADDRLP4 4192
ARGP4
ADDRLP4 5272
ARGP4
ADDRLP4 5356
CNSTP4 0
ASGNP4
ADDRLP4 5356
INDIRP4
ARGP4
ADDRLP4 5356
INDIRP4
ARGP4
ADDRLP4 4152
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 2311
;2310:
;2311:		if (tr.fraction != 1.0 &&
ADDRLP4 4192+8
INDIRF4
CNSTF4 1065353216
EQF4 $942
ADDRLP4 4192+52
INDIRI4
CNSTI4 1023
EQI4 $942
ADDRLP4 5360
CNSTI4 828
ASGNI4
ADDRLP4 5364
CNSTI4 0
ASGNI4
ADDRLP4 5360
INDIRI4
ADDRLP4 4192+52
INDIRI4
MULI4
ADDRGP4 g_entities+412
ADDP4
INDIRI4
ADDRLP4 5364
INDIRI4
EQI4 $942
ADDRLP4 5360
INDIRI4
ADDRLP4 4192+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $942
ADDRLP4 5360
INDIRI4
ADDRLP4 4192+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1368
ADDP4
INDIRI4
ADDRLP4 5364
INDIRI4
EQI4 $942
ADDRLP4 5360
INDIRI4
ADDRLP4 4192+52
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 3
EQI4 $942
line 2317
;2312:			tr.entityNum != ENTITYNUM_NONE &&
;2313:			g_entities[tr.entityNum].inuse &&
;2314:			g_entities[tr.entityNum].client &&
;2315:			g_entities[tr.entityNum].client->pers.connected &&
;2316:			g_entities[tr.entityNum].client->sess.sessionTeam != TEAM_SPECTATOR)
;2317:		{
line 2318
;2318:			WP_AddAsMindtricked(&self->client->ps.fd, tr.entityNum);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 4192+52
INDIRI4
ARGI4
ADDRGP4 WP_AddAsMindtricked
CALLV
pop
line 2320
;2319:			//self->client->ps.fd.forceMindtrickTargetIndex |= (1 << tr.entityNum);
;2320:			WP_ForcePowerStart( self, FP_TELEPATHY, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2322
;2321:
;2322:			G_Sound( self, CHAN_AUTO, G_SoundIndex("sound/weapons/force/distract.wav") );
ADDRGP4 $987
ARGP4
ADDRLP4 5368
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 5368
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2324
;2323:
;2324:			self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 1
ASGNI4
line 2325
;2325:			self->client->ps.forceHandExtendTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2327
;2326:
;2327:			return;
ADDRGP4 $942
JUMPV
line 2330
;2328:		}
;2329:		else
;2330:		{
line 2332
;2331:			//self->client->ps.fd.forceMindtrickTargetIndex = ENTITYNUM_NONE;
;2332:			return;
LABELV $965
line 2335
;2333:		}
;2334:	}
;2335:	else if (self->client->ps.fd.forcePowerLevel[FP_TELEPATHY] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 952
ADDP4
INDIRI4
CNSTI4 3
NEI4 $989
line 2336
;2336:	{ //Level 3 tricks everyone on the level..
line 2338
;2337:		gentity_t *ent;
;2338:		qboolean gotAtLeastOne = qfalse;
ADDRLP4 5356
CNSTI4 0
ASGNI4
line 2340
;2339:
;2340:		e = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $992
JUMPV
LABELV $991
line 2343
;2341:
;2342:		while (e < MAX_CLIENTS)
;2343:		{
line 2344
;2344:			ent = &g_entities[e];
ADDRLP4 5352
CNSTI4 828
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 2345
;2345:			e++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2347
;2346:
;2347:			if (ent && ent->inuse && ent->client)
ADDRLP4 5364
CNSTU4 0
ASGNU4
ADDRLP4 5352
INDIRP4
CVPU4 4
ADDRLP4 5364
INDIRU4
EQU4 $994
ADDRLP4 5352
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $994
ADDRLP4 5352
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 5364
INDIRU4
EQU4 $994
line 2348
;2348:			{
line 2349
;2349:				if (!ForcePowerUsableOn(self, ent, FP_TELEPATHY))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 5352
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 5368
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 5368
INDIRI4
CNSTI4 0
NEI4 $996
line 2350
;2350:				{
line 2351
;2351:					continue;
ADDRGP4 $992
JUMPV
LABELV $996
line 2354
;2352:				}
;2353:				
;2354:				if (OnSameTeam(self, ent))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 5352
INDIRP4
ARGP4
ADDRLP4 5372
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 5372
INDIRI4
CNSTI4 0
EQI4 $998
line 2355
;2355:				{
line 2356
;2356:					continue;
ADDRGP4 $992
JUMPV
LABELV $998
line 2359
;2357:				}
;2358:
;2359:				if (self == ent)
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRLP4 5352
INDIRP4
CVPU4 4
NEU4 $1000
line 2360
;2360:				{
line 2361
;2361:					continue;
ADDRGP4 $992
JUMPV
LABELV $1000
line 2364
;2362:				}
;2363:
;2364:				if (self->s.number == ent->s.number)
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 5352
INDIRP4
INDIRI4
NEI4 $1002
line 2365
;2365:				{
line 2366
;2366:					continue;
ADDRGP4 $992
JUMPV
LABELV $1002
line 2369
;2367:				}
;2368:
;2369:				if (!ent->client->pers.connected)
ADDRLP4 5352
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1368
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1004
line 2370
;2370:				{
line 2371
;2371:					continue;
ADDRGP4 $992
JUMPV
LABELV $1004
line 2374
;2372:				}
;2373:
;2374:				if (ent->client->sess.sessionTeam == TEAM_SPECTATOR)
ADDRLP4 5352
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1006
line 2375
;2375:				{
line 2376
;2376:					continue;
ADDRGP4 $992
JUMPV
LABELV $1006
line 2379
;2377:				}
;2378:
;2379:				if (!trap_InPVS(self->client->ps.origin, ent->client->ps.origin))
ADDRLP4 5376
CNSTI4 408
ASGNI4
ADDRLP4 5380
CNSTI4 20
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 5376
INDIRI4
ADDP4
INDIRP4
ADDRLP4 5380
INDIRI4
ADDP4
ARGP4
ADDRLP4 5352
INDIRP4
ADDRLP4 5376
INDIRI4
ADDP4
INDIRP4
ADDRLP4 5380
INDIRI4
ADDP4
ARGP4
ADDRLP4 5384
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 5384
INDIRI4
CNSTI4 0
NEI4 $1008
line 2380
;2380:				{
line 2381
;2381:					continue;
ADDRGP4 $992
JUMPV
LABELV $1008
line 2384
;2382:				}
;2383:
;2384:				WP_AddAsMindtricked(&self->client->ps.fd, ent->s.number);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 5352
INDIRP4
INDIRI4
ARGI4
ADDRGP4 WP_AddAsMindtricked
CALLV
pop
line 2385
;2385:				gotAtLeastOne = qtrue;
ADDRLP4 5356
CNSTI4 1
ASGNI4
line 2386
;2386:			}
LABELV $994
line 2387
;2387:		}
LABELV $992
line 2342
ADDRLP4 8
INDIRI4
CNSTI4 32
LTI4 $991
line 2389
;2388:
;2389:		if (gotAtLeastOne)
ADDRLP4 5356
INDIRI4
CNSTI4 0
EQI4 $942
line 2390
;2390:		{
line 2391
;2391:			self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 2393
;2392:
;2393:			WP_ForcePowerStart( self, FP_TELEPATHY, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2395
;2394:
;2395:			G_Sound( self, CHAN_AUTO, G_SoundIndex("sound/weapons/force/distract.wav") );
ADDRGP4 $987
ARGP4
ADDRLP4 5360
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 5360
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2397
;2396:
;2397:			self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 1
ASGNI4
line 2398
;2398:			self->client->ps.forceHandExtendTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2399
;2399:		}
line 2401
;2400:
;2401:		return;
ADDRGP4 $942
JUMPV
LABELV $989
line 2404
;2402:	}
;2403:	else
;2404:	{
line 2405
;2405:		numListedEntities = trap_EntitiesInBox( mins, maxs, entityList, MAX_GENTITIES );
ADDRLP4 4128
ARGP4
ADDRLP4 4140
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 5352
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 4124
ADDRLP4 5352
INDIRI4
ASGNI4
line 2407
;2406:
;2407:		e = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $1015
JUMPV
LABELV $1014
line 2410
;2408:
;2409:		while (e < numListedEntities)
;2410:		{
line 2411
;2411:			ent = &g_entities[entityList[e]];
ADDRLP4 4
CNSTI4 828
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 2413
;2412:
;2413:			if (ent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1017
line 2414
;2414:			{
line 2415
;2415:				if (ent->client)
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1019
line 2416
;2416:				{
line 2417
;2417:					VectorCopy(ent->client->ps.origin, thispush_org);
ADDRLP4 4180
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2418
;2418:				}
ADDRGP4 $1020
JUMPV
LABELV $1019
line 2420
;2419:				else
;2420:				{
line 2421
;2421:					VectorCopy(ent->s.pos.trBase, thispush_org);
ADDRLP4 4180
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2422
;2422:				}
LABELV $1020
line 2423
;2423:			}
LABELV $1017
line 2425
;2424:
;2425:			if (ent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1021
line 2426
;2426:			{ //not in the arc, don't consider it
line 2427
;2427:				VectorCopy(self->client->ps.origin, tto);
ADDRLP4 4152
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2428
;2428:				tto[2] += self->client->ps.viewheight;
ADDRLP4 4152+8
ADDRLP4 4152+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2429
;2429:				VectorSubtract(thispush_org, tto, a);
ADDRLP4 4168
ADDRLP4 4180
INDIRF4
ADDRLP4 4152
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4168+4
ADDRLP4 4180+4
INDIRF4
ADDRLP4 4152+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4168+8
ADDRLP4 4180+8
INDIRF4
ADDRLP4 4152+8
INDIRF4
SUBF4
ASGNF4
line 2430
;2430:				vectoangles(a, a);
ADDRLP4 4168
ARGP4
ADDRLP4 4168
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2432
;2431:
;2432:				if (!ent->client)
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1030
line 2433
;2433:				{
line 2434
;2434:					entityList[e] = ENTITYNUM_NONE;
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
CNSTI4 1023
ASGNI4
line 2435
;2435:				}
ADDRGP4 $1031
JUMPV
LABELV $1030
line 2436
;2436:				else if (!InFieldOfVision(self->client->ps.viewangles, visionArc, a))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 5284
INDIRF4
ARGF4
ADDRLP4 4168
ARGP4
ADDRLP4 5356
ADDRGP4 InFieldOfVision
CALLI4
ASGNI4
ADDRLP4 5356
INDIRI4
CNSTI4 0
NEI4 $1032
line 2437
;2437:				{ //only bother with arc rules if the victim is a client
line 2438
;2438:					entityList[e] = ENTITYNUM_NONE;
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
CNSTI4 1023
ASGNI4
line 2439
;2439:				}
ADDRGP4 $1033
JUMPV
LABELV $1032
line 2440
;2440:				else if (!ForcePowerUsableOn(self, ent, FP_TELEPATHY))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 5360
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 5360
INDIRI4
CNSTI4 0
NEI4 $1034
line 2441
;2441:				{
line 2442
;2442:					entityList[e] = ENTITYNUM_NONE;
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
CNSTI4 1023
ASGNI4
line 2443
;2443:				}
ADDRGP4 $1035
JUMPV
LABELV $1034
line 2444
;2444:				else if (OnSameTeam(self, ent))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 5364
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 5364
INDIRI4
CNSTI4 0
EQI4 $1036
line 2445
;2445:				{
line 2446
;2446:					entityList[e] = ENTITYNUM_NONE;
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
CNSTI4 1023
ASGNI4
line 2447
;2447:				}
LABELV $1036
LABELV $1035
LABELV $1033
LABELV $1031
line 2448
;2448:			}
LABELV $1021
line 2449
;2449:			e++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2450
;2450:		}
LABELV $1015
line 2409
ADDRLP4 8
INDIRI4
ADDRLP4 4124
INDIRI4
LTI4 $1014
line 2451
;2451:	}
line 2453
;2452:
;2453:	e = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $1039
JUMPV
LABELV $1038
line 2456
;2454:
;2455:	while (e < numListedEntities)
;2456:	{
line 2457
;2457:		ent = &g_entities[entityList[e]];
ADDRLP4 4
CNSTI4 828
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 2459
;2458:
;2459:		if (ent && ent != self && ent->client)
ADDRLP4 5356
ADDRLP4 4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 5360
CNSTU4 0
ASGNU4
ADDRLP4 5356
INDIRU4
ADDRLP4 5360
INDIRU4
EQU4 $1041
ADDRLP4 5356
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $1041
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 5360
INDIRU4
EQU4 $1041
line 2460
;2460:		{
line 2461
;2461:			gotatleastone = 1;
ADDRLP4 4164
CNSTI4 1
ASGNI4
line 2462
;2462:			WP_AddAsMindtricked(&self->client->ps.fd, ent->s.number);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
INDIRI4
ARGI4
ADDRGP4 WP_AddAsMindtricked
CALLV
pop
line 2464
;2463:			//self->client->ps.fd.forceMindtrickTargetIndex |= (1 << ent->s.number);
;2464:		}
LABELV $1041
line 2466
;2465:
;2466:		e++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2467
;2467:	}
LABELV $1039
line 2455
ADDRLP4 8
INDIRI4
ADDRLP4 4124
INDIRI4
LTI4 $1038
line 2469
;2468:
;2469:	if (gotatleastone)
ADDRLP4 4164
INDIRI4
CNSTI4 0
EQI4 $1043
line 2470
;2470:	{
line 2471
;2471:		self->client->ps.forceAllowDeactivateTime = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 2473
;2472:
;2473:		WP_ForcePowerStart( self, FP_TELEPATHY, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2475
;2474:
;2475:		G_Sound( self, CHAN_AUTO, G_SoundIndex("sound/weapons/force/distract.wav") );
ADDRGP4 $987
ARGP4
ADDRLP4 5352
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 5352
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2477
;2476:
;2477:		self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 1
ASGNI4
line 2478
;2478:		self->client->ps.forceHandExtendTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2479
;2479:	}
LABELV $1043
line 2480
;2480:}
LABELV $942
endproc ForceTelepathy 5388 28
export GEntity_UseFunc
proc GEntity_UseFunc 4 12
line 2483
;2481:
;2482:void GEntity_UseFunc( gentity_t *self, gentity_t *other, gentity_t *activator )
;2483:{
line 2484
;2484:	self->use(self, other, activator);
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 652
ADDP4
INDIRP4
CALLV
pop
line 2485
;2485:}
LABELV $1047
endproc GEntity_UseFunc 4 12
export CanCounterThrow
proc CanCounterThrow 8 8
line 2488
;2486:
;2487:qboolean CanCounterThrow(gentity_t *self, qboolean pull)
;2488:{
line 2489
;2489:	int powerUse = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2491
;2490:
;2491:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1049
line 2492
;2492:	{
line 2493
;2493:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1049
line 2496
;2494:	}
;2495:
;2496:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1051
line 2497
;2497:	{
line 2498
;2498:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1051
line 2501
;2499:	}
;2500:
;2501:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1053
line 2502
;2502:	{
line 2503
;2503:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1053
line 2505
;2504:	}
;2505:	if ( self->client->ps.powerups[PW_DISINT_4] > level.time )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 380
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $1055
line 2506
;2506:	{
line 2507
;2507:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1055
line 2509
;2508:	}
;2509:	if (pull)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1058
line 2510
;2510:	{
line 2511
;2511:		powerUse = FP_PULL;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 2512
;2512:	}
ADDRGP4 $1059
JUMPV
LABELV $1058
line 2514
;2513:	else
;2514:	{
line 2515
;2515:		powerUse = FP_PUSH;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 2516
;2516:	}
LABELV $1059
line 2518
;2517:
;2518:	if ( !WP_ForcePowerUsable( self, powerUse ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1060
line 2519
;2519:	{
line 2520
;2520:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1060
line 2523
;2521:	}
;2522:
;2523:	if (self->client->ps.groundEntityNum == ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $1062
line 2524
;2524:	{ //you cannot counter a push/pull if you're in the air
line 2525
;2525:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1048
JUMPV
LABELV $1062
line 2528
;2526:	}
;2527:
;2528:	return 1;
CNSTI4 1
RETI4
LABELV $1048
endproc CanCounterThrow 8 8
lit
align 4
LABELV $1065
byte 4 0
skip 8
export ForceThrow
code
proc ForceThrow 9672 28
line 2532
;2529:}
;2530:
;2531:void ForceThrow( gentity_t *self, qboolean pull )
;2532:{
line 2542
;2533:	//shove things in front of you away
;2534:	float		dist;
;2535:	gentity_t	*ent;
;2536:	int			entityList[MAX_GENTITIES];
;2537:	gentity_t	*push_list[MAX_GENTITIES];
;2538:	int			numListedEntities;
;2539:	vec3_t		mins, maxs;
;2540:	vec3_t		v;
;2541:	int			i, e;
;2542:	int			ent_count = 0;
ADDRLP4 9364
CNSTI4 0
ASGNI4
line 2543
;2543:	int			radius = 1024; //since it's view-based now. //350;
ADDRLP4 9360
CNSTI4 1024
ASGNI4
line 2548
;2544:	int			powerLevel;
;2545:	int			visionArc;
;2546:	int			pushPower;
;2547:	int			pushPowerMod;
;2548:	vec3_t		center, ent_org, size, forward, right, end, dir, fwdangles = {0};
ADDRLP4 9476
ADDRGP4 $1065
INDIRB
ASGNB 12
line 2555
;2549:	float		dot1;
;2550:	trace_t		tr;
;2551:	int			x;
;2552:	vec3_t		pushDir;
;2553:	vec3_t		thispush_org;
;2554:	vec3_t		tfrom, tto, fwd, a;
;2555:	float		knockback = pull?0:200;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1067
ADDRLP4 9536
CNSTI4 0
ASGNI4
ADDRGP4 $1068
JUMPV
LABELV $1067
ADDRLP4 9536
CNSTI4 200
ASGNI4
LABELV $1068
ADDRLP4 9472
ADDRLP4 9536
INDIRI4
CVIF4 4
ASGNF4
line 2556
;2556:	int			powerUse = 0;
ADDRLP4 9396
CNSTI4 0
ASGNI4
line 2558
;2557:
;2558:	visionArc = 0;
ADDRLP4 9468
CNSTI4 0
ASGNI4
line 2560
;2559:
;2560:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1069
line 2561
;2561:	{
line 2562
;2562:		return;
ADDRGP4 $1064
JUMPV
LABELV $1069
line 2565
;2563:	}
;2564:
;2565:	if (self->client->ps.weaponTime > 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1071
line 2566
;2566:	{
line 2567
;2567:		return;
ADDRGP4 $1064
JUMPV
LABELV $1071
line 2570
;2568:	}
;2569:
;2570:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1073
line 2571
;2571:	{
line 2572
;2572:		return;
ADDRGP4 $1064
JUMPV
LABELV $1073
line 2574
;2573:	}
;2574:	if ( self->client->ps.powerups[PW_DISINT_4] > level.time )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 380
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $1075
line 2575
;2575:	{
line 2576
;2576:		return;
ADDRGP4 $1064
JUMPV
LABELV $1075
line 2578
;2577:	}
;2578:	if (pull)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1078
line 2579
;2579:	{
line 2580
;2580:		powerUse = FP_PULL;
ADDRLP4 9396
CNSTI4 4
ASGNI4
line 2581
;2581:	}
ADDRGP4 $1079
JUMPV
LABELV $1078
line 2583
;2582:	else
;2583:	{
line 2584
;2584:		powerUse = FP_PUSH;
ADDRLP4 9396
CNSTI4 3
ASGNI4
line 2585
;2585:	}
LABELV $1079
line 2587
;2586:
;2587:	if ( !WP_ForcePowerUsable( self, powerUse ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 9396
INDIRI4
ARGI4
ADDRLP4 9540
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 9540
INDIRI4
CNSTI4 0
NEI4 $1080
line 2588
;2588:	{
line 2589
;2589:		return;
ADDRGP4 $1064
JUMPV
LABELV $1080
line 2592
;2590:	}
;2591:
;2592:	if (!pull && self->client->ps.saberLockTime > level.time && self->client->ps.saberLockFrame)
ADDRLP4 9544
CNSTI4 0
ASGNI4
ADDRFP4 4
INDIRI4
ADDRLP4 9544
INDIRI4
NEI4 $1082
ADDRLP4 9548
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9548
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $1082
ADDRLP4 9548
INDIRP4
CNSTI4 532
ADDP4
INDIRI4
ADDRLP4 9544
INDIRI4
EQI4 $1082
line 2593
;2593:	{
line 2594
;2594:		G_Sound( self, CHAN_BODY, G_SoundIndex( "sound/weapons/force/push.wav" ) );
ADDRGP4 $1085
ARGP4
ADDRLP4 9552
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 9552
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2597
;2595:		//self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
;2596:		//self->client->ps.forceHandExtendTime = level.time + 1000;
;2597:		self->client->ps.powerups[PW_DISINT_4] = level.time + 1500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 380
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 2599
;2598:
;2599:		self->client->ps.saberLockHits += self->client->ps.fd.forcePowerLevel[FP_PUSH]*2;
ADDRLP4 9556
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9560
ADDRLP4 9556
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 9560
INDIRP4
ADDRLP4 9560
INDIRP4
INDIRI4
ADDRLP4 9556
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ADDI4
ASGNI4
line 2601
;2600:
;2601:		WP_ForcePowerStart( self, FP_PUSH, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2602
;2602:		return;
ADDRGP4 $1064
JUMPV
LABELV $1082
line 2605
;2603:	}
;2604:
;2605:	WP_ForcePowerStart( self, powerUse, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 9396
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 2608
;2606:
;2607:	//make sure this plays and that you cannot press fire for about 1 second after this
;2608:	if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1087
line 2609
;2609:	{
line 2610
;2610:		G_Sound( self, CHAN_BODY, G_SoundIndex( "sound/weapons/force/pull.wav" ) );
ADDRGP4 $1089
ARGP4
ADDRLP4 9552
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 9552
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2611
;2611:		self->client->ps.forceHandExtend = HANDEXTEND_FORCEPULL;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 2
ASGNI4
line 2612
;2612:		self->client->ps.forceHandExtendTime = level.time + 400;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
line 2613
;2613:	}
ADDRGP4 $1088
JUMPV
LABELV $1087
line 2615
;2614:	else
;2615:	{
line 2616
;2616:		G_Sound( self, CHAN_BODY, G_SoundIndex( "sound/weapons/force/push.wav" ) );
ADDRGP4 $1085
ARGP4
ADDRLP4 9552
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 9552
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2617
;2617:		self->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 1
ASGNI4
line 2618
;2618:		self->client->ps.forceHandExtendTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2619
;2619:	}
LABELV $1088
line 2620
;2620:	self->client->ps.powerups[PW_DISINT_4] = self->client->ps.forceHandExtendTime + 200;
ADDRLP4 9552
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9552
INDIRP4
CNSTI4 380
ADDP4
ADDRLP4 9552
INDIRP4
CNSTI4 1240
ADDP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 2622
;2621:
;2622:	VectorCopy( self->client->ps.viewangles, fwdangles );
ADDRLP4 9476
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
INDIRB
ASGNB 12
line 2623
;2623:	AngleVectors( fwdangles, forward, right, NULL );
ADDRLP4 9476
ARGP4
ADDRLP4 9348
ARGP4
ADDRLP4 9524
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2624
;2624:	VectorCopy( self->client->ps.origin, center );
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2626
;2625:
;2626:	for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1092
line 2627
;2627:	{
line 2628
;2628:		mins[i] = center[i] - radius;
ADDRLP4 9556
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9556
INDIRI4
ADDRLP4 9436
ADDP4
ADDRLP4 9556
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
SUBF4
ASGNF4
line 2629
;2629:		maxs[i] = center[i] + radius;
ADDRLP4 9560
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9560
INDIRI4
ADDRLP4 9448
ADDP4
ADDRLP4 9560
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2630
;2630:	}
LABELV $1093
line 2626
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1092
line 2633
;2631:
;2632:
;2633:	if (pull)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1096
line 2634
;2634:	{
line 2635
;2635:		powerLevel = self->client->ps.fd.forcePowerLevel[FP_PULL];
ADDRLP4 9428
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 948
ADDP4
INDIRI4
ASGNI4
line 2636
;2636:		pushPower = 256*self->client->ps.fd.forcePowerLevel[FP_PULL];
ADDRLP4 9464
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 948
ADDP4
INDIRI4
CNSTI4 8
LSHI4
ASGNI4
line 2637
;2637:	}
ADDRGP4 $1097
JUMPV
LABELV $1096
line 2639
;2638:	else
;2639:	{
line 2640
;2640:		powerLevel = self->client->ps.fd.forcePowerLevel[FP_PUSH];
ADDRLP4 9428
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 2641
;2641:		pushPower = 256*self->client->ps.fd.forcePowerLevel[FP_PUSH];
ADDRLP4 9464
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 8
LSHI4
ASGNI4
line 2642
;2642:	}
LABELV $1097
line 2644
;2643:
;2644:	if (!powerLevel)
ADDRLP4 9428
INDIRI4
CNSTI4 0
NEI4 $1098
line 2645
;2645:	{ //Shouldn't have made it here..
line 2646
;2646:		return;
ADDRGP4 $1064
JUMPV
LABELV $1098
line 2649
;2647:	}
;2648:
;2649:	if (powerLevel == FORCE_LEVEL_2)
ADDRLP4 9428
INDIRI4
CNSTI4 2
NEI4 $1100
line 2650
;2650:	{
line 2651
;2651:		visionArc = 60;
ADDRLP4 9468
CNSTI4 60
ASGNI4
line 2652
;2652:	}
ADDRGP4 $1101
JUMPV
LABELV $1100
line 2653
;2653:	else if (powerLevel == FORCE_LEVEL_3)
ADDRLP4 9428
INDIRI4
CNSTI4 3
NEI4 $1102
line 2654
;2654:	{
line 2655
;2655:		visionArc = 180;
ADDRLP4 9468
CNSTI4 180
ASGNI4
line 2656
;2656:	}
LABELV $1102
LABELV $1101
line 2658
;2657:
;2658:	if (powerLevel == FORCE_LEVEL_1)
ADDRLP4 9428
INDIRI4
CNSTI4 1
NEI4 $1104
line 2659
;2659:	{ //can only push/pull targeted things at level 1
line 2660
;2660:		VectorCopy(self->client->ps.origin, tfrom);
ADDRLP4 9488
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2661
;2661:		tfrom[2] += self->client->ps.viewheight;
ADDRLP4 9488+8
ADDRLP4 9488+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2662
;2662:		AngleVectors(self->client->ps.viewangles, fwd, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 9512
ARGP4
ADDRLP4 9556
CNSTP4 0
ASGNP4
ADDRLP4 9556
INDIRP4
ARGP4
ADDRLP4 9556
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2663
;2663:		tto[0] = tfrom[0] + fwd[0]*radius/2;
ADDRLP4 9416
ADDRLP4 9488
INDIRF4
ADDRLP4 9512
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2664
;2664:		tto[1] = tfrom[1] + fwd[1]*radius/2;
ADDRLP4 9416+4
ADDRLP4 9488+4
INDIRF4
ADDRLP4 9512+4
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2665
;2665:		tto[2] = tfrom[2] + fwd[2]*radius/2;
ADDRLP4 9416+8
ADDRLP4 9488+8
INDIRF4
ADDRLP4 9512+8
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
ASGNF4
line 2667
;2666:
;2667:		trap_Trace(&tr, tfrom, NULL, NULL, tto, self->s.number, MASK_PLAYERSOLID);
ADDRLP4 8268
ARGP4
ADDRLP4 9488
ARGP4
ADDRLP4 9560
CNSTP4 0
ASGNP4
ADDRLP4 9560
INDIRP4
ARGP4
ADDRLP4 9560
INDIRP4
ARGP4
ADDRLP4 9416
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 2669
;2668:
;2669:		if (tr.fraction != 1.0 &&
ADDRLP4 8268+8
INDIRF4
CNSTF4 1065353216
EQF4 $1064
ADDRLP4 8268+52
INDIRI4
CNSTI4 1023
EQI4 $1064
line 2671
;2670:			tr.entityNum != ENTITYNUM_NONE)
;2671:		{
line 2672
;2672:			numListedEntities = 0;
ADDRLP4 9400
CNSTI4 0
ASGNI4
line 2673
;2673:			entityList[numListedEntities] = tr.entityNum;
ADDRLP4 9400
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
ADDRLP4 8268+52
INDIRI4
ASGNI4
line 2674
;2674:			numListedEntities++;
ADDRLP4 9400
ADDRLP4 9400
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2675
;2675:		}
line 2677
;2676:		else
;2677:		{
line 2679
;2678:			//didn't get anything, so just
;2679:			return;
line 2681
;2680:		}
;2681:	}
ADDRGP4 $1105
JUMPV
LABELV $1104
line 2683
;2682:	else
;2683:	{
line 2684
;2684:		numListedEntities = trap_EntitiesInBox( mins, maxs, entityList, MAX_GENTITIES );
ADDRLP4 9436
ARGP4
ADDRLP4 9448
ARGP4
ADDRLP4 4172
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 9556
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 9400
ADDRLP4 9556
INDIRI4
ASGNI4
line 2686
;2685:
;2686:		e = 0;
ADDRLP4 4144
CNSTI4 0
ASGNI4
ADDRGP4 $1119
JUMPV
LABELV $1118
line 2689
;2687:
;2688:		while (e < numListedEntities)
;2689:		{
line 2690
;2690:			ent = &g_entities[entityList[e]];
ADDRLP4 4
CNSTI4 828
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 2692
;2691:
;2692:			if (ent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1121
line 2693
;2693:			{
line 2694
;2694:				if (ent->client)
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1123
line 2695
;2695:				{
line 2696
;2696:					VectorCopy(ent->client->ps.origin, thispush_org);
ADDRLP4 9368
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2697
;2697:				}
ADDRGP4 $1124
JUMPV
LABELV $1123
line 2699
;2698:				else
;2699:				{
line 2700
;2700:					VectorCopy(ent->s.pos.trBase, thispush_org);
ADDRLP4 9368
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2701
;2701:				}
LABELV $1124
line 2702
;2702:			}
LABELV $1121
line 2705
;2703:
;2704:			//if (ent && !InFront(thispush_org, self->client->ps.origin, self->client->ps.viewangles, visionArc))
;2705:			if (ent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1125
line 2706
;2706:			{ //not in the arc, don't consider it
line 2707
;2707:				VectorCopy(self->client->ps.origin, tto);
ADDRLP4 9416
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2708
;2708:				tto[2] += self->client->ps.viewheight;
ADDRLP4 9416+8
ADDRLP4 9416+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2709
;2709:				VectorSubtract(thispush_org, tto, a);
ADDRLP4 9404
ADDRLP4 9368
INDIRF4
ADDRLP4 9416
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9404+4
ADDRLP4 9368+4
INDIRF4
ADDRLP4 9416+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9404+8
ADDRLP4 9368+8
INDIRF4
ADDRLP4 9416+8
INDIRF4
SUBF4
ASGNF4
line 2710
;2710:				vectoangles(a, a);
ADDRLP4 9404
ARGP4
ADDRLP4 9404
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 2712
;2711:
;2712:				if (ent->client && !InFieldOfVision(self->client->ps.viewangles, visionArc, a) &&
ADDRLP4 9560
CNSTI4 408
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 9560
INDIRI4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1134
ADDRFP4 0
INDIRP4
ADDRLP4 9560
INDIRI4
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 9468
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 9404
ARGP4
ADDRLP4 9564
ADDRGP4 InFieldOfVision
CALLI4
ASGNI4
ADDRLP4 9564
INDIRI4
CNSTI4 0
NEI4 $1134
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 9396
INDIRI4
ARGI4
ADDRLP4 9568
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 9568
INDIRI4
CNSTI4 0
EQI4 $1134
line 2714
;2713:					ForcePowerUsableOn(self, ent, powerUse))
;2714:				{ //only bother with arc rules if the victim is a client
line 2715
;2715:					entityList[e] = ENTITYNUM_NONE;
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
CNSTI4 1023
ASGNI4
line 2716
;2716:				}
ADDRGP4 $1135
JUMPV
LABELV $1134
line 2717
;2717:				else if (ent->client)
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1136
line 2718
;2718:				{
line 2719
;2719:					if (pull)
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1138
line 2720
;2720:					{
line 2721
;2721:						if (!ForcePowerUsableOn(self, ent, FP_PULL))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRLP4 9572
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 9572
INDIRI4
CNSTI4 0
NEI4 $1139
line 2722
;2722:						{
line 2723
;2723:							entityList[e] = ENTITYNUM_NONE;
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
CNSTI4 1023
ASGNI4
line 2724
;2724:						}
line 2725
;2725:					}
ADDRGP4 $1139
JUMPV
LABELV $1138
line 2727
;2726:					else
;2727:					{
line 2728
;2728:						if (!ForcePowerUsableOn(self, ent, FP_PUSH))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 9572
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 9572
INDIRI4
CNSTI4 0
NEI4 $1142
line 2729
;2729:						{
line 2730
;2730:							entityList[e] = ENTITYNUM_NONE;
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
CNSTI4 1023
ASGNI4
line 2731
;2731:						}
LABELV $1142
line 2732
;2732:					}
LABELV $1139
line 2733
;2733:				}
LABELV $1136
LABELV $1135
line 2734
;2734:			}
LABELV $1125
line 2735
;2735:			e++;
ADDRLP4 4144
ADDRLP4 4144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2736
;2736:		}
LABELV $1119
line 2688
ADDRLP4 4144
INDIRI4
ADDRLP4 9400
INDIRI4
LTI4 $1118
line 2737
;2737:	}
LABELV $1105
line 2739
;2738:
;2739:	for ( e = 0 ; e < numListedEntities ; e++ ) 
ADDRLP4 4144
CNSTI4 0
ASGNI4
ADDRGP4 $1147
JUMPV
LABELV $1144
line 2740
;2740:	{
line 2742
;2741:		//ent = entityList[ e ];
;2742:		if (entityList[e] != ENTITYNUM_NONE &&
ADDRLP4 9556
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
INDIRI4
ASGNI4
ADDRLP4 9556
INDIRI4
CNSTI4 1023
EQI4 $1148
ADDRLP4 9556
INDIRI4
CNSTI4 0
LTI4 $1148
ADDRLP4 9556
INDIRI4
CNSTI4 1024
GEI4 $1148
line 2745
;2743:			entityList[e] >= 0 &&
;2744:			entityList[e] < MAX_GENTITIES)
;2745:		{
line 2746
;2746:			ent = &g_entities[entityList[e]];
ADDRLP4 4
CNSTI4 828
ADDRLP4 4144
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4172
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 2747
;2747:		}
ADDRGP4 $1149
JUMPV
LABELV $1148
line 2749
;2748:		else
;2749:		{
line 2750
;2750:			ent = NULL;
ADDRLP4 4
CNSTP4 0
ASGNP4
line 2751
;2751:		}
LABELV $1149
line 2753
;2752:
;2753:		if (!ent)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1150
line 2754
;2754:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1150
line 2755
;2755:		if (ent == self)
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $1152
line 2756
;2756:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1152
line 2757
;2757:		if (ent->client && OnSameTeam(ent, self))
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1154
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 9564
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 9564
INDIRI4
CNSTI4 0
EQI4 $1154
line 2758
;2758:		{
line 2759
;2759:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1154
line 2763
;2760:		}
;2761://		if ( ent->owner == self && ent->s.weapon != WP_THERMAL )//can push your own thermals
;2762://			continue;
;2763:		if ( !(ent->inuse) )
ADDRLP4 4
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1156
line 2764
;2764:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1156
line 2765
;2765:		if ( ent->s.eType != ET_MISSILE )
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1158
line 2766
;2766:		{
line 2767
;2767:			if ( ent->s.eType != ET_ITEM /*&& ent->e_ThinkFunc != thinkF_G_RunObject*/ )//|| !(ent->flags&FL_DROPPED_ITEM) )//was only dropped items
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $1159
line 2768
;2768:			{
line 2770
;2769:				//FIXME: need pushable objects
;2770:				if ( ent->s.eFlags & EF_NODRAW )
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1162
line 2771
;2771:				{
line 2772
;2772:					continue;
ADDRGP4 $1145
JUMPV
LABELV $1162
line 2774
;2773:				}
;2774:				if ( !ent->client )
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1159
line 2775
;2775:				{
line 2776
;2776:					if ( Q_stricmp( "lightsaber", ent->classname ) != 0 )
ADDRGP4 $1168
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 416
ADDP4
INDIRP4
ARGP4
ADDRLP4 9568
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 9568
INDIRI4
CNSTI4 0
EQI4 $1159
line 2777
;2777:					{//not a lightsaber 
line 2780
;2778://						if ( !(ent->svFlags&SVF_GLASS_BRUSH) )
;2779://						{//and not glass
;2780:							if ( Q_stricmp( "func_door", ent->classname ) != 0 || !(ent->spawnflags & 2/*MOVER_FORCE_ACTIVATE*/) )
ADDRGP4 $1171
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 416
ADDP4
INDIRP4
ARGP4
ADDRLP4 9572
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 9576
CNSTI4 0
ASGNI4
ADDRLP4 9572
INDIRI4
ADDRLP4 9576
INDIRI4
NEI4 $1172
ADDRLP4 4
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 9576
INDIRI4
NEI4 $1169
LABELV $1172
line 2781
;2781:							{//not a force-usable door
line 2782
;2782:								if ( Q_stricmp( "limb", ent->classname ) )
ADDRGP4 $1175
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 416
ADDP4
INDIRP4
ARGP4
ADDRLP4 9580
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 9580
INDIRI4
CNSTI4 0
EQI4 $1159
line 2783
;2783:								{//not a limb
line 2784
;2784:									continue;
ADDRGP4 $1145
JUMPV
line 2786
;2785:								}
;2786:							}
LABELV $1169
line 2787
;2787:							else if ( ent->moverState != MOVER_POS1 && ent->moverState != MOVER_POS2 )
ADDRLP4 9580
ADDRLP4 4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ASGNI4
ADDRLP4 9580
INDIRI4
CNSTI4 0
EQI4 $1159
ADDRLP4 9580
INDIRI4
CNSTI4 1
EQI4 $1159
line 2788
;2788:							{//not at rest
line 2789
;2789:								continue;
ADDRGP4 $1145
JUMPV
line 2792
;2790:							}
;2791://						}
;2792:					}
line 2794
;2793:					//continue;
;2794:				}
line 2795
;2795:			}
line 2796
;2796:		}
LABELV $1158
line 2798
;2797:		else
;2798:		{
line 2799
;2799:			if ( ent->s.pos.trType == TR_STATIONARY && (ent->s.eFlags&EF_MISSILE_STICK) )
ADDRLP4 9572
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 9572
INDIRI4
NEI4 $1178
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2097152
BANDI4
ADDRLP4 9572
INDIRI4
EQI4 $1178
line 2800
;2800:			{//can't force-push/pull stuck missiles (detpacks, tripmines)
line 2801
;2801:				continue;
ADDRGP4 $1145
JUMPV
LABELV $1178
line 2803
;2802:			}
;2803:			if ( ent->s.pos.trType == TR_STATIONARY && ent->s.weapon != WP_THERMAL )
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1180
ADDRLP4 4
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 11
EQI4 $1180
line 2804
;2804:			{//only thermal detonators can be pushed once stopped
line 2805
;2805:				continue;
ADDRGP4 $1145
JUMPV
LABELV $1180
line 2807
;2806:			}
;2807:		}
LABELV $1159
line 2811
;2808:
;2809:		//this is all to see if we need to start a saber attack, if it's in flight, this doesn't matter
;2810:		// find the distance from the edge of the bounding box
;2811:		for ( i = 0 ; i < 3 ; i++ ) 
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1182
line 2812
;2812:		{
line 2813
;2813:			if ( center[i] < ent->r.absmin[i] ) 
ADDRLP4 9568
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9568
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ADDRLP4 9568
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
GEF4 $1186
line 2814
;2814:			{
line 2815
;2815:				v[i] = ent->r.absmin[i] - center[i];
ADDRLP4 9572
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9572
INDIRI4
ADDRLP4 20
ADDP4
ADDRLP4 9572
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 344
ADDP4
ADDP4
INDIRF4
ADDRLP4 9572
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2816
;2816:			} else if ( center[i] > ent->r.absmax[i] ) 
ADDRGP4 $1187
JUMPV
LABELV $1186
ADDRLP4 9572
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9572
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ADDRLP4 9572
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
LEF4 $1188
line 2817
;2817:			{
line 2818
;2818:				v[i] = center[i] - ent->r.absmax[i];
ADDRLP4 9576
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 9576
INDIRI4
ADDRLP4 20
ADDP4
ADDRLP4 9576
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
ADDRLP4 9576
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 356
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2819
;2819:			} else 
ADDRGP4 $1189
JUMPV
LABELV $1188
line 2820
;2820:			{
line 2821
;2821:				v[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
CNSTF4 0
ASGNF4
line 2822
;2822:			}
LABELV $1189
LABELV $1187
line 2823
;2823:		}
LABELV $1183
line 2811
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1182
line 2825
;2824:
;2825:		VectorSubtract( ent->r.absmax, ent->r.absmin, size );
ADDRLP4 4160
ADDRLP4 4
INDIRP4
CNSTI4 356
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4160+4
ADDRLP4 4
INDIRP4
CNSTI4 360
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4160+8
ADDRLP4 4
INDIRP4
CNSTI4 364
ADDP4
INDIRF4
ADDRLP4 4
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2826
;2826:		VectorMA( ent->r.absmin, 0.5, size, ent_org );
ADDRLP4 9580
CNSTF4 1056964608
ASGNF4
ADDRLP4 4132
ADDRLP4 4
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
ADDRLP4 9580
INDIRF4
ADDRLP4 4160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4132+4
ADDRLP4 4
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
ADDRLP4 9580
INDIRF4
ADDRLP4 4160+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4132+8
ADDRLP4 4
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 4160+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2828
;2827:
;2828:		VectorSubtract( ent_org, center, dir );
ADDRLP4 4148
ADDRLP4 4132
INDIRF4
ADDRLP4 8
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4148+4
ADDRLP4 4132+4
INDIRF4
ADDRLP4 8+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4148+8
ADDRLP4 4132+8
INDIRF4
ADDRLP4 8+8
INDIRF4
SUBF4
ASGNF4
line 2829
;2829:		VectorNormalize( dir );
ADDRLP4 4148
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2830
;2830:		if ( (dot1 = DotProduct( dir, forward )) < 0.6 )
ADDRLP4 9584
ADDRLP4 4148
INDIRF4
ADDRLP4 9348
INDIRF4
MULF4
ADDRLP4 4148+4
INDIRF4
ADDRLP4 9348+4
INDIRF4
MULF4
ADDF4
ADDRLP4 4148+8
INDIRF4
ADDRLP4 9348+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 9460
ADDRLP4 9584
INDIRF4
ASGNF4
ADDRLP4 9584
INDIRF4
CNSTF4 1058642330
GEF4 $1202
line 2831
;2831:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1202
line 2833
;2832:
;2833:		dist = VectorLength( v );
ADDRLP4 20
ARGP4
ADDRLP4 9588
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 9380
ADDRLP4 9588
INDIRF4
ASGNF4
line 2838
;2834:
;2835:		//Now check and see if we can actually deflect it
;2836:		//method1
;2837:		//if within a certain range, deflect it
;2838:		if ( dist >= radius ) 
ADDRLP4 9380
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
LTF4 $1208
line 2839
;2839:		{
line 2840
;2840:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1208
line 2844
;2841:		}
;2842:	
;2843:		//in PVS?
;2844:		if ( !ent->r.bmodel && !trap_InPVS( ent_org, self->client->ps.origin ) )
ADDRLP4 4
INDIRP4
CNSTI4 312
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1210
ADDRLP4 4132
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9592
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 9592
INDIRI4
CNSTI4 0
NEI4 $1210
line 2845
;2845:		{//must be in PVS
line 2846
;2846:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1210
line 2850
;2847:		}
;2848:
;2849:		//really should have a clear LOS to this thing...
;2850:		trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, ent_org, self->s.number, MASK_SHOT );
ADDRLP4 8268
ARGP4
ADDRLP4 9596
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9596
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9600
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 9600
INDIRP4
ARGP4
ADDRLP4 9600
INDIRP4
ARGP4
ADDRLP4 4132
ARGP4
ADDRLP4 9596
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 2851
;2851:		if ( tr.fraction < 1.0f && tr.entityNum != ent->s.number )
ADDRLP4 8268+8
INDIRF4
CNSTF4 1065353216
GEF4 $1212
ADDRLP4 8268+52
INDIRI4
ADDRLP4 4
INDIRP4
INDIRI4
EQI4 $1212
line 2852
;2852:		{//must have clear LOS
line 2853
;2853:			continue;
ADDRGP4 $1145
JUMPV
LABELV $1212
line 2857
;2854:		}
;2855:
;2856:		// ok, we are within the radius, add us to the incoming list
;2857:		push_list[ent_count] = ent;
ADDRLP4 9364
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 2858
;2858:		ent_count++;
ADDRLP4 9364
ADDRLP4 9364
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2859
;2859:	}
LABELV $1145
line 2739
ADDRLP4 4144
ADDRLP4 4144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1147
ADDRLP4 4144
INDIRI4
ADDRLP4 9400
INDIRI4
LTI4 $1144
line 2861
;2860:
;2861:	if ( ent_count )
ADDRLP4 9364
INDIRI4
CNSTI4 0
EQI4 $1216
line 2862
;2862:	{
line 2866
;2863:		//vec3_t	fx_dir;
;2864:		// we are done, do we have any to deflect?
;2865:		//method1:
;2866:		for ( x = 0; x < ent_count; x++ )
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRGP4 $1221
JUMPV
LABELV $1218
line 2867
;2867:		{
line 2868
;2868:			int modPowerLevel = powerLevel;
ADDRLP4 9556
ADDRLP4 9428
INDIRI4
ASGNI4
line 2871
;2869:
;2870:	
;2871:			if (push_list[x]->client)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1222
line 2872
;2872:			{
line 2873
;2873:				modPowerLevel = WP_AbsorbConversion(push_list[x], push_list[x]->client->ps.fd.forcePowerLevel[FP_ABSORB], self, powerUse, powerLevel, forcePowerNeeded[self->client->ps.fd.forcePowerLevel[powerUse]][powerUse]);
ADDRLP4 9560
CNSTI4 2
ASGNI4
ADDRLP4 9564
ADDRLP4 32
INDIRI4
ADDRLP4 9560
INDIRI4
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9564
INDIRP4
ARGP4
ADDRLP4 9568
CNSTI4 408
ASGNI4
ADDRLP4 9564
INDIRP4
ADDRLP4 9568
INDIRI4
ADDP4
INDIRP4
CNSTI4 972
ADDP4
INDIRI4
ARGI4
ADDRLP4 9572
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9572
INDIRP4
ARGP4
ADDRLP4 9396
INDIRI4
ARGI4
ADDRLP4 9428
INDIRI4
ARGI4
ADDRLP4 9580
ADDRLP4 9396
INDIRI4
ADDRLP4 9560
INDIRI4
LSHI4
ASGNI4
ADDRLP4 9580
INDIRI4
CNSTI4 72
ADDRLP4 9580
INDIRI4
ADDRLP4 9572
INDIRP4
ADDRLP4 9568
INDIRI4
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRLP4 9584
ADDRGP4 WP_AbsorbConversion
CALLI4
ASGNI4
ADDRLP4 9556
ADDRLP4 9584
INDIRI4
ASGNI4
line 2874
;2874:				if (modPowerLevel == -1)
ADDRLP4 9556
INDIRI4
CNSTI4 -1
NEI4 $1224
line 2875
;2875:				{
line 2876
;2876:					modPowerLevel = powerLevel;
ADDRLP4 9556
ADDRLP4 9428
INDIRI4
ASGNI4
line 2877
;2877:				}
LABELV $1224
line 2878
;2878:			}
LABELV $1222
line 2880
;2879:
;2880:			pushPower = 256*modPowerLevel;
ADDRLP4 9464
ADDRLP4 9556
INDIRI4
CNSTI4 8
LSHI4
ASGNI4
line 2882
;2881:
;2882:			if (push_list[x]->client)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1226
line 2883
;2883:			{
line 2884
;2884:				VectorCopy(push_list[x]->client->ps.origin, thispush_org);
ADDRLP4 9368
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2885
;2885:			}
ADDRGP4 $1227
JUMPV
LABELV $1226
line 2887
;2886:			else
;2887:			{
line 2888
;2888:				VectorCopy(push_list[x]->s.origin, thispush_org);
ADDRLP4 9368
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2889
;2889:			}
LABELV $1227
line 2891
;2890:
;2891:			if ( push_list[x]->client )
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1228
line 2892
;2892:			{//FIXME: make enemy jedi able to hunker down and resist this?
line 2893
;2893:				int otherPushPower = push_list[x]->client->ps.fd.forcePowerLevel[powerUse];
ADDRLP4 9572
CNSTI4 2
ASGNI4
ADDRLP4 9560
ADDRLP4 9396
INDIRI4
ADDRLP4 9572
INDIRI4
LSHI4
ADDRLP4 32
INDIRI4
ADDRLP4 9572
INDIRI4
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
ASGNI4
line 2894
;2894:				qboolean canPullWeapon = qtrue;
ADDRLP4 9568
CNSTI4 1
ASGNI4
line 2895
;2895:				float dirLen = 0;
ADDRLP4 9564
CNSTF4 0
ASGNF4
line 2897
;2896:
;2897:				knockback = pull?0:200;
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1231
ADDRLP4 9576
CNSTI4 0
ASGNI4
ADDRGP4 $1232
JUMPV
LABELV $1231
ADDRLP4 9576
CNSTI4 200
ASGNI4
LABELV $1232
ADDRLP4 9472
ADDRLP4 9576
INDIRI4
CVIF4 4
ASGNF4
line 2899
;2898:
;2899:				pushPowerMod = pushPower;
ADDRLP4 9432
ADDRLP4 9464
INDIRI4
ASGNI4
line 2901
;2900:
;2901:				if (push_list[x]->client->pers.cmd.forwardmove ||
ADDRLP4 9580
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9584
CNSTI4 0
ASGNI4
ADDRLP4 9580
INDIRP4
CNSTI4 1396
ADDP4
INDIRI1
CVII4 1
ADDRLP4 9584
INDIRI4
NEI4 $1235
ADDRLP4 9580
INDIRP4
CNSTI4 1397
ADDP4
INDIRI1
CVII4 1
ADDRLP4 9584
INDIRI4
EQI4 $1233
LABELV $1235
line 2903
;2902:					push_list[x]->client->pers.cmd.rightmove)
;2903:				{ //if you are moving, you get one less level of defense
line 2904
;2904:					otherPushPower--;
ADDRLP4 9560
ADDRLP4 9560
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2906
;2905:
;2906:					if (otherPushPower < 0)
ADDRLP4 9560
INDIRI4
CNSTI4 0
GEI4 $1236
line 2907
;2907:					{
line 2908
;2908:						otherPushPower = 0;
ADDRLP4 9560
CNSTI4 0
ASGNI4
line 2909
;2909:					}
LABELV $1236
line 2910
;2910:				}
LABELV $1233
line 2912
;2911:
;2912:				if (otherPushPower && CanCounterThrow(push_list[x], pull))
ADDRLP4 9560
INDIRI4
CNSTI4 0
EQI4 $1238
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 9588
ADDRGP4 CanCounterThrow
CALLI4
ASGNI4
ADDRLP4 9588
INDIRI4
CNSTI4 0
EQI4 $1238
line 2913
;2913:				{
line 2914
;2914:					if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1240
line 2915
;2915:					{
line 2916
;2916:						G_Sound( push_list[x], CHAN_BODY, G_SoundIndex( "sound/weapons/force/pull.wav" ) );
ADDRGP4 $1089
ARGP4
ADDRLP4 9592
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 9592
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2917
;2917:						push_list[x]->client->ps.forceHandExtend = HANDEXTEND_FORCEPULL;
ADDRLP4 9596
CNSTI4 2
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 9596
INDIRI4
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
ADDRLP4 9596
INDIRI4
ASGNI4
line 2918
;2918:						push_list[x]->client->ps.forceHandExtendTime = level.time + 400;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
line 2919
;2919:					}
ADDRGP4 $1241
JUMPV
LABELV $1240
line 2921
;2920:					else
;2921:					{
line 2922
;2922:						G_Sound( push_list[x], CHAN_BODY, G_SoundIndex( "sound/weapons/force/push.wav" ) );
ADDRGP4 $1085
ARGP4
ADDRLP4 9592
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 9592
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 2923
;2923:						push_list[x]->client->ps.forceHandExtend = HANDEXTEND_FORCEPUSH;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 1
ASGNI4
line 2924
;2924:						push_list[x]->client->ps.forceHandExtendTime = level.time + 1000;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 2925
;2925:					}
LABELV $1241
line 2926
;2926:					push_list[x]->client->ps.powerups[PW_DISINT_4] = push_list[x]->client->ps.forceHandExtendTime + 200;
ADDRLP4 9592
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9592
INDIRP4
CNSTI4 380
ADDP4
ADDRLP4 9592
INDIRP4
CNSTI4 1240
ADDP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 2930
;2927:
;2928:					//Make a counter-throw effect
;2929:
;2930:					if (otherPushPower >= modPowerLevel)
ADDRLP4 9560
INDIRI4
ADDRLP4 9556
INDIRI4
LTI4 $1244
line 2931
;2931:					{
line 2932
;2932:						pushPowerMod = 0;
ADDRLP4 9432
CNSTI4 0
ASGNI4
line 2933
;2933:						canPullWeapon = qfalse;
ADDRLP4 9568
CNSTI4 0
ASGNI4
line 2934
;2934:					}
ADDRGP4 $1245
JUMPV
LABELV $1244
line 2936
;2935:					else
;2936:					{
line 2937
;2937:						int powerDif = (modPowerLevel - otherPushPower);
ADDRLP4 9596
ADDRLP4 9556
INDIRI4
ADDRLP4 9560
INDIRI4
SUBI4
ASGNI4
line 2939
;2938:
;2939:						if (powerDif >= 3)
ADDRLP4 9596
INDIRI4
CNSTI4 3
LTI4 $1246
line 2940
;2940:						{
line 2941
;2941:							pushPowerMod -= pushPowerMod*0.2;
ADDRLP4 9600
ADDRLP4 9432
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 9432
ADDRLP4 9600
INDIRF4
CNSTF4 1045220557
ADDRLP4 9600
INDIRF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2942
;2942:						}
ADDRGP4 $1247
JUMPV
LABELV $1246
line 2943
;2943:						else if (powerDif == 2)
ADDRLP4 9596
INDIRI4
CNSTI4 2
NEI4 $1248
line 2944
;2944:						{
line 2945
;2945:							pushPowerMod -= pushPowerMod*0.4;
ADDRLP4 9600
ADDRLP4 9432
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 9432
ADDRLP4 9600
INDIRF4
CNSTF4 1053609165
ADDRLP4 9600
INDIRF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2946
;2946:						}
ADDRGP4 $1249
JUMPV
LABELV $1248
line 2947
;2947:						else if (powerDif == 1)
ADDRLP4 9596
INDIRI4
CNSTI4 1
NEI4 $1250
line 2948
;2948:						{
line 2949
;2949:							pushPowerMod -= pushPowerMod*0.8;
ADDRLP4 9600
ADDRLP4 9432
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 9432
ADDRLP4 9600
INDIRF4
CNSTF4 1061997773
ADDRLP4 9600
INDIRF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2950
;2950:						}
LABELV $1250
LABELV $1249
LABELV $1247
line 2952
;2951:
;2952:						if (pushPowerMod < 0)
ADDRLP4 9432
INDIRI4
CNSTI4 0
GEI4 $1252
line 2953
;2953:						{
line 2954
;2954:							pushPowerMod = 0;
ADDRLP4 9432
CNSTI4 0
ASGNI4
line 2955
;2955:						}
LABELV $1252
line 2956
;2956:					}
LABELV $1245
line 2957
;2957:				}
LABELV $1238
line 2960
;2958:
;2959:				//shove them
;2960:				if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1254
line 2961
;2961:				{
line 2962
;2962:					VectorSubtract( self->client->ps.origin, thispush_org, pushDir );
ADDRLP4 9592
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 9384
ADDRLP4 9592
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 9368
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9384+4
ADDRLP4 9592
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 9368+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9384+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 9368+8
INDIRF4
SUBF4
ASGNF4
line 2964
;2963:
;2964:					if (push_list[x]->client && VectorLength(pushDir) <= 256)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1255
ADDRLP4 9384
ARGP4
ADDRLP4 9596
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 9596
INDIRF4
CNSTF4 1132462080
GTF4 $1255
line 2965
;2965:					{
line 2966
;2966:						int randfact = 0;
ADDRLP4 9600
CNSTI4 0
ASGNI4
line 2968
;2967:
;2968:						if (modPowerLevel == FORCE_LEVEL_1)
ADDRLP4 9556
INDIRI4
CNSTI4 1
NEI4 $1262
line 2969
;2969:						{
line 2970
;2970:							randfact = 3;
ADDRLP4 9600
CNSTI4 3
ASGNI4
line 2971
;2971:						}
ADDRGP4 $1263
JUMPV
LABELV $1262
line 2972
;2972:						else if (modPowerLevel == FORCE_LEVEL_2)
ADDRLP4 9556
INDIRI4
CNSTI4 2
NEI4 $1264
line 2973
;2973:						{
line 2974
;2974:							randfact = 7;
ADDRLP4 9600
CNSTI4 7
ASGNI4
line 2975
;2975:						}
ADDRGP4 $1265
JUMPV
LABELV $1264
line 2976
;2976:						else if (modPowerLevel == FORCE_LEVEL_3)
ADDRLP4 9556
INDIRI4
CNSTI4 3
NEI4 $1266
line 2977
;2977:						{
line 2978
;2978:							randfact = 10;
ADDRLP4 9600
CNSTI4 10
ASGNI4
line 2979
;2979:						}
LABELV $1266
LABELV $1265
LABELV $1263
line 2981
;2980:
;2981:						if (!OnSameTeam(self, push_list[x]) && Q_irand(1, 10) <= randfact && canPullWeapon)
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
ADDRLP4 9604
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 9604
INDIRI4
CNSTI4 0
NEI4 $1255
CNSTI4 1
ARGI4
CNSTI4 10
ARGI4
ADDRLP4 9608
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 9608
INDIRI4
ADDRLP4 9600
INDIRI4
GTI4 $1255
ADDRLP4 9568
INDIRI4
CNSTI4 0
EQI4 $1255
line 2982
;2982:						{
line 2985
;2983:							vec3_t uorg, vecnorm;
;2984:
;2985:							VectorCopy(self->client->ps.origin, uorg);
ADDRLP4 9612
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2986
;2986:							uorg[2] += 64;
ADDRLP4 9612+8
ADDRLP4 9612+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 2988
;2987:
;2988:							VectorSubtract(uorg, thispush_org, vecnorm);
ADDRLP4 9624
ADDRLP4 9612
INDIRF4
ADDRLP4 9368
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9624+4
ADDRLP4 9612+4
INDIRF4
ADDRLP4 9368+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9624+8
ADDRLP4 9612+8
INDIRF4
ADDRLP4 9368+8
INDIRF4
SUBF4
ASGNF4
line 2989
;2989:							VectorNormalize(vecnorm);
ADDRLP4 9624
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2991
;2990:
;2991:							TossClientWeapon(push_list[x], vecnorm, 500);
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
ADDRLP4 9624
ARGP4
CNSTF4 1140457472
ARGF4
ADDRGP4 TossClientWeapon
CALLV
pop
line 2992
;2992:						}
line 2993
;2993:					}
line 2994
;2994:				}
ADDRGP4 $1255
JUMPV
LABELV $1254
line 2996
;2995:				else
;2996:				{
line 2997
;2997:					VectorSubtract( thispush_org, self->client->ps.origin, pushDir );
ADDRLP4 9592
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 9384
ADDRLP4 9368
INDIRF4
ADDRLP4 9592
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9384+4
ADDRLP4 9368+4
INDIRF4
ADDRLP4 9592
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9384+8
ADDRLP4 9368+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2998
;2998:				}
LABELV $1255
line 3000
;2999:
;3000:				if (modPowerLevel > otherPushPower && push_list[x]->client)
ADDRLP4 9556
INDIRI4
ADDRLP4 9560
INDIRI4
LEI4 $1281
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1281
line 3001
;3001:				{
line 3005
;3002:					//int levDif = modPowerLevel - otherPushPower;
;3003:
;3004:					if (/*Q_irand(1, 5) <= levDif &&*/
;3005:						modPowerLevel == FORCE_LEVEL_3 &&
ADDRLP4 9556
INDIRI4
CNSTI4 3
NEI4 $1283
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
EQI4 $1283
line 3007
;3006:						push_list[x]->client->ps.forceHandExtend != HANDEXTEND_KNOCKDOWN)
;3007:					{
line 3008
;3008:						dirLen = VectorLength(pushDir);
ADDRLP4 9384
ARGP4
ADDRLP4 9592
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 9564
ADDRLP4 9592
INDIRF4
ASGNF4
line 3010
;3009:
;3010:						if (dirLen <= 128)
ADDRLP4 9564
INDIRF4
CNSTF4 1124073472
GTF4 $1285
line 3011
;3011:						{ //can only do a knockdown if fairly close
line 3012
;3012:							push_list[x]->client->ps.forceHandExtend = HANDEXTEND_KNOCKDOWN;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 8
ASGNI4
line 3013
;3013:							push_list[x]->client->ps.forceHandExtendTime = level.time + 1100;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1100
ADDI4
ASGNI4
line 3014
;3014:							push_list[x]->client->ps.forceDodgeAnim = 0; //this toggles between 1 and 0, when it's 1 we should play the get up anim
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 0
ASGNI4
line 3015
;3015:							push_list[x]->client->ps.quickerGetup = qtrue;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1252
ADDP4
CNSTI4 1
ASGNI4
line 3016
;3016:						}
LABELV $1285
line 3017
;3017:					}
LABELV $1283
line 3018
;3018:				}
LABELV $1281
line 3020
;3019:
;3020:				if (!dirLen)
ADDRLP4 9564
INDIRF4
CNSTF4 0
NEF4 $1288
line 3021
;3021:				{
line 3022
;3022:					dirLen = VectorLength(pushDir);
ADDRLP4 9384
ARGP4
ADDRLP4 9592
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 9564
ADDRLP4 9592
INDIRF4
ASGNF4
line 3023
;3023:				}
LABELV $1288
line 3025
;3024:
;3025:				VectorNormalize(pushDir);
ADDRLP4 9384
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3027
;3026:
;3027:				if (push_list[x]->client)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1229
line 3028
;3028:				{
line 3030
;3029:					//escape a force grip if we're in one
;3030:					if (self->client->ps.fd.forceGripBeingGripped > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LEF4 $1292
line 3031
;3031:					{ //force the enemy to stop gripping me if I managed to push him
line 3032
;3032:						if (push_list[x]->client->ps.fd.forceGripEntityNum == self->s.number)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $1295
line 3033
;3033:						{
line 3034
;3034:							if (modPowerLevel >= push_list[x]->client->ps.fd.forcePowerLevel[FP_GRIP])
ADDRLP4 9556
INDIRI4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
LTI4 $1297
line 3035
;3035:							{ //only break the grip if our push/pull level is >= their grip level
line 3036
;3036:								WP_ForcePowerStop(push_list[x], FP_GRIP);
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3037
;3037:								self->client->ps.fd.forceGripBeingGripped = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
CNSTF4 0
ASGNF4
line 3038
;3038:								push_list[x]->client->ps.fd.forceGripUseTime = level.time + 1000; //since we just broke out of it..
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1112
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 3039
;3039:							}
LABELV $1297
line 3040
;3040:						}
LABELV $1295
line 3041
;3041:					}
LABELV $1292
line 3043
;3042:
;3043:					push_list[x]->client->ps.otherKiller = self->s.number;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 748
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 3044
;3044:					push_list[x]->client->ps.otherKillerTime = level.time + 5000;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 3045
;3045:					push_list[x]->client->ps.otherKillerDebounceTime = level.time + 100;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 756
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 3047
;3046:
;3047:					pushPowerMod -= (dirLen*0.7);
ADDRLP4 9432
ADDRLP4 9432
INDIRI4
CVIF4 4
CNSTF4 1060320051
ADDRLP4 9564
INDIRF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 3048
;3048:					if (pushPowerMod < 16)
ADDRLP4 9432
INDIRI4
CNSTI4 16
GEI4 $1302
line 3049
;3049:					{
line 3050
;3050:						pushPowerMod = 16;
ADDRLP4 9432
CNSTI4 16
ASGNI4
line 3051
;3051:					}
LABELV $1302
line 3053
;3052:
;3053:					push_list[x]->client->ps.velocity[0] = pushDir[0]*pushPowerMod;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 9384
INDIRF4
ADDRLP4 9432
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 3054
;3054:					push_list[x]->client->ps.velocity[1] = pushDir[1]*pushPowerMod;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 9384+4
INDIRF4
ADDRLP4 9432
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 3056
;3055:
;3056:					if ((int)push_list[x]->client->ps.velocity[2] == 0)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CVFI4 4
CNSTI4 0
NEI4 $1305
line 3057
;3057:					{ //if not going anywhere vertically, boost them up a bit
line 3058
;3058:						push_list[x]->client->ps.velocity[2] = pushDir[2]*pushPowerMod;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 9384+8
INDIRF4
ADDRLP4 9432
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 3060
;3059:
;3060:						if (push_list[x]->client->ps.velocity[2] < 128)
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1124073472
GEF4 $1229
line 3061
;3061:						{
line 3062
;3062:							push_list[x]->client->ps.velocity[2] = 128;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1124073472
ASGNF4
line 3063
;3063:						}
line 3064
;3064:					}
ADDRGP4 $1229
JUMPV
LABELV $1305
line 3066
;3065:					else
;3066:					{
line 3067
;3067:						push_list[x]->client->ps.velocity[2] = pushDir[2]*pushPowerMod;
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 9384+8
INDIRF4
ADDRLP4 9432
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 3068
;3068:					}
line 3069
;3069:				}
line 3070
;3070:			}
ADDRGP4 $1229
JUMPV
LABELV $1228
line 3071
;3071:			else if ( push_list[x]->s.eType == ET_MISSILE && push_list[x]->s.pos.trType != TR_STATIONARY && (push_list[x]->s.pos.trType != TR_INTERPOLATE||push_list[x]->s.weapon != WP_THERMAL) )//rolling and stationary thermal detonators are dealt with below
ADDRLP4 9560
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ASGNP4
ADDRLP4 9560
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1311
ADDRLP4 9564
ADDRLP4 9560
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
ADDRLP4 9564
INDIRI4
CNSTI4 0
EQI4 $1311
ADDRLP4 9564
INDIRI4
CNSTI4 1
NEI4 $1313
ADDRLP4 9560
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
CNSTI4 11
EQI4 $1311
LABELV $1313
line 3072
;3072:			{
line 3073
;3073:				if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1314
line 3074
;3074:				{//deflect rather than reflect?
line 3075
;3075:				}
ADDRGP4 $1312
JUMPV
LABELV $1314
line 3077
;3076:				else 
;3077:				{
line 3078
;3078:					G_ReflectMissile( self, push_list[x], forward );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
ADDRLP4 9348
ARGP4
ADDRGP4 G_ReflectMissile
CALLV
pop
line 3081
;3079:					//deflect sound
;3080:					//G_Sound( push_list[x], G_SoundIndex( va("sound/weapons/blaster/reflect%d.wav", Q_irand( 1, 3 ) ) ) );
;3081:				}
line 3082
;3082:			}
ADDRGP4 $1312
JUMPV
LABELV $1311
line 3083
;3083:			else if ( !Q_stricmp( "func_door", push_list[x]->classname ) && (push_list[x]->spawnflags&2/*MOVER_FORCE_ACTIVATE*/) )
ADDRGP4 $1171
ARGP4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 416
ADDP4
INDIRP4
ARGP4
ADDRLP4 9568
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 9572
CNSTI4 0
ASGNI4
ADDRLP4 9568
INDIRI4
ADDRLP4 9572
INDIRI4
NEI4 $1316
ADDRLP4 9576
CNSTI4 2
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 9576
INDIRI4
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
ADDRLP4 9576
INDIRI4
BANDI4
ADDRLP4 9572
INDIRI4
EQI4 $1316
line 3084
;3084:			{//push/pull the door
line 3087
;3085:				vec3_t	pos1, pos2;
;3086:
;3087:				AngleVectors( self->client->ps.viewangles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 9348
ARGP4
ADDRLP4 9604
CNSTP4 0
ASGNP4
ADDRLP4 9604
INDIRP4
ARGP4
ADDRLP4 9604
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3088
;3088:				VectorNormalize( forward );
ADDRLP4 9348
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3089
;3089:				VectorMA( self->client->ps.origin, radius, forward, end );
ADDRLP4 9608
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 9612
ADDRLP4 9360
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 9500
ADDRLP4 9608
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 9348
INDIRF4
ADDRLP4 9612
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 9500+4
ADDRLP4 9608
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 9348+4
INDIRF4
ADDRLP4 9612
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 9500+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 9348+8
INDIRF4
ADDRLP4 9360
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 3090
;3090:				trap_Trace( &tr, self->client->ps.origin, vec3_origin, vec3_origin, end, self->s.number, MASK_SHOT );
ADDRLP4 8268
ARGP4
ADDRLP4 9616
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9616
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9620
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 9620
INDIRP4
ARGP4
ADDRLP4 9620
INDIRP4
ARGP4
ADDRLP4 9500
ARGP4
ADDRLP4 9616
INDIRP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 3091
;3091:				if ( tr.entityNum != push_list[x]->s.number || tr.fraction == 1.0 || tr.allsolid || tr.startsolid )
ADDRLP4 8268+52
INDIRI4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
INDIRI4
NEI4 $1329
ADDRLP4 8268+8
INDIRF4
CNSTF4 1065353216
EQF4 $1329
ADDRLP4 9624
CNSTI4 0
ASGNI4
ADDRLP4 8268
INDIRI4
ADDRLP4 9624
INDIRI4
NEI4 $1329
ADDRLP4 8268+4
INDIRI4
ADDRLP4 9624
INDIRI4
EQI4 $1322
LABELV $1329
line 3092
;3092:				{//must be pointing right at it
line 3093
;3093:					continue;
ADDRGP4 $1219
JUMPV
LABELV $1322
line 3096
;3094:				}
;3095:
;3096:				VectorSubtract( push_list[x]->r.absmax, push_list[x]->r.absmin, size );
ADDRLP4 9628
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
ASGNP4
ADDRLP4 9632
ADDRLP4 9628
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4160
ADDRLP4 9632
INDIRP4
CNSTI4 356
ADDP4
INDIRF4
ADDRLP4 9632
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9636
ADDRLP4 9628
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4160+4
ADDRLP4 9636
INDIRP4
CNSTI4 360
ADDP4
INDIRF4
ADDRLP4 9636
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 9640
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4160+8
ADDRLP4 9640
INDIRP4
CNSTI4 364
ADDP4
INDIRF4
ADDRLP4 9640
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3097
;3097:				VectorMA( push_list[x]->r.absmin, 0.5, size, center );
ADDRLP4 9644
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
ASGNP4
ADDRLP4 9648
CNSTF4 1056964608
ASGNF4
ADDRLP4 8
ADDRLP4 9644
INDIRP4
INDIRP4
CNSTI4 344
ADDP4
INDIRF4
ADDRLP4 9648
INDIRF4
ADDRLP4 4160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 9644
INDIRP4
INDIRP4
CNSTI4 348
ADDP4
INDIRF4
ADDRLP4 9648
INDIRF4
ADDRLP4 4160+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 352
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 4160+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3098
;3098:				VectorAdd( center, push_list[x]->pos1, pos1 );
ADDRLP4 9652
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
ASGNP4
ADDRLP4 9580
ADDRLP4 8
INDIRF4
ADDRLP4 9652
INDIRP4
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 9580+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 9652
INDIRP4
INDIRP4
CNSTI4 552
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 9580+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRF4
ADDF4
ASGNF4
line 3099
;3099:				VectorAdd( center, push_list[x]->pos2, pos2 );
ADDRLP4 9656
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
ASGNP4
ADDRLP4 9592
ADDRLP4 8
INDIRF4
ADDRLP4 9656
INDIRP4
INDIRP4
CNSTI4 560
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 9592+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 9656
INDIRP4
INDIRP4
CNSTI4 564
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 9592+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 568
ADDP4
INDIRF4
ADDF4
ASGNF4
line 3101
;3100:
;3101:				if ( Distance( pos1, self->client->ps.origin ) < Distance( pos2, self->client->ps.origin ) )
ADDRLP4 9580
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9660
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 9592
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 9664
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 9660
INDIRF4
ADDRLP4 9664
INDIRF4
GEF4 $1344
line 3102
;3102:				{//pos1 is closer
line 3103
;3103:					if ( push_list[x]->moverState == MOVER_POS1 )
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1346
line 3104
;3104:					{//at the closest pos
line 3105
;3105:						if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1345
line 3106
;3106:						{//trying to pull, but already at closest point, so screw it
line 3107
;3107:							continue;
ADDRGP4 $1219
JUMPV
line 3109
;3108:						}
;3109:					}
LABELV $1346
line 3110
;3110:					else if ( push_list[x]->moverState == MOVER_POS2 )
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1345
line 3111
;3111:					{//at farthest pos
line 3112
;3112:						if ( !pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1345
line 3113
;3113:						{//trying to push, but already at farthest point, so screw it
line 3114
;3114:							continue;
ADDRGP4 $1219
JUMPV
line 3116
;3115:						}
;3116:					}
line 3117
;3117:				}
LABELV $1344
line 3119
;3118:				else
;3119:				{//pos2 is closer
line 3120
;3120:					if ( push_list[x]->moverState == MOVER_POS1 )
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1354
line 3121
;3121:					{//at the farthest pos
line 3122
;3122:						if ( !pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1355
line 3123
;3123:						{//trying to push, but already at farthest point, so screw it
line 3124
;3124:							continue;
ADDRGP4 $1219
JUMPV
line 3126
;3125:						}
;3126:					}
LABELV $1354
line 3127
;3127:					else if ( push_list[x]->moverState == MOVER_POS2 )
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1358
line 3128
;3128:					{//at closest pos
line 3129
;3129:						if ( pull )
ADDRFP4 4
INDIRI4
CNSTI4 0
EQI4 $1360
line 3130
;3130:						{//trying to pull, but already at closest point, so screw it
line 3131
;3131:							continue;
ADDRGP4 $1219
JUMPV
LABELV $1360
line 3133
;3132:						}
;3133:					}
LABELV $1358
LABELV $1355
line 3134
;3134:				}
LABELV $1345
line 3135
;3135:				GEntity_UseFunc( push_list[x], self, self );
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
ADDP4
INDIRP4
ARGP4
ADDRLP4 9668
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 9668
INDIRP4
ARGP4
ADDRLP4 9668
INDIRP4
ARGP4
ADDRGP4 GEntity_UseFunc
CALLV
pop
line 3136
;3136:			}
LABELV $1316
LABELV $1312
LABELV $1229
line 3137
;3137:		}
LABELV $1219
line 2866
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1221
ADDRLP4 32
INDIRI4
ADDRLP4 9364
INDIRI4
LTI4 $1218
line 3138
;3138:	}
LABELV $1216
line 3142
;3139:
;3140:	//attempt to break any leftover grips
;3141:	//if we're still in a current grip that wasn't broken by the push, it will still remain
;3142:	self->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1748
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 3143
;3143:	self->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 9556
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 9556
INDIRP4
ADDRLP4 9556
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 3144
;3144:	self->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1564
ADDP4
CNSTI4 0
ASGNI4
line 3146
;3145:
;3146:	if (self->client->ps.fd.forceGripBeingGripped > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LEF4 $1363
line 3147
;3147:	{
line 3148
;3148:		self->client->ps.fd.forceGripBeingGripped = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
CNSTF4 0
ASGNF4
line 3149
;3149:	}
LABELV $1363
line 3150
;3150:}
LABELV $1064
endproc ForceThrow 9672 28
export WP_ForcePowerStop
proc WP_ForcePowerStop 32 12
line 3153
;3151:
;3152:void WP_ForcePowerStop( gentity_t *self, forcePowers_t forcePower )
;3153:{
line 3154
;3154:	int wasActive = self->client->ps.fd.forcePowersActive;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ASGNI4
line 3156
;3155:
;3156:	self->client->ps.fd.forcePowersActive &= ~( 1 << forcePower );
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 3158
;3157:
;3158:	switch( (int)forcePower )
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $1368
ADDRLP4 8
INDIRI4
CNSTI4 14
GTI4 $1368
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1427
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1427
address $1370
address $1368
address $1372
address $1368
address $1368
address $1377
address $1384
address $1403
address $1410
address $1417
address $1414
address $1368
address $1368
address $1420
address $1381
code
line 3159
;3159:	{
LABELV $1370
line 3161
;3160:	case FP_HEAL:
;3161:		self->client->ps.fd.forceHealAmount = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1140
ADDP4
CNSTI4 0
ASGNI4
line 3162
;3162:		self->client->ps.fd.forceHealTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1136
ADDP4
CNSTI4 0
ASGNI4
line 3163
;3163:		break;
ADDRGP4 $1368
JUMPV
line 3165
;3164:	case FP_LEVITATION:
;3165:		break;
LABELV $1372
line 3168
;3166:	case FP_SPEED:
;3167:		//G_AddEvent(self, EV_STOPLOOPINGSOUND, 0);
;3168:		if (wasActive & (1 << FP_SPEED))
ADDRLP4 0
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1368
line 3169
;3169:		{
line 3170
;3170:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_2-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1196
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3171
;3171:		}
line 3172
;3172:		break;
ADDRGP4 $1368
JUMPV
line 3174
;3173:	case FP_PUSH:
;3174:		break;
line 3176
;3175:	case FP_PULL:
;3176:		break;
LABELV $1377
line 3178
;3177:	case FP_TELEPATHY:
;3178:		if (wasActive & (1 << FP_TELEPATHY))
ADDRLP4 0
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1378
line 3179
;3179:		{
line 3180
;3180:			G_Sound( self, CHAN_AUTO, G_SoundIndex("sound/weapons/force/distractstop.wav") );
ADDRGP4 $1380
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 3181
;3181:		}
LABELV $1378
line 3182
;3182:		self->client->ps.fd.forceMindtrickTargetIndex = 0;//ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1144
ADDP4
CNSTI4 0
ASGNI4
line 3183
;3183:		self->client->ps.fd.forceMindtrickTargetIndex2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1148
ADDP4
CNSTI4 0
ASGNI4
line 3184
;3184:		self->client->ps.fd.forceMindtrickTargetIndex3 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1152
ADDP4
CNSTI4 0
ASGNI4
line 3185
;3185:		self->client->ps.fd.forceMindtrickTargetIndex4 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1156
ADDP4
CNSTI4 0
ASGNI4
line 3186
;3186:		break;
ADDRGP4 $1368
JUMPV
LABELV $1381
line 3188
;3187:	case FP_SEE:
;3188:		if (wasActive & (1 << FP_SEE))
ADDRLP4 0
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $1368
line 3189
;3189:		{
line 3190
;3190:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_5-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1208
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3191
;3191:		}
line 3192
;3192:		break;
ADDRGP4 $1368
JUMPV
LABELV $1384
line 3194
;3193:	case FP_GRIP:
;3194:		self->client->ps.fd.forceGripUseTime = level.time + 3000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1112
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 3195
;3195:		if (self->client->ps.fd.forcePowerLevel[FP_GRIP] > FORCE_LEVEL_1 &&
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1386
ADDRLP4 20
CNSTI4 828
ADDRLP4 16
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1386
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRI4
ADDRGP4 g_entities+676
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
LEI4 $1386
ADDRLP4 20
INDIRI4
ADDRGP4 g_entities+412
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $1386
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 20
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1140457472
LEF4 $1386
line 3200
;3196:			g_entities[self->client->ps.fd.forceGripEntityNum].client &&
;3197:			g_entities[self->client->ps.fd.forceGripEntityNum].health > 0 &&
;3198:			g_entities[self->client->ps.fd.forceGripEntityNum].inuse &&
;3199:			(level.time - g_entities[self->client->ps.fd.forceGripEntityNum].client->ps.fd.forceGripStarted) > 500)
;3200:		{ //if we had our throat crushed in for more than half a second, gasp for air when we're let go
line 3201
;3201:			if (wasActive & (1 << FP_GRIP))
ADDRLP4 0
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1393
line 3202
;3202:			{
line 3203
;3203:				G_EntitySound( &g_entities[self->client->ps.fd.forceGripEntityNum], CHAN_VOICE, G_SoundIndex("*gasp.wav") );
ADDRGP4 $1395
ARGP4
ADDRLP4 28
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_EntitySound
CALLV
pop
line 3204
;3204:			}
LABELV $1393
line 3205
;3205:		}
LABELV $1386
line 3207
;3206:
;3207:		if (g_entities[self->client->ps.fd.forceGripEntityNum].client &&
ADDRLP4 28
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1396
ADDRLP4 28
INDIRI4
ADDRGP4 g_entities+412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1396
line 3209
;3208:			g_entities[self->client->ps.fd.forceGripEntityNum].inuse)
;3209:		{
line 3211
;3210:			
;3211:			g_entities[self->client->ps.fd.forceGripEntityNum].client->ps.forceGripChangeMovetype = PM_NORMAL;
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CNSTI4 1276
ADDP4
CNSTI4 0
ASGNI4
line 3212
;3212:		}
LABELV $1396
line 3214
;3213:
;3214:		if (self->client->ps.forceHandExtend == HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1401
line 3215
;3215:		{
line 3216
;3216:			self->client->ps.forceHandExtendTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
CNSTI4 0
ASGNI4
line 3217
;3217:		}
LABELV $1401
line 3219
;3218:
;3219:		self->client->ps.fd.forceGripEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
CNSTI4 1023
ASGNI4
line 3221
;3220:
;3221:		self->client->ps.powerups[PW_DISINT_4] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 380
ADDP4
CNSTI4 0
ASGNI4
line 3222
;3222:		break;
ADDRGP4 $1368
JUMPV
LABELV $1403
line 3224
;3223:	case FP_LIGHTNING:
;3224:		if ( self->client->ps.fd.forcePowerLevel[FP_LIGHTNING] < FORCE_LEVEL_2 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 960
ADDP4
INDIRI4
CNSTI4 2
GEI4 $1404
line 3225
;3225:		{//don't do it again for 3 seconds, minimum... FIXME: this should be automatic once regeneration is slower (normal)
line 3226
;3226:			self->client->ps.fd.forcePowerDebounce[FP_LIGHTNING] = level.time + 3000;//FIXME: define?
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 788
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 3227
;3227:		}
ADDRGP4 $1405
JUMPV
LABELV $1404
line 3229
;3228:		else
;3229:		{
line 3230
;3230:			self->client->ps.fd.forcePowerDebounce[FP_LIGHTNING] = level.time + 1500;//500; //500 is still too powerful
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 788
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 3231
;3231:		}
LABELV $1405
line 3232
;3232:		if (self->client->ps.forceHandExtend == /*HANDEXTEND_FORCEPUSH*/HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1408
line 3233
;3233:		{
line 3234
;3234:			self->client->ps.forceHandExtendTime = 0; //reset hand position
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
CNSTI4 0
ASGNI4
line 3235
;3235:		}
LABELV $1408
line 3237
;3236:
;3237:		self->client->ps.activeForcePass = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 0
ASGNI4
line 3238
;3238:		break;
ADDRGP4 $1368
JUMPV
LABELV $1410
line 3240
;3239:	case FP_RAGE:
;3240:		self->client->ps.fd.forceRageRecoveryTime = level.time + 10000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1160
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10000
ADDI4
ASGNI4
line 3241
;3241:		if (wasActive & (1 << FP_RAGE))
ADDRLP4 0
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1368
line 3242
;3242:		{
line 3243
;3243:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_3-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1200
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3244
;3244:		}
line 3245
;3245:		break;
ADDRGP4 $1368
JUMPV
LABELV $1414
line 3247
;3246:	case FP_ABSORB:
;3247:		if (wasActive & (1 << FP_ABSORB))
ADDRLP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $1368
line 3248
;3248:		{
line 3249
;3249:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_3-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1200
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3250
;3250:		}
line 3251
;3251:		break;
ADDRGP4 $1368
JUMPV
LABELV $1417
line 3253
;3252:	case FP_PROTECT:
;3253:		if (wasActive & (1 << FP_PROTECT))
ADDRLP4 0
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1368
line 3254
;3254:		{
line 3255
;3255:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_3-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1200
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3256
;3256:		}
line 3257
;3257:		break;
ADDRGP4 $1368
JUMPV
LABELV $1420
line 3259
;3258:	case FP_DRAIN:
;3259:		if ( self->client->ps.fd.forcePowerLevel[FP_DRAIN] < FORCE_LEVEL_2 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 2
GEI4 $1421
line 3260
;3260:		{//don't do it again for 3 seconds, minimum... FIXME: this should be automatic once regeneration is slower (normal)
line 3261
;3261:			self->client->ps.fd.forcePowerDebounce[FP_DRAIN] = level.time + 3000;//FIXME: define?
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 812
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 3262
;3262:		}
ADDRGP4 $1422
JUMPV
LABELV $1421
line 3264
;3263:		else
;3264:		{
line 3265
;3265:			self->client->ps.fd.forcePowerDebounce[FP_DRAIN] = level.time + 1500;//500; //500 is still too powerful
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 812
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1500
ADDI4
ASGNI4
line 3266
;3266:		}
LABELV $1422
line 3268
;3267:
;3268:		if (self->client->ps.forceHandExtend == /*HANDEXTEND_FORCEPUSH*/HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1425
line 3269
;3269:		{
line 3270
;3270:			self->client->ps.forceHandExtendTime = 0; //reset hand position
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
CNSTI4 0
ASGNI4
line 3271
;3271:		}
LABELV $1425
line 3273
;3272:
;3273:		self->client->ps.activeForcePass = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 624
ADDP4
CNSTI4 0
ASGNI4
line 3275
;3274:	default:
;3275:		break;
LABELV $1368
line 3277
;3276:	}
;3277:}
LABELV $1366
endproc WP_ForcePowerStop 32 12
export DoGripAction
proc DoGripAction 1272 32
line 3280
;3278:
;3279:void DoGripAction(gentity_t *self, forcePowers_t forcePower)
;3280:{
line 3282
;3281:	gentity_t *gripEnt;
;3282:	int gripLevel = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 3287
;3283:	trace_t tr;
;3284:	vec3_t a;
;3285:	vec3_t fwd, fwd_o, start_o, nvel;
;3286:
;3287:	self->client->dangerTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1748
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 3288
;3288:	self->client->ps.eFlags &= ~EF_INVULNERABLE;
ADDRLP4 1148
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 1148
INDIRP4
ADDRLP4 1148
INDIRP4
INDIRI4
CNSTI4 -67108865
BANDI4
ASGNI4
line 3289
;3289:	self->client->invulnerableTimer = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1564
ADDP4
CNSTI4 0
ASGNI4
line 3291
;3290:
;3291:	gripEnt = &g_entities[self->client->ps.fd.forceGripEntityNum];
ADDRLP4 0
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 3293
;3292:
;3293:	if (!gripEnt || !gripEnt->client || !gripEnt->inuse || gripEnt->health < 1 || !ForcePowerUsableOn(self, gripEnt, FP_GRIP))
ADDRLP4 1156
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 1156
INDIRU4
EQU4 $1435
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 1156
INDIRU4
EQU4 $1435
ADDRLP4 0
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1435
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1435
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 1160
ADDRGP4 ForcePowerUsableOn
CALLI4
ASGNI4
ADDRLP4 1160
INDIRI4
CNSTI4 0
NEI4 $1430
LABELV $1435
line 3294
;3294:	{
line 3295
;3295:		WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3296
;3296:		self->client->ps.fd.forceGripEntityNum = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
CNSTI4 1023
ASGNI4
line 3298
;3297:
;3298:		if (gripEnt && gripEnt->client && gripEnt->inuse)
ADDRLP4 1168
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 1168
INDIRU4
EQU4 $1428
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 1168
INDIRU4
EQU4 $1428
ADDRLP4 0
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1428
line 3299
;3299:		{
line 3300
;3300:			gripEnt->client->ps.forceGripChangeMovetype = PM_NORMAL;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1276
ADDP4
CNSTI4 0
ASGNI4
line 3301
;3301:		}
line 3302
;3302:		return;
ADDRGP4 $1428
JUMPV
LABELV $1430
line 3305
;3303:	}
;3304:
;3305:	VectorSubtract(gripEnt->client->ps.origin, self->client->ps.origin, a);
ADDRLP4 1164
CNSTI4 408
ASGNI4
ADDRLP4 1168
ADDRLP4 0
INDIRP4
ADDRLP4 1164
INDIRI4
ADDP4
ASGNP4
ADDRLP4 1172
CNSTI4 20
ASGNI4
ADDRLP4 1176
ADDRFP4 0
INDIRP4
ADDRLP4 1164
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRLP4 1168
INDIRP4
INDIRP4
ADDRLP4 1172
INDIRI4
ADDP4
INDIRF4
ADDRLP4 1176
INDIRP4
INDIRP4
ADDRLP4 1172
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1180
CNSTI4 24
ASGNI4
ADDRLP4 8+4
ADDRLP4 1168
INDIRP4
INDIRP4
ADDRLP4 1180
INDIRI4
ADDP4
INDIRF4
ADDRLP4 1176
INDIRP4
INDIRP4
ADDRLP4 1180
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1184
CNSTI4 408
ASGNI4
ADDRLP4 1188
CNSTI4 28
ASGNI4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
ADDRLP4 1184
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1188
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 1184
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1188
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3307
;3306:	
;3307:	trap_Trace(&tr, self->client->ps.origin, NULL, NULL, gripEnt->client->ps.origin, self->s.number, MASK_PLAYERSOLID);
ADDRLP4 20
ARGP4
ADDRLP4 1192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1196
CNSTI4 408
ASGNI4
ADDRLP4 1200
CNSTI4 20
ASGNI4
ADDRLP4 1192
INDIRP4
ADDRLP4 1196
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1200
INDIRI4
ADDP4
ARGP4
ADDRLP4 1204
CNSTP4 0
ASGNP4
ADDRLP4 1204
INDIRP4
ARGP4
ADDRLP4 1204
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 1196
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1200
INDIRI4
ADDP4
ARGP4
ADDRLP4 1192
INDIRP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 3309
;3308:
;3309:	gripLevel = WP_AbsorbConversion(gripEnt, gripEnt->client->ps.fd.forcePowerLevel[FP_ABSORB], self, FP_GRIP, self->client->ps.fd.forcePowerLevel[FP_GRIP], forcePowerNeeded[self->client->ps.fd.forcePowerLevel[FP_GRIP]][FP_GRIP]);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1212
CNSTI4 408
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 1212
INDIRI4
ADDP4
INDIRP4
CNSTI4 972
ADDP4
INDIRI4
ARGI4
ADDRLP4 1216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1216
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 1220
ADDRLP4 1216
INDIRP4
ADDRLP4 1212
INDIRI4
ADDP4
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1220
INDIRI4
ARGI4
CNSTI4 72
ADDRLP4 1220
INDIRI4
MULI4
ADDRGP4 forcePowerNeeded+24
ADDP4
INDIRI4
ARGI4
ADDRLP4 1224
ADDRGP4 WP_AbsorbConversion
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1224
INDIRI4
ASGNI4
line 3311
;3310:
;3311:	if (gripLevel == -1)
ADDRLP4 4
INDIRI4
CNSTI4 -1
NEI4 $1441
line 3312
;3312:	{
line 3313
;3313:		gripLevel = self->client->ps.fd.forcePowerLevel[FP_GRIP];
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
ASGNI4
line 3314
;3314:	}
LABELV $1441
line 3316
;3315:
;3316:	if (!gripLevel)
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1443
line 3317
;3317:	{
line 3318
;3318:		WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3319
;3319:		return;
ADDRGP4 $1428
JUMPV
LABELV $1443
line 3322
;3320:	}
;3321:
;3322:	if (VectorLength(a) > MAX_GRIP_DISTANCE)
ADDRLP4 8
ARGP4
ADDRLP4 1228
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 1228
INDIRF4
CNSTF4 1132462080
LEF4 $1445
line 3323
;3323:	{
line 3324
;3324:		WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3325
;3325:		return;
ADDRGP4 $1428
JUMPV
LABELV $1445
line 3328
;3326:	}
;3327:
;3328:	if ( !InFront( gripEnt->client->ps.origin, self->client->ps.origin, self->client->ps.viewangles, 0.9f ) &&
ADDRLP4 1232
CNSTI4 408
ASGNI4
ADDRLP4 1236
CNSTI4 20
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 1232
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1236
INDIRI4
ADDP4
ARGP4
ADDRLP4 1240
ADDRFP4 0
INDIRP4
ADDRLP4 1232
INDIRI4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1240
INDIRP4
ADDRLP4 1236
INDIRI4
ADDP4
ARGP4
ADDRLP4 1240
INDIRP4
CNSTI4 156
ADDP4
ARGP4
CNSTF4 1063675494
ARGF4
ADDRLP4 1244
ADDRGP4 InFront
CALLI4
ASGNI4
ADDRLP4 1244
INDIRI4
CNSTI4 0
NEI4 $1447
ADDRLP4 4
INDIRI4
CNSTI4 3
GEI4 $1447
line 3330
;3329:		gripLevel < FORCE_LEVEL_3)
;3330:	{
line 3331
;3331:		WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3332
;3332:		return;
ADDRGP4 $1428
JUMPV
LABELV $1447
line 3335
;3333:	}
;3334:
;3335:	if (tr.fraction != 1 &&
ADDRLP4 20+8
INDIRF4
CNSTF4 1065353216
EQF4 $1449
ADDRLP4 20+52
INDIRI4
ADDRLP4 0
INDIRP4
INDIRI4
EQI4 $1449
ADDRLP4 4
INDIRI4
CNSTI4 3
GEI4 $1449
line 3338
;3336:		tr.entityNum != gripEnt->s.number &&
;3337:		gripLevel < FORCE_LEVEL_3)
;3338:	{
line 3339
;3339:		WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3340
;3340:		return;
ADDRGP4 $1428
JUMPV
LABELV $1449
line 3343
;3341:	}
;3342:
;3343:	if (self->client->ps.fd.forcePowerDebounce[FP_GRIP] < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 784
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1453
line 3344
;3344:	{ //2 damage per second while choking, resulting in 10 damage total (not including The Squeeze<tm>)
line 3345
;3345:		self->client->ps.fd.forcePowerDebounce[FP_GRIP] = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 3346
;3346:		G_Damage(gripEnt, self, self, NULL, NULL, 2, DAMAGE_NO_ARMOR, MOD_FORCE_DARK);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1248
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1248
INDIRP4
ARGP4
ADDRLP4 1248
INDIRP4
ARGP4
ADDRLP4 1252
CNSTP4 0
ASGNP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1256
CNSTI4 2
ASGNI4
ADDRLP4 1256
INDIRI4
ARGI4
ADDRLP4 1256
INDIRI4
ARGI4
CNSTI4 27
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 3347
;3347:	}
LABELV $1453
line 3349
;3348:
;3349:	if (gripLevel == FORCE_LEVEL_1)
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $1457
line 3350
;3350:	{
line 3351
;3351:		gripEnt->client->ps.fd.forceGripBeingGripped = level.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ASGNF4
line 3353
;3352:		
;3353:		if ((level.time - gripEnt->client->ps.fd.forceGripStarted) > 5000)
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1167867904
LEF4 $1428
line 3354
;3354:		{
line 3355
;3355:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3356
;3356:		}
line 3357
;3357:		return;
ADDRGP4 $1428
JUMPV
LABELV $1457
line 3360
;3358:	}
;3359:
;3360:	if (gripLevel == FORCE_LEVEL_2)
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $1463
line 3361
;3361:	{
line 3362
;3362:		gripEnt->client->ps.fd.forceGripBeingGripped = level.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ASGNF4
line 3364
;3363:
;3364:		if (gripEnt->client->ps.forceGripMoveInterval < level.time)
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1272
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1466
line 3365
;3365:		{
line 3366
;3366:			gripEnt->client->ps.velocity[2] = 30;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1106247680
ASGNF4
line 3368
;3367:
;3368:			gripEnt->client->ps.forceGripMoveInterval = level.time + 300; //only update velocity every 300ms, so as to avoid heavy bandwidth usage
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1272
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 3369
;3369:		}
LABELV $1466
line 3371
;3370:
;3371:		gripEnt->client->ps.otherKiller = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 748
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 3372
;3372:		gripEnt->client->ps.otherKillerTime = level.time + 5000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 3373
;3373:		gripEnt->client->ps.otherKillerDebounceTime = level.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 756
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 3375
;3374:
;3375:		gripEnt->client->ps.forceGripChangeMovetype = PM_FLOAT;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1276
ADDP4
CNSTI4 1
ASGNI4
line 3377
;3376:
;3377:		if ((level.time - gripEnt->client->ps.fd.forceGripStarted) > 3000 && !self->client->ps.fd.forceGripDamageDebounceTime)
ADDRLP4 1248
CNSTI4 408
ASGNI4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
ADDRLP4 1248
INDIRI4
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1161527296
LEF4 $1472
ADDRFP4 0
INDIRP4
ADDRLP4 1248
INDIRI4
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1472
line 3378
;3378:		{ //if we managed to lift him into the air for 2 seconds, give him a crack
line 3379
;3379:			self->client->ps.fd.forceGripDamageDebounceTime = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
CNSTI4 1
ASGNI4
line 3380
;3380:			G_Damage(gripEnt, self, self, NULL, NULL, 20, DAMAGE_NO_ARMOR, MOD_FORCE_DARK);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1256
CNSTP4 0
ASGNP4
ADDRLP4 1256
INDIRP4
ARGP4
ADDRLP4 1256
INDIRP4
ARGP4
CNSTI4 20
ARGI4
CNSTI4 2
ARGI4
CNSTI4 27
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 3382
;3381:			//NOTE: Must play custom sounds on the actual entity. Don't use G_Sound (it creates a temp entity for the sound)
;3382:			G_EntitySound( gripEnt, CHAN_VOICE, G_SoundIndex(va( "*choke%d.wav", Q_irand( 1, 3 ) )) );
CNSTI4 1
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 1260
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRGP4 $1475
ARGP4
ADDRLP4 1260
INDIRI4
ARGI4
ADDRLP4 1264
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 1264
INDIRP4
ARGP4
ADDRLP4 1268
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 1268
INDIRI4
ARGI4
ADDRGP4 G_EntitySound
CALLV
pop
line 3384
;3383:
;3384:			gripEnt->client->ps.forceHandExtend = HANDEXTEND_CHOKE;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 5
ASGNI4
line 3385
;3385:			gripEnt->client->ps.forceHandExtendTime = level.time + 2000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 3387
;3386:
;3387:			if (gripEnt->client->ps.fd.forcePowersActive & (1 << FP_GRIP))
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1428
line 3388
;3388:			{ //choking, so don't let him keep gripping himself
line 3389
;3389:				WP_ForcePowerStop(gripEnt, FP_GRIP);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3390
;3390:			}
line 3391
;3391:		}
ADDRGP4 $1428
JUMPV
LABELV $1472
line 3392
;3392:		else if ((level.time - gripEnt->client->ps.fd.forceGripStarted) > 4000)
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1165623296
LEF4 $1428
line 3393
;3393:		{
line 3394
;3394:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3395
;3395:		}
line 3396
;3396:		return;
ADDRGP4 $1428
JUMPV
LABELV $1463
line 3399
;3397:	}
;3398:
;3399:	if (gripLevel == FORCE_LEVEL_3)
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $1482
line 3400
;3400:	{
line 3401
;3401:		gripEnt->client->ps.fd.forceGripBeingGripped = level.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ASGNF4
line 3403
;3402:
;3403:		gripEnt->client->ps.otherKiller = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 748
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 3404
;3404:		gripEnt->client->ps.otherKillerTime = level.time + 5000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 752
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 3405
;3405:		gripEnt->client->ps.otherKillerDebounceTime = level.time + 100;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 756
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 3407
;3406:
;3407:		gripEnt->client->ps.forceGripChangeMovetype = PM_FLOAT;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1276
ADDP4
CNSTI4 1
ASGNI4
line 3409
;3408:
;3409:		if (gripEnt->client->ps.forceGripMoveInterval < level.time)
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1272
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1487
line 3410
;3410:		{
line 3411
;3411:			float nvLen = 0;
ADDRLP4 1248
CNSTF4 0
ASGNF4
line 3413
;3412:
;3413:			VectorCopy(gripEnt->client->ps.origin, start_o);
ADDRLP4 1136
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 3414
;3414:			AngleVectors(self->client->ps.viewangles, fwd, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 1124
ARGP4
ADDRLP4 1252
CNSTP4 0
ASGNP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3415
;3415:			fwd_o[0] = self->client->ps.origin[0] + fwd[0]*128;
ADDRLP4 1112
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
CNSTF4 1124073472
ADDRLP4 1124
INDIRF4
MULF4
ADDF4
ASGNF4
line 3416
;3416:			fwd_o[1] = self->client->ps.origin[1] + fwd[1]*128;
ADDRLP4 1112+4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 1124073472
ADDRLP4 1124+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3417
;3417:			fwd_o[2] = self->client->ps.origin[2] + fwd[2]*128;
ADDRLP4 1112+8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1124073472
ADDRLP4 1124+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3418
;3418:			fwd_o[2] += 16;
ADDRLP4 1112+8
ADDRLP4 1112+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 3419
;3419:			VectorSubtract(fwd_o, start_o, nvel);
ADDRLP4 1100
ADDRLP4 1112
INDIRF4
ADDRLP4 1136
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1100+4
ADDRLP4 1112+4
INDIRF4
ADDRLP4 1136+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1100+8
ADDRLP4 1112+8
INDIRF4
ADDRLP4 1136+8
INDIRF4
SUBF4
ASGNF4
line 3421
;3420:
;3421:			nvLen = VectorLength(nvel);
ADDRLP4 1100
ARGP4
ADDRLP4 1256
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 1248
ADDRLP4 1256
INDIRF4
ASGNF4
line 3423
;3422:
;3423:			if (nvLen < 16)
ADDRLP4 1248
INDIRF4
CNSTF4 1098907648
GEF4 $1501
line 3424
;3424:			{ //within x units of desired spot
line 3425
;3425:				VectorNormalize(nvel);
ADDRLP4 1100
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3426
;3426:				gripEnt->client->ps.velocity[0] = nvel[0]*8;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1090519040
ADDRLP4 1100
INDIRF4
MULF4
ASGNF4
line 3427
;3427:				gripEnt->client->ps.velocity[1] = nvel[1]*8;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1090519040
ADDRLP4 1100+4
INDIRF4
MULF4
ASGNF4
line 3428
;3428:				gripEnt->client->ps.velocity[2] = nvel[2]*8;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1090519040
ADDRLP4 1100+8
INDIRF4
MULF4
ASGNF4
line 3429
;3429:			}
ADDRGP4 $1502
JUMPV
LABELV $1501
line 3430
;3430:			else if (nvLen < 64)
ADDRLP4 1248
INDIRF4
CNSTF4 1115684864
GEF4 $1505
line 3431
;3431:			{
line 3432
;3432:				VectorNormalize(nvel);
ADDRLP4 1100
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3433
;3433:				gripEnt->client->ps.velocity[0] = nvel[0]*128;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1124073472
ADDRLP4 1100
INDIRF4
MULF4
ASGNF4
line 3434
;3434:				gripEnt->client->ps.velocity[1] = nvel[1]*128;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1124073472
ADDRLP4 1100+4
INDIRF4
MULF4
ASGNF4
line 3435
;3435:				gripEnt->client->ps.velocity[2] = nvel[2]*128;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1124073472
ADDRLP4 1100+8
INDIRF4
MULF4
ASGNF4
line 3436
;3436:			}
ADDRGP4 $1506
JUMPV
LABELV $1505
line 3437
;3437:			else if (nvLen < 128)
ADDRLP4 1248
INDIRF4
CNSTF4 1124073472
GEF4 $1509
line 3438
;3438:			{
line 3439
;3439:				VectorNormalize(nvel);
ADDRLP4 1100
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3440
;3440:				gripEnt->client->ps.velocity[0] = nvel[0]*256;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1132462080
ADDRLP4 1100
INDIRF4
MULF4
ASGNF4
line 3441
;3441:				gripEnt->client->ps.velocity[1] = nvel[1]*256;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1132462080
ADDRLP4 1100+4
INDIRF4
MULF4
ASGNF4
line 3442
;3442:				gripEnt->client->ps.velocity[2] = nvel[2]*256;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1132462080
ADDRLP4 1100+8
INDIRF4
MULF4
ASGNF4
line 3443
;3443:			}
ADDRGP4 $1510
JUMPV
LABELV $1509
line 3444
;3444:			else if (nvLen < 200)
ADDRLP4 1248
INDIRF4
CNSTF4 1128792064
GEF4 $1513
line 3445
;3445:			{
line 3446
;3446:				VectorNormalize(nvel);
ADDRLP4 1100
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3447
;3447:				gripEnt->client->ps.velocity[0] = nvel[0]*512;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1140850688
ADDRLP4 1100
INDIRF4
MULF4
ASGNF4
line 3448
;3448:				gripEnt->client->ps.velocity[1] = nvel[1]*512;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1140850688
ADDRLP4 1100+4
INDIRF4
MULF4
ASGNF4
line 3449
;3449:				gripEnt->client->ps.velocity[2] = nvel[2]*512;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1140850688
ADDRLP4 1100+8
INDIRF4
MULF4
ASGNF4
line 3450
;3450:			}
ADDRGP4 $1514
JUMPV
LABELV $1513
line 3452
;3451:			else
;3452:			{
line 3453
;3453:				VectorNormalize(nvel);
ADDRLP4 1100
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3454
;3454:				gripEnt->client->ps.velocity[0] = nvel[0]*700;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1143930880
ADDRLP4 1100
INDIRF4
MULF4
ASGNF4
line 3455
;3455:				gripEnt->client->ps.velocity[1] = nvel[1]*700;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1143930880
ADDRLP4 1100+4
INDIRF4
MULF4
ASGNF4
line 3456
;3456:				gripEnt->client->ps.velocity[2] = nvel[2]*700;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1143930880
ADDRLP4 1100+8
INDIRF4
MULF4
ASGNF4
line 3457
;3457:			}
LABELV $1514
LABELV $1510
LABELV $1506
LABELV $1502
line 3459
;3458:
;3459:			gripEnt->client->ps.forceGripMoveInterval = level.time + 300; //only update velocity every 300ms, so as to avoid heavy bandwidth usage
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1272
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 3460
;3460:		}
LABELV $1487
line 3462
;3461:
;3462:		if ((level.time - gripEnt->client->ps.fd.forceGripStarted) > 3000 && !self->client->ps.fd.forceGripDamageDebounceTime)
ADDRLP4 1248
CNSTI4 408
ASGNI4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
ADDRLP4 1248
INDIRI4
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1161527296
LEF4 $1520
ADDRFP4 0
INDIRP4
ADDRLP4 1248
INDIRI4
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1520
line 3463
;3463:		{ //if we managed to lift him into the air for 2 seconds, give him a crack
line 3464
;3464:			self->client->ps.fd.forceGripDamageDebounceTime = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1100
ADDP4
CNSTI4 1
ASGNI4
line 3465
;3465:			G_Damage(gripEnt, self, self, NULL, NULL, 40, DAMAGE_NO_ARMOR, MOD_FORCE_DARK);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 1252
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1252
INDIRP4
ARGP4
ADDRLP4 1256
CNSTP4 0
ASGNP4
ADDRLP4 1256
INDIRP4
ARGP4
ADDRLP4 1256
INDIRP4
ARGP4
CNSTI4 40
ARGI4
CNSTI4 2
ARGI4
CNSTI4 27
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 3467
;3466:			//NOTE: Must play custom sounds on the actual entity. Don't use G_Sound (it creates a temp entity for the sound)
;3467:			G_EntitySound( gripEnt, CHAN_VOICE, G_SoundIndex(va( "*choke%d.wav", Q_irand( 1, 3 ) )) );
CNSTI4 1
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 1260
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRGP4 $1475
ARGP4
ADDRLP4 1260
INDIRI4
ARGI4
ADDRLP4 1264
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 1264
INDIRP4
ARGP4
ADDRLP4 1268
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 1268
INDIRI4
ARGI4
ADDRGP4 G_EntitySound
CALLV
pop
line 3469
;3468:
;3469:			gripEnt->client->ps.forceHandExtend = HANDEXTEND_CHOKE;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 5
ASGNI4
line 3470
;3470:			gripEnt->client->ps.forceHandExtendTime = level.time + 2000;
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 3472
;3471:
;3472:			if (gripEnt->client->ps.fd.forcePowersActive & (1 << FP_GRIP))
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1428
line 3473
;3473:			{ //choking, so don't let him keep gripping himself
line 3474
;3474:				WP_ForcePowerStop(gripEnt, FP_GRIP);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3475
;3475:			}
line 3476
;3476:		}
ADDRGP4 $1428
JUMPV
LABELV $1520
line 3477
;3477:		else if ((level.time - gripEnt->client->ps.fd.forceGripStarted) > 4000)
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1120
ADDP4
INDIRF4
SUBF4
CNSTF4 1165623296
LEF4 $1428
line 3478
;3478:		{
line 3479
;3479:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3480
;3480:		}
line 3481
;3481:		return;
LABELV $1482
line 3483
;3482:	}
;3483:}
LABELV $1428
endproc DoGripAction 1272 32
export G_IsMindTricked
proc G_IsMindTricked 24 0
line 3486
;3484:
;3485:qboolean G_IsMindTricked(forcedata_t *fd, int client)
;3486:{
line 3489
;3487:	int checkIn;
;3488:	int trickIndex1, trickIndex2, trickIndex3, trickIndex4;
;3489:	int sub = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3491
;3490:
;3491:	if (!fd)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1530
line 3492
;3492:	{
line 3493
;3493:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1529
JUMPV
LABELV $1530
line 3496
;3494:	}
;3495:
;3496:	trickIndex1 = fd->forceMindtrickTargetIndex;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
ASGNI4
line 3497
;3497:	trickIndex2 = fd->forceMindtrickTargetIndex2;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
ASGNI4
line 3498
;3498:	trickIndex3 = fd->forceMindtrickTargetIndex3;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
ASGNI4
line 3499
;3499:	trickIndex4 = fd->forceMindtrickTargetIndex4;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ASGNI4
line 3501
;3500:
;3501:	if (client > 47)
ADDRFP4 4
INDIRI4
CNSTI4 47
LEI4 $1532
line 3502
;3502:	{
line 3503
;3503:		checkIn = trickIndex4;
ADDRLP4 4
ADDRLP4 8
INDIRI4
ASGNI4
line 3504
;3504:		sub = 48;
ADDRLP4 0
CNSTI4 48
ASGNI4
line 3505
;3505:	}
ADDRGP4 $1533
JUMPV
LABELV $1532
line 3506
;3506:	else if (client > 31)
ADDRFP4 4
INDIRI4
CNSTI4 31
LEI4 $1534
line 3507
;3507:	{
line 3508
;3508:		checkIn = trickIndex3;
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 3509
;3509:		sub = 32;
ADDRLP4 0
CNSTI4 32
ASGNI4
line 3510
;3510:	}
ADDRGP4 $1535
JUMPV
LABELV $1534
line 3511
;3511:	else if (client > 15)
ADDRFP4 4
INDIRI4
CNSTI4 15
LEI4 $1536
line 3512
;3512:	{
line 3513
;3513:		checkIn = trickIndex2;
ADDRLP4 4
ADDRLP4 20
INDIRI4
ASGNI4
line 3514
;3514:		sub = 16;
ADDRLP4 0
CNSTI4 16
ASGNI4
line 3515
;3515:	}
ADDRGP4 $1537
JUMPV
LABELV $1536
line 3517
;3516:	else
;3517:	{
line 3518
;3518:		checkIn = trickIndex1;
ADDRLP4 4
ADDRLP4 16
INDIRI4
ASGNI4
line 3519
;3519:	}
LABELV $1537
LABELV $1535
LABELV $1533
line 3521
;3520:
;3521:	if (checkIn & (1 << (client-sub)))
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1538
line 3522
;3522:	{
line 3523
;3523:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $1529
JUMPV
LABELV $1538
line 3526
;3524:	}
;3525:	
;3526:	return qfalse;
CNSTI4 0
RETI4
LABELV $1529
endproc G_IsMindTricked 24 0
proc RemoveTrickedEnt 4 0
line 3530
;3527:}
;3528:
;3529:static void RemoveTrickedEnt(forcedata_t *fd, int client)
;3530:{
line 3531
;3531:	if (!fd)
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1541
line 3532
;3532:	{
line 3533
;3533:		return;
ADDRGP4 $1540
JUMPV
LABELV $1541
line 3536
;3534:	}
;3535:
;3536:	if (client > 47)
ADDRFP4 4
INDIRI4
CNSTI4 47
LEI4 $1543
line 3537
;3537:	{
line 3538
;3538:		fd->forceMindtrickTargetIndex4 &= ~(1 << (client-48));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 396
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 48
SUBI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 3539
;3539:	}
ADDRGP4 $1544
JUMPV
LABELV $1543
line 3540
;3540:	else if (client > 31)
ADDRFP4 4
INDIRI4
CNSTI4 31
LEI4 $1545
line 3541
;3541:	{
line 3542
;3542:		fd->forceMindtrickTargetIndex3 &= ~(1 << (client-32));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 392
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 32
SUBI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 3543
;3543:	}
ADDRGP4 $1546
JUMPV
LABELV $1545
line 3544
;3544:	else if (client > 15)
ADDRFP4 4
INDIRI4
CNSTI4 15
LEI4 $1547
line 3545
;3545:	{
line 3546
;3546:		fd->forceMindtrickTargetIndex2 &= ~(1 << (client-16));
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 388
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
CNSTI4 16
SUBI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 3547
;3547:	}
ADDRGP4 $1548
JUMPV
LABELV $1547
line 3549
;3548:	else
;3549:	{
line 3550
;3550:		fd->forceMindtrickTargetIndex &= ~(1 << client);
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 384
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 3551
;3551:	}
LABELV $1548
LABELV $1546
LABELV $1544
line 3552
;3552:}
LABELV $1540
endproc RemoveTrickedEnt 4 0
proc WP_UpdateMindtrickEnts 56 12
line 3558
;3553:
;3554:extern int g_LastFrameTime;
;3555:extern int g_TimeSinceLastFrame;
;3556:
;3557:static void WP_UpdateMindtrickEnts(gentity_t *self)
;3558:{
line 3559
;3559:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1551
JUMPV
LABELV $1550
line 3562
;3560:
;3561:	while (i < MAX_CLIENTS)
;3562:	{
line 3563
;3563:		if (G_IsMindTricked(&self->client->ps.fd, i))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 G_IsMindTricked
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1553
line 3564
;3564:		{
line 3565
;3565:			gentity_t *ent = &g_entities[i];
ADDRLP4 8
CNSTI4 828
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 3567
;3566:
;3567:			if ( !ent || !ent->client || !ent->inuse || ent->health < 1 ||
ADDRLP4 16
CNSTU4 0
ASGNU4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $1560
ADDRLP4 20
ADDRLP4 8
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $1560
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $1560
ADDRLP4 8
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1560
ADDRLP4 20
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
ADDRLP4 24
INDIRI4
EQI4 $1555
LABELV $1560
line 3569
;3568:				(ent->client->ps.fd.forcePowersActive & (1 << FP_SEE)) )
;3569:			{
line 3570
;3570:				RemoveTrickedEnt(&self->client->ps.fd, i);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 RemoveTrickedEnt
CALLV
pop
line 3571
;3571:			}
ADDRGP4 $1556
JUMPV
LABELV $1555
line 3572
;3572:			else if ((level.time - self->client->dangerTime) < g_TimeSinceLastFrame*4)
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1748
ADDP4
INDIRI4
SUBI4
ADDRGP4 g_TimeSinceLastFrame
INDIRI4
CNSTI4 2
LSHI4
GEI4 $1561
line 3573
;3573:			{ //Untrick this entity if the tricker (self) fires while in his fov
line 3576
;3574:				if (/*InFront(self->client->ps.origin, ent->client->ps.origin, ent->client->ps.viewangles, 0.8f ) &&*/
;3575:					//NOTE: No longer has to be in fov, just in visible area of PVS
;3576:					trap_InPVS(ent->client->ps.origin, self->client->ps.origin) &&
ADDRLP4 28
CNSTI4 408
ASGNI4
ADDRLP4 32
CNSTI4 20
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 trap_InPVS
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1562
ADDRLP4 44
CNSTI4 408
ASGNI4
ADDRLP4 48
CNSTI4 20
ASGNI4
ADDRLP4 8
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
ARGP4
ADDRLP4 8
INDIRP4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 OrgVisible
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $1562
line 3578
;3577:					OrgVisible(ent->client->ps.origin, self->client->ps.origin, ent->s.number))
;3578:				{
line 3579
;3579:					RemoveTrickedEnt(&self->client->ps.fd, i);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 RemoveTrickedEnt
CALLV
pop
line 3580
;3580:				}
line 3581
;3581:			}
ADDRGP4 $1562
JUMPV
LABELV $1561
line 3582
;3582:			else if (BG_HasYsalamiri(g_gametype.integer, &ent->client->ps))
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $1566
line 3583
;3583:			{
line 3584
;3584:				RemoveTrickedEnt(&self->client->ps.fd, i);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 RemoveTrickedEnt
CALLV
pop
line 3585
;3585:			}
LABELV $1566
LABELV $1562
LABELV $1556
line 3586
;3586:		}
LABELV $1553
line 3588
;3587:
;3588:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3589
;3589:	}
LABELV $1551
line 3561
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $1550
line 3591
;3590:
;3591:	if (!self->client->ps.fd.forceMindtrickTargetIndex &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 1144
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1569
ADDRLP4 4
INDIRP4
CNSTI4 1148
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1569
ADDRLP4 4
INDIRP4
CNSTI4 1152
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1569
ADDRLP4 4
INDIRP4
CNSTI4 1156
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1569
line 3595
;3592:		!self->client->ps.fd.forceMindtrickTargetIndex2 &&
;3593:		!self->client->ps.fd.forceMindtrickTargetIndex3 &&
;3594:		!self->client->ps.fd.forceMindtrickTargetIndex4)
;3595:	{ //everyone who we had tricked is no longer tricked, so stop the power
line 3596
;3596:		WP_ForcePowerStop(self, FP_TELEPATHY);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3597
;3597:	}
ADDRGP4 $1570
JUMPV
LABELV $1569
line 3598
;3598:	else if (self->client->ps.powerups[PW_REDFLAG] ||
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 360
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1573
ADDRLP4 12
INDIRP4
CNSTI4 364
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1571
LABELV $1573
line 3600
;3599:		self->client->ps.powerups[PW_BLUEFLAG])
;3600:	{
line 3601
;3601:		WP_ForcePowerStop(self, FP_TELEPATHY);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3602
;3602:	}
LABELV $1571
LABELV $1570
line 3603
;3603:}
LABELV $1549
endproc WP_UpdateMindtrickEnts 56 12
proc WP_ForcePowerRun 64 12
line 3606
;3604:
;3605:static void WP_ForcePowerRun( gentity_t *self, forcePowers_t forcePower, usercmd_t *cmd )
;3606:{
line 3609
;3607:	extern usercmd_t	ucmd;
;3608:
;3609:	switch( (int)forcePower )
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $1576
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $1576
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1661
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1661
address $1578
address $1604
address $1576
address $1576
address $1576
address $1650
address $1601
address $1636
address $1607
address $1654
address $1654
address $1576
address $1576
address $1622
address $1576
address $1576
address $1576
address $1576
code
line 3610
;3610:	{
LABELV $1578
line 3612
;3611:	case FP_HEAL:
;3612:		if (self->client->ps.fd.forcePowerLevel[FP_HEAL] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1579
line 3613
;3613:		{
line 3614
;3614:			if (self->client->ps.velocity[0] || self->client->ps.velocity[1] || self->client->ps.velocity[2])
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
NEF4 $1584
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
NEF4 $1584
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
EQF4 $1581
LABELV $1584
line 3615
;3615:			{
line 3616
;3616:				WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3617
;3617:				break;
ADDRGP4 $1576
JUMPV
LABELV $1581
line 3619
;3618:			}
;3619:		}
LABELV $1579
line 3621
;3620:
;3621:		if (self->health < 1 || self->client->ps.stats[STAT_HEALTH] < 1)
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $1587
ADDRLP4 8
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
GEI4 $1585
LABELV $1587
line 3622
;3622:		{
line 3623
;3623:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3624
;3624:			break;
ADDRGP4 $1576
JUMPV
LABELV $1585
line 3627
;3625:		}
;3626:
;3627:		if (self->client->ps.fd.forceHealTime > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1136
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $1588
line 3628
;3628:		{
line 3629
;3629:			break;
ADDRGP4 $1576
JUMPV
LABELV $1588
line 3631
;3630:		}
;3631:		if ( self->health > self->client->ps.stats[STAT_MAX_HEALTH])
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $1591
line 3632
;3632:		{ //rww - we might start out over max_health and we don't want force heal taking us down to 100 or whatever max_health is
line 3633
;3633:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3634
;3634:			break;
ADDRGP4 $1576
JUMPV
LABELV $1591
line 3636
;3635:		}
;3636:		self->client->ps.fd.forceHealTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1136
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 3637
;3637:		self->health++;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3638
;3638:		self->client->ps.fd.forceHealAmount++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1140
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3640
;3639:		//BG_ForcePowerDrain( &self->client->ps, forcePower, 0 );
;3640:		if ( self->health > self->client->ps.stats[STAT_MAX_HEALTH])	// Past max health
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LEI4 $1594
line 3641
;3641:		{
line 3642
;3642:			self->health = self->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
line 3643
;3643:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3644
;3644:		}
LABELV $1594
line 3646
;3645:
;3646:		if ( (self->client->ps.fd.forcePowerLevel[FP_HEAL] == FORCE_LEVEL_1 && self->client->ps.fd.forceHealAmount >= 25) ||
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1599
ADDRLP4 32
INDIRP4
CNSTI4 1140
ADDP4
INDIRI4
CNSTI4 25
GEI4 $1598
LABELV $1599
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1576
ADDRLP4 36
INDIRP4
CNSTI4 1140
ADDP4
INDIRI4
CNSTI4 33
LTI4 $1576
LABELV $1598
line 3648
;3647:			(self->client->ps.fd.forcePowerLevel[FP_HEAL] == FORCE_LEVEL_2 && self->client->ps.fd.forceHealAmount >= 33))
;3648:		{
line 3649
;3649:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3650
;3650:		}
line 3651
;3651:		break;
ADDRGP4 $1576
JUMPV
line 3654
;3652:	case FP_SPEED:
;3653:		//This is handled in PM_WalkMove and PM_StepSlideMove
;3654:		break;
LABELV $1601
line 3656
;3655:	case FP_GRIP:
;3656:		if (self->client->ps.forceHandExtend != HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1602
line 3657
;3657:		{
line 3658
;3658:			WP_ForcePowerStop(self, FP_GRIP);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3659
;3659:			break;
ADDRGP4 $1576
JUMPV
LABELV $1602
line 3661
;3660:		}
;3661:		DoGripAction(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 DoGripAction
CALLV
pop
line 3662
;3662:		break;
ADDRGP4 $1576
JUMPV
LABELV $1604
line 3664
;3663:	case FP_LEVITATION:
;3664:		if ( self->client->ps.groundEntityNum != ENTITYNUM_NONE && !self->client->ps.fd.forceJumpZStart )
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $1576
ADDRLP4 40
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
CNSTF4 0
NEF4 $1576
line 3665
;3665:		{//done with jump
line 3666
;3666:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3667
;3667:		}
line 3669
;3668:		else
;3669:		{
line 3685
;3670:			/*
;3671:			if (self->client->ps.fd.forcePowerDebounce[FP_LEVITATION] < level.time)
;3672:			{
;3673:				BG_ForcePowerDrain( &self->client->ps, forcePower, 5 );
;3674:				if (self->client->ps.fd.forcePowerLevel[FP_LEVITATION] >= FORCE_LEVEL_2)
;3675:				{
;3676:					self->client->ps.fd.forcePowerDebounce[FP_LEVITATION] = level.time + 300;
;3677:				}
;3678:				else
;3679:				{
;3680:					self->client->ps.fd.forcePowerDebounce[FP_LEVITATION] = level.time + 200;
;3681:				}
;3682:			}
;3683:			*/
;3684:			//NOTE: Now handled in bg code for prediction
;3685:		}
line 3686
;3686:		break;
ADDRGP4 $1576
JUMPV
LABELV $1607
line 3688
;3687:	case FP_RAGE:
;3688:		if (self->health < 1)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1608
line 3689
;3689:		{
line 3690
;3690:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3691
;3691:			break;
ADDRGP4 $1576
JUMPV
LABELV $1608
line 3693
;3692:		}
;3693:		if (self->client->ps.forceRageDrainTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1244
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1610
line 3694
;3694:		{
line 3695
;3695:			int addTime = 400;
ADDRLP4 44
CNSTI4 400
ASGNI4
line 3697
;3696:
;3697:			self->health -= 2;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 2
SUBI4
ASGNI4
line 3699
;3698:
;3699:			if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1613
line 3700
;3700:			{
line 3701
;3701:				addTime = 150;
ADDRLP4 44
CNSTI4 150
ASGNI4
line 3702
;3702:			}
ADDRGP4 $1614
JUMPV
LABELV $1613
line 3703
;3703:			else if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_2)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1615
line 3704
;3704:			{
line 3705
;3705:				addTime = 300;
ADDRLP4 44
CNSTI4 300
ASGNI4
line 3706
;3706:			}
ADDRGP4 $1616
JUMPV
LABELV $1615
line 3707
;3707:			else if (self->client->ps.fd.forcePowerLevel[FP_RAGE] == FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 964
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1617
line 3708
;3708:			{
line 3709
;3709:				addTime = 450;
ADDRLP4 44
CNSTI4 450
ASGNI4
line 3710
;3710:			}
LABELV $1617
LABELV $1616
LABELV $1614
line 3711
;3711:			self->client->ps.forceRageDrainTime = level.time + addTime;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1244
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 44
INDIRI4
ADDI4
ASGNI4
line 3712
;3712:		}
LABELV $1610
line 3714
;3713:
;3714:		if (self->health < 1)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1620
line 3715
;3715:		{
line 3716
;3716:			self->health = 1;
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
CNSTI4 1
ASGNI4
line 3717
;3717:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3718
;3718:		}
LABELV $1620
line 3720
;3719:
;3720:		self->client->ps.stats[STAT_HEALTH] = self->health;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
ASGNI4
line 3721
;3721:		break;
ADDRGP4 $1576
JUMPV
LABELV $1622
line 3723
;3722:	case FP_DRAIN:
;3723:		if (self->client->ps.forceHandExtend != /*HANDEXTEND_FORCEPUSH*/HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1623
line 3724
;3724:		{
line 3725
;3725:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3726
;3726:			break;
ADDRGP4 $1576
JUMPV
LABELV $1623
line 3729
;3727:		}
;3728:
;3729:		if ( self->client->ps.fd.forcePowerLevel[FP_DRAIN] > FORCE_LEVEL_1 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1625
line 3730
;3730:		{//higher than level 1
line 3731
;3731:			if ( (cmd->buttons & BUTTON_FORCE_DRAIN) || ((cmd->buttons & BUTTON_FORCEPOWER) && self->client->ps.fd.forcePowerSelected == FP_DRAIN) )
ADDRLP4 48
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 2048
BANDI4
ADDRLP4 52
INDIRI4
NEI4 $1629
ADDRLP4 48
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 52
INDIRI4
EQI4 $1627
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 13
NEI4 $1627
LABELV $1629
line 3732
;3732:			{//holding it keeps it going
line 3733
;3733:				self->client->ps.fd.forcePowerDuration[FP_DRAIN] = level.time + 500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 900
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3734
;3734:			}
LABELV $1627
line 3735
;3735:		}
LABELV $1625
line 3736
;3736:		if ( !WP_ForcePowerAvailable( self, forcePower ) || self->client->ps.fd.forcePowerDuration[FP_DRAIN] < level.time ||
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 WP_ForcePowerAvailable
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $1635
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 900
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LTI4 $1635
ADDRLP4 52
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 25
GEI4 $1631
LABELV $1635
line 3738
;3737:			self->client->ps.fd.forcePower < 25)
;3738:		{
line 3739
;3739:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3740
;3740:		}
ADDRGP4 $1576
JUMPV
LABELV $1631
line 3742
;3741:		else
;3742:		{
line 3743
;3743:			ForceShootDrain( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceShootDrain
CALLI4
pop
line 3744
;3744:		}
line 3745
;3745:		break;
ADDRGP4 $1576
JUMPV
LABELV $1636
line 3748
;3746:	case FP_LIGHTNING:
;3747:		//self->client->ps.forceHandExtendTime = level.time + 200;
;3748:		if (self->client->ps.forceHandExtend != /*HANDEXTEND_FORCEPUSH*/HANDEXTEND_FORCEGRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1637
line 3749
;3749:		{ //Animation for hand extend doesn't end with hand out, so we have to limit lightning intervals by animation intervals (once hand starts to go in in animation, lightning should stop)
line 3750
;3750:			WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3751
;3751:			break;
ADDRGP4 $1576
JUMPV
LABELV $1637
line 3754
;3752:		}
;3753:
;3754:		if ( self->client->ps.fd.forcePowerLevel[FP_LIGHTNING] > FORCE_LEVEL_1 )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 960
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1639
line 3755
;3755:		{//higher than level 1
line 3756
;3756:			if ( (cmd->buttons & BUTTON_FORCE_LIGHTNING) || ((cmd->buttons & BUTTON_FORCEPOWER) && self->client->ps.fd.forcePowerSelected == FP_LIGHTNING) )
ADDRLP4 56
ADDRFP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 1024
BANDI4
ADDRLP4 60
INDIRI4
NEI4 $1643
ADDRLP4 56
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 60
INDIRI4
EQI4 $1641
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 7
NEI4 $1641
LABELV $1643
line 3757
;3757:			{//holding it keeps it going
line 3758
;3758:				self->client->ps.fd.forcePowerDuration[FP_LIGHTNING] = level.time + 500;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 876
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3759
;3759:			}
LABELV $1641
line 3760
;3760:		}
LABELV $1639
line 3761
;3761:		if ( !WP_ForcePowerAvailable( self, forcePower ) || self->client->ps.fd.forcePowerDuration[FP_LIGHTNING] < level.time ||
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 WP_ForcePowerAvailable
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $1649
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 876
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LTI4 $1649
ADDRLP4 60
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 25
GEI4 $1645
LABELV $1649
line 3763
;3762:			self->client->ps.fd.forcePower < 25)
;3763:		{
line 3764
;3764:			WP_ForcePowerStop( self, forcePower );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3765
;3765:		}
ADDRGP4 $1576
JUMPV
LABELV $1645
line 3767
;3766:		else
;3767:		{
line 3768
;3768:			ForceShootLightning( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceShootLightning
CALLV
pop
line 3769
;3769:			BG_ForcePowerDrain( &self->client->ps, forcePower, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 3770
;3770:		}
line 3771
;3771:		break;
ADDRGP4 $1576
JUMPV
LABELV $1650
line 3773
;3772:	case FP_TELEPATHY:
;3773:		WP_UpdateMindtrickEnts(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 WP_UpdateMindtrickEnts
CALLV
pop
line 3774
;3774:		break;
ADDRGP4 $1576
JUMPV
line 3776
;3775:	case FP_SABERATTACK:
;3776:		break;
line 3778
;3777:	case FP_SABERDEFEND:
;3778:		break;
line 3780
;3779:	case FP_SABERTHROW:
;3780:		break;
LABELV $1654
line 3783
;3781:	case FP_PROTECT:
;3782:	case FP_ABSORB:
;3783:		if (self->client->ps.fd.forcePowerDebounce[forcePower] < level.time)
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1576
line 3784
;3784:		{
line 3785
;3785:			BG_ForcePowerDrain( &self->client->ps, forcePower, 1 );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 3786
;3786:			if (self->client->ps.fd.forcePower < 1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1658
line 3787
;3787:			{
line 3788
;3788:				WP_ForcePowerStop(self, forcePower);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 3789
;3789:			}
LABELV $1658
line 3791
;3790:
;3791:			self->client->ps.fd.forcePowerDebounce[forcePower] = level.time + 300;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 3792
;3792:		}
line 3793
;3793:		break;
line 3795
;3794:	default:
;3795:		break;
LABELV $1576
line 3797
;3796:	}
;3797:}
LABELV $1574
endproc WP_ForcePowerRun 64 12
export WP_DoSpecificPower
proc WP_DoSpecificPower 16 12
line 3800
;3798:
;3799:int WP_DoSpecificPower( gentity_t *self, usercmd_t *ucmd, forcePowers_t forcepower)
;3800:{
line 3803
;3801:	int powerSucceeded;
;3802:
;3803:	powerSucceeded = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 3805
;3804:
;3805:	if ( !WP_ForcePowerAvailable( self, forcepower ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 WP_ForcePowerAvailable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $1663
line 3806
;3806:	{
line 3807
;3807:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1662
JUMPV
LABELV $1663
line 3810
;3808:	}
;3809:
;3810:	switch(forcepower)
ADDRLP4 8
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $1666
ADDRLP4 8
INDIRI4
CNSTI4 17
GTI4 $1666
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1716
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1716
address $1668
address $1671
address $1674
address $1685
address $1688
address $1691
address $1677
address $1684
address $1694
address $1697
address $1700
address $1703
address $1706
address $1709
address $1710
address $1666
address $1666
address $1666
code
line 3811
;3811:	{
LABELV $1668
line 3813
;3812:	case FP_HEAL:
;3813:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3814
;3814:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1669
line 3815
;3815:		{ //need to release before we can use nonhold powers again
line 3816
;3816:			break;
ADDRGP4 $1666
JUMPV
LABELV $1669
line 3818
;3817:		}
;3818:		ForceHeal(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceHeal
CALLV
pop
line 3819
;3819:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3820
;3820:		break;
ADDRGP4 $1666
JUMPV
LABELV $1671
line 3824
;3821:	case FP_LEVITATION:
;3822:		//if leave the ground by some other means, cancel the force jump so we don't suddenly jump when we land.
;3823:		
;3824:		if ( self->client->ps.groundEntityNum == ENTITYNUM_NONE )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $1672
line 3825
;3825:		{
line 3826
;3826:			self->client->ps.fd.forceJumpCharge = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 0
ASGNF4
line 3827
;3827:			G_MuteSound( self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 3829
;3828:			//This only happens if the groundEntityNum == ENTITYNUM_NONE when the button is actually released
;3829:		}
ADDRGP4 $1666
JUMPV
LABELV $1672
line 3831
;3830:		else
;3831:		{//still on ground, so jump
line 3832
;3832:			ForceJump( self, ucmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 ForceJump
CALLV
pop
line 3833
;3833:		}
line 3834
;3834:		break;
ADDRGP4 $1666
JUMPV
LABELV $1674
line 3836
;3835:	case FP_SPEED:
;3836:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3837
;3837:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1675
line 3838
;3838:		{ //need to release before we can use nonhold powers again
line 3839
;3839:			break;
ADDRGP4 $1666
JUMPV
LABELV $1675
line 3841
;3840:		}
;3841:		ForceSpeed(self, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 ForceSpeed
CALLV
pop
line 3842
;3842:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3843
;3843:		break;
ADDRGP4 $1666
JUMPV
LABELV $1677
line 3845
;3844:	case FP_GRIP:
;3845:		if (self->client->ps.fd.forceGripEntityNum == ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $1678
line 3846
;3846:		{
line 3847
;3847:			ForceGrip( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceGrip
CALLV
pop
line 3848
;3848:		}
LABELV $1678
line 3850
;3849:
;3850:		if (self->client->ps.fd.forceGripEntityNum != ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1096
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $1680
line 3851
;3851:		{
line 3852
;3852:			if (!(self->client->ps.fd.forcePowersActive & (1 << FP_GRIP)))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $1666
line 3853
;3853:			{
line 3854
;3854:				WP_ForcePowerStart( self, FP_GRIP, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerStart
CALLV
pop
line 3855
;3855:				BG_ForcePowerDrain( &self->client->ps, FP_GRIP, GRIP_DRAIN_AMOUNT );
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ARGP4
CNSTI4 6
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 3856
;3856:			}
line 3857
;3857:		}
ADDRGP4 $1666
JUMPV
LABELV $1680
line 3859
;3858:		else
;3859:		{
line 3860
;3860:			powerSucceeded = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3861
;3861:		}
line 3862
;3862:		break;
ADDRGP4 $1666
JUMPV
LABELV $1684
line 3864
;3863:	case FP_LIGHTNING:
;3864:		ForceLightning(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceLightning
CALLV
pop
line 3865
;3865:		break;
ADDRGP4 $1666
JUMPV
LABELV $1685
line 3867
;3866:	case FP_PUSH:
;3867:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3868
;3868:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1686
line 3869
;3869:		{ //need to release before we can use nonhold powers again
line 3870
;3870:			break;
ADDRGP4 $1666
JUMPV
LABELV $1686
line 3872
;3871:		}
;3872:		ForceThrow(self, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 ForceThrow
CALLV
pop
line 3873
;3873:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3874
;3874:		break;
ADDRGP4 $1666
JUMPV
LABELV $1688
line 3876
;3875:	case FP_PULL:
;3876:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3877
;3877:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1689
line 3878
;3878:		{ //need to release before we can use nonhold powers again
line 3879
;3879:			break;
ADDRGP4 $1666
JUMPV
LABELV $1689
line 3881
;3880:		}
;3881:		ForceThrow(self, qtrue);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 ForceThrow
CALLV
pop
line 3882
;3882:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3883
;3883:		break;
ADDRGP4 $1666
JUMPV
LABELV $1691
line 3885
;3884:	case FP_TELEPATHY:
;3885:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3886
;3886:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1692
line 3887
;3887:		{ //need to release before we can use nonhold powers again
line 3888
;3888:			break;
ADDRGP4 $1666
JUMPV
LABELV $1692
line 3890
;3889:		}
;3890:		ForceTelepathy(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTelepathy
CALLV
pop
line 3891
;3891:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3892
;3892:		break;
ADDRGP4 $1666
JUMPV
LABELV $1694
line 3894
;3893:	case FP_RAGE:
;3894:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3895
;3895:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1695
line 3896
;3896:		{ //need to release before we can use nonhold powers again
line 3897
;3897:			break;
ADDRGP4 $1666
JUMPV
LABELV $1695
line 3899
;3898:		}
;3899:		ForceRage(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceRage
CALLV
pop
line 3900
;3900:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3901
;3901:		break;
ADDRGP4 $1666
JUMPV
LABELV $1697
line 3903
;3902:	case FP_PROTECT:
;3903:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3904
;3904:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1698
line 3905
;3905:		{ //need to release before we can use nonhold powers again
line 3906
;3906:			break;
ADDRGP4 $1666
JUMPV
LABELV $1698
line 3908
;3907:		}
;3908:		ForceProtect(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceProtect
CALLV
pop
line 3909
;3909:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3910
;3910:		break;
ADDRGP4 $1666
JUMPV
LABELV $1700
line 3912
;3911:	case FP_ABSORB:
;3912:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3913
;3913:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1701
line 3914
;3914:		{ //need to release before we can use nonhold powers again
line 3915
;3915:			break;
ADDRGP4 $1666
JUMPV
LABELV $1701
line 3917
;3916:		}
;3917:		ForceAbsorb(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceAbsorb
CALLV
pop
line 3918
;3918:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3919
;3919:		break;
ADDRGP4 $1666
JUMPV
LABELV $1703
line 3921
;3920:	case FP_TEAM_HEAL:
;3921:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3922
;3922:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1704
line 3923
;3923:		{ //need to release before we can use nonhold powers again
line 3924
;3924:			break;
ADDRGP4 $1666
JUMPV
LABELV $1704
line 3926
;3925:		}
;3926:		ForceTeamHeal(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTeamHeal
CALLV
pop
line 3927
;3927:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3928
;3928:		break;
ADDRGP4 $1666
JUMPV
LABELV $1706
line 3930
;3929:	case FP_TEAM_FORCE:
;3930:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3931
;3931:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1707
line 3932
;3932:		{ //need to release before we can use nonhold powers again
line 3933
;3933:			break;
ADDRGP4 $1666
JUMPV
LABELV $1707
line 3935
;3934:		}
;3935:		ForceTeamForceReplenish(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceTeamForceReplenish
CALLV
pop
line 3936
;3936:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3937
;3937:		break;
ADDRGP4 $1666
JUMPV
LABELV $1709
line 3939
;3938:	case FP_DRAIN:
;3939:		ForceDrain(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceDrain
CALLV
pop
line 3940
;3940:		break;
ADDRGP4 $1666
JUMPV
LABELV $1710
line 3942
;3941:	case FP_SEE:
;3942:		powerSucceeded = 0; //always 0 for nonhold powers
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3943
;3943:		if (self->client->ps.fd.forceButtonNeedRelease)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1711
line 3944
;3944:		{ //need to release before we can use nonhold powers again
line 3945
;3945:			break;
ADDRGP4 $1666
JUMPV
LABELV $1711
line 3947
;3946:		}
;3947:		ForceSeeing(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 ForceSeeing
CALLV
pop
line 3948
;3948:		self->client->ps.fd.forceButtonNeedRelease = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 1
ASGNI4
line 3949
;3949:		break;
line 3951
;3950:	case FP_SABERATTACK:
;3951:		break;
line 3953
;3952:	case FP_SABERDEFEND:
;3953:		break;
line 3955
;3954:	case FP_SABERTHROW:
;3955:		break;
line 3957
;3956:	default:
;3957:		break;
LABELV $1666
line 3960
;3958:	}
;3959:
;3960:	return powerSucceeded;
ADDRLP4 0
INDIRI4
RETI4
LABELV $1662
endproc WP_DoSpecificPower 16 12
export FindGenericEnemyIndex
proc FindGenericEnemyIndex 116 16
line 3964
;3961:}
;3962:
;3963:void FindGenericEnemyIndex(gentity_t *self)
;3964:{
line 3965
;3965:	int i = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 3968
;3966:	float tlen;
;3967:	gentity_t *ent;
;3968:	gentity_t *besten = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 3969
;3969:	float blen = 99999999;
ADDRLP4 24
CNSTF4 1287568416
ASGNF4
ADDRGP4 $1719
JUMPV
LABELV $1718
line 3973
;3970:	vec3_t a;
;3971:
;3972:	while (i < MAX_CLIENTS)
;3973:	{
line 3974
;3974:		ent = &g_entities[i];
ADDRLP4 0
CNSTI4 828
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 3976
;3975:
;3976:		if (ent && ent->client && ent->s.number != self->s.number && ent->health > 0 && !OnSameTeam(self, ent) && ent->client->ps.pm_type != PM_INTERMISSION && ent->client->ps.pm_type != PM_SPECTATOR)
ADDRLP4 36
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $1721
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $1721
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 40
INDIRP4
INDIRI4
EQI4 $1721
ADDRLP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1721
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $1721
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 6
EQI4 $1721
ADDRLP4 48
INDIRI4
CNSTI4 3
EQI4 $1721
line 3977
;3977:		{
line 3978
;3978:			VectorSubtract(ent->client->ps.origin, self->client->ps.origin, a);
ADDRLP4 52
CNSTI4 408
ASGNI4
ADDRLP4 56
ADDRLP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ASGNP4
ADDRLP4 60
CNSTI4 20
ASGNI4
ADDRLP4 64
ADDRFP4 0
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ASGNP4
ADDRLP4 8
ADDRLP4 56
INDIRP4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
CNSTI4 24
ASGNI4
ADDRLP4 8+4
ADDRLP4 56
INDIRP4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 72
CNSTI4 408
ASGNI4
ADDRLP4 76
CNSTI4 28
ASGNI4
ADDRLP4 8+8
ADDRLP4 0
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3979
;3979:			tlen = VectorLength(a);
ADDRLP4 8
ARGP4
ADDRLP4 80
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 80
INDIRF4
ASGNF4
line 3981
;3980:
;3981:			if (tlen < blen &&
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
GEF4 $1725
ADDRLP4 84
CNSTI4 408
ASGNI4
ADDRLP4 88
CNSTI4 20
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ARGP4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 156
ADDP4
ARGP4
CNSTF4 1061997773
ARGF4
ADDRLP4 96
ADDRGP4 InFront
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $1725
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
CNSTI4 408
ASGNI4
ADDRLP4 108
CNSTI4 20
ASGNI4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ARGP4
ADDRLP4 100
INDIRP4
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 OrgVisible
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
EQI4 $1725
line 3985
;3982:				//InFieldOfVision(ent->client->ps.viewangles, 90, a) &&
;3983:				InFront(ent->client->ps.origin, self->client->ps.origin, self->client->ps.viewangles, 0.8f ) &&
;3984:				OrgVisible(self->client->ps.origin, ent->client->ps.origin, self->s.number))
;3985:			{
line 3986
;3986:				blen = tlen;
ADDRLP4 24
ADDRLP4 20
INDIRF4
ASGNF4
line 3987
;3987:				besten = ent;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
line 3988
;3988:			}
LABELV $1725
line 3989
;3989:		}
LABELV $1721
line 3991
;3990:
;3991:		i++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3992
;3992:	}
LABELV $1719
line 3972
ADDRLP4 4
INDIRI4
CNSTI4 32
LTI4 $1718
line 3994
;3993:
;3994:	if (!besten)
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1727
line 3995
;3995:	{
line 3996
;3996:		return;
ADDRGP4 $1717
JUMPV
LABELV $1727
line 3999
;3997:	}
;3998:
;3999:	self->client->ps.genericEnemyIndex = besten->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 28
INDIRP4
INDIRI4
ASGNI4
line 4000
;4000:}
LABELV $1717
endproc FindGenericEnemyIndex 116 16
export SeekerDroneUpdate
proc SeekerDroneUpdate 1204 28
line 4003
;4001:
;4002:void SeekerDroneUpdate(gentity_t *self)
;4003:{
line 4007
;4004:	vec3_t org, elevated, dir, a, endir;
;4005:	gentity_t *en;
;4006:	float angle;
;4007:	float prefig = 0;
ADDRLP4 56
CNSTF4 0
ASGNF4
line 4010
;4008:	trace_t tr;
;4009:
;4010:	if (!(self->client->ps.eFlags & EF_SEEKERDRONE))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1048576
BANDI4
CNSTI4 0
NEI4 $1730
line 4011
;4011:	{
line 4012
;4012:		self->client->ps.genericEnemyIndex = -1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 -1
ASGNI4
line 4013
;4013:		return;
ADDRGP4 $1729
JUMPV
LABELV $1730
line 4016
;4014:	}
;4015:
;4016:	if (self->health < 1)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1732
line 4017
;4017:	{
line 4018
;4018:		VectorCopy(self->client->ps.origin, elevated);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 4019
;4019:		elevated[2] += 40;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 4021
;4020:
;4021:		angle = ((level.time / 12) & 255) * (M_PI * 2) / 255; //magical numbers make magic happen
ADDRLP4 36
CNSTF4 1086918619
ADDRGP4 level+32
INDIRI4
CNSTI4 12
DIVI4
CNSTI4 255
BANDI4
CVIF4 4
MULF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 4022
;4022:		dir[0] = cos(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1152
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1101004800
ADDRLP4 1152
INDIRF4
MULF4
ASGNF4
line 4023
;4023:		dir[1] = sin(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1156
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1101004800
ADDRLP4 1156
INDIRF4
MULF4
ASGNF4
line 4024
;4024:		dir[2] = cos(angle) * 5;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1160
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1084227584
ADDRLP4 1160
INDIRF4
MULF4
ASGNF4
line 4025
;4025:		VectorAdd(elevated, dir, org);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 4027
;4026:
;4027:		a[ROLL] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 4028
;4028:		a[YAW] = 0;
ADDRLP4 44+4
CNSTF4 0
ASGNF4
line 4029
;4029:		a[PITCH] = 1;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 4031
;4030:
;4031:		G_PlayEffect(EFFECT_SPARK_EXPLOSION, org, a);
CNSTI4 4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 G_PlayEffect
CALLP4
pop
line 4033
;4032:
;4033:		self->client->ps.eFlags -= EF_SEEKERDRONE;
ADDRLP4 1164
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 1164
INDIRP4
ADDRLP4 1164
INDIRP4
INDIRI4
CNSTI4 1048576
SUBI4
ASGNI4
line 4034
;4034:		self->client->ps.genericEnemyIndex = -1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 -1
ASGNI4
line 4036
;4035:
;4036:		return;
ADDRGP4 $1729
JUMPV
LABELV $1732
line 4039
;4037:	}
;4038:
;4039:	if (self->client->ps.droneExistTime >= level.time && 
ADDRLP4 1152
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1152
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LTF4 $1746
ADDRLP4 1152
INDIRF4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
CVIF4 4
GEF4 $1746
line 4041
;4040:		self->client->ps.droneExistTime < (level.time+5000))
;4041:	{
line 4042
;4042:		self->client->ps.genericEnemyIndex = 1024+self->client->ps.droneExistTime;
ADDRLP4 1156
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1156
INDIRP4
CNSTI4 612
ADDP4
ADDRLP4 1156
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
CNSTF4 1149239296
ADDF4
CVFI4 4
ASGNI4
line 4043
;4043:		if (self->client->ps.droneFireTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $1729
line 4044
;4044:		{
line 4045
;4045:			G_Sound( self, CHAN_BODY, G_SoundIndex("sound/weapons/laser_trap/warning.wav") );
ADDRGP4 $1753
ARGP4
ADDRLP4 1160
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 1160
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 4046
;4046:			self->client->ps.droneFireTime = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 616
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
CVIF4 4
ASGNF4
line 4047
;4047:		}
line 4048
;4048:		return;
ADDRGP4 $1729
JUMPV
LABELV $1746
line 4050
;4049:	}
;4050:	else if (self->client->ps.droneExistTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $1755
line 4051
;4051:	{
line 4052
;4052:		VectorCopy(self->client->ps.origin, elevated);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 4053
;4053:		elevated[2] += 40;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 4055
;4054:
;4055:		prefig = (self->client->ps.droneExistTime-level.time)/80;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 620
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
SUBF4
CNSTF4 1117782016
DIVF4
ASGNF4
line 4057
;4056:
;4057:		if (prefig > 55)
ADDRLP4 56
INDIRF4
CNSTF4 1113325568
LEF4 $1760
line 4058
;4058:		{
line 4059
;4059:			prefig = 55;
ADDRLP4 56
CNSTF4 1113325568
ASGNF4
line 4060
;4060:		}
ADDRGP4 $1761
JUMPV
LABELV $1760
line 4061
;4061:		else if (prefig < 1)
ADDRLP4 56
INDIRF4
CNSTF4 1065353216
GEF4 $1762
line 4062
;4062:		{
line 4063
;4063:			prefig = 1;
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
line 4064
;4064:		}
LABELV $1762
LABELV $1761
line 4066
;4065:
;4066:		elevated[2] -= 55-prefig;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1113325568
ADDRLP4 56
INDIRF4
SUBF4
SUBF4
ASGNF4
line 4068
;4067:
;4068:		angle = ((level.time / 12) & 255) * (M_PI * 2) / 255; //magical numbers make magic happen
ADDRLP4 36
CNSTF4 1086918619
ADDRGP4 level+32
INDIRI4
CNSTI4 12
DIVI4
CNSTI4 255
BANDI4
CVIF4 4
MULF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 4069
;4069:		dir[0] = cos(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1156
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1101004800
ADDRLP4 1156
INDIRF4
MULF4
ASGNF4
line 4070
;4070:		dir[1] = sin(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1160
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1101004800
ADDRLP4 1160
INDIRF4
MULF4
ASGNF4
line 4071
;4071:		dir[2] = cos(angle) * 5;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1164
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1084227584
ADDRLP4 1164
INDIRF4
MULF4
ASGNF4
line 4072
;4072:		VectorAdd(elevated, dir, org);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 4074
;4073:
;4074:		a[ROLL] = 0;
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 4075
;4075:		a[YAW] = 0;
ADDRLP4 44+4
CNSTF4 0
ASGNF4
line 4076
;4076:		a[PITCH] = 1;
ADDRLP4 44
CNSTF4 1065353216
ASGNF4
line 4078
;4077:
;4078:		G_PlayEffect(EFFECT_SPARK_EXPLOSION, org, a);
CNSTI4 4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 G_PlayEffect
CALLP4
pop
line 4080
;4079:
;4080:		self->client->ps.eFlags -= EF_SEEKERDRONE;
ADDRLP4 1168
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 1168
INDIRP4
ADDRLP4 1168
INDIRP4
INDIRI4
CNSTI4 1048576
SUBI4
ASGNI4
line 4081
;4081:		self->client->ps.genericEnemyIndex = -1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 -1
ASGNI4
line 4083
;4082:
;4083:		return;
ADDRGP4 $1729
JUMPV
LABELV $1755
line 4086
;4084:	}
;4085:
;4086:	if (self->client->ps.genericEnemyIndex == -1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $1776
line 4087
;4087:	{
line 4088
;4088:		self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4089
;4089:	}
LABELV $1776
line 4091
;4090:
;4091:	if (self->client->ps.genericEnemyIndex != ENTITYNUM_NONE && self->client->ps.genericEnemyIndex != -1)
ADDRLP4 1156
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1156
INDIRI4
CNSTI4 1023
EQI4 $1778
ADDRLP4 1156
INDIRI4
CNSTI4 -1
EQI4 $1778
line 4092
;4092:	{
line 4093
;4093:		en = &g_entities[self->client->ps.genericEnemyIndex];
ADDRLP4 40
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 4095
;4094:
;4095:		if (!en || !en->client)
ADDRLP4 1164
CNSTU4 0
ASGNU4
ADDRLP4 40
INDIRP4
CVPU4 4
ADDRLP4 1164
INDIRU4
EQU4 $1782
ADDRLP4 40
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 1164
INDIRU4
NEU4 $1780
LABELV $1782
line 4096
;4096:		{
line 4097
;4097:			self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4098
;4098:		}
ADDRGP4 $1781
JUMPV
LABELV $1780
line 4099
;4099:		else if (en->s.number == self->s.number)
ADDRLP4 40
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $1783
line 4100
;4100:		{
line 4101
;4101:			self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4102
;4102:		}
ADDRGP4 $1784
JUMPV
LABELV $1783
line 4103
;4103:		else if (en->health < 1)
ADDRLP4 40
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1785
line 4104
;4104:		{
line 4105
;4105:			self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4106
;4106:		}
ADDRGP4 $1786
JUMPV
LABELV $1785
line 4107
;4107:		else if (OnSameTeam(self, en))
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 1168
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 1168
INDIRI4
CNSTI4 0
EQI4 $1787
line 4108
;4108:		{
line 4109
;4109:			self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4110
;4110:		}
ADDRGP4 $1788
JUMPV
LABELV $1787
line 4112
;4111:		else
;4112:		{
line 4114
;4113:			//if (!InFieldOfVision(en->client->ps.viewangles, 90, a))
;4114:			if (!InFront(en->client->ps.origin, self->client->ps.origin, self->client->ps.viewangles, 0.8f ))
ADDRLP4 1172
CNSTI4 408
ASGNI4
ADDRLP4 1176
CNSTI4 20
ASGNI4
ADDRLP4 40
INDIRP4
ADDRLP4 1172
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1176
INDIRI4
ADDP4
ARGP4
ADDRLP4 1180
ADDRFP4 0
INDIRP4
ADDRLP4 1172
INDIRI4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 1180
INDIRP4
ADDRLP4 1176
INDIRI4
ADDP4
ARGP4
ADDRLP4 1180
INDIRP4
CNSTI4 156
ADDP4
ARGP4
CNSTF4 1061997773
ARGF4
ADDRLP4 1184
ADDRGP4 InFront
CALLI4
ASGNI4
ADDRLP4 1184
INDIRI4
CNSTI4 0
NEI4 $1789
line 4115
;4115:			{
line 4116
;4116:				self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4117
;4117:			}
ADDRGP4 $1790
JUMPV
LABELV $1789
line 4118
;4118:			else if (!OrgVisible(self->client->ps.origin, en->client->ps.origin, self->s.number))
ADDRLP4 1188
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1192
CNSTI4 408
ASGNI4
ADDRLP4 1196
CNSTI4 20
ASGNI4
ADDRLP4 1188
INDIRP4
ADDRLP4 1192
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1196
INDIRI4
ADDP4
ARGP4
ADDRLP4 40
INDIRP4
ADDRLP4 1192
INDIRI4
ADDP4
INDIRP4
ADDRLP4 1196
INDIRI4
ADDP4
ARGP4
ADDRLP4 1188
INDIRP4
INDIRI4
ARGI4
ADDRLP4 1200
ADDRGP4 OrgVisible
CALLI4
ASGNI4
ADDRLP4 1200
INDIRI4
CNSTI4 0
NEI4 $1791
line 4119
;4119:			{
line 4120
;4120:				self->client->ps.genericEnemyIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1023
ASGNI4
line 4121
;4121:			}
LABELV $1791
LABELV $1790
line 4122
;4122:		}
LABELV $1788
LABELV $1786
LABELV $1784
LABELV $1781
line 4123
;4123:	}
LABELV $1778
line 4125
;4124:
;4125:	if (self->client->ps.genericEnemyIndex == ENTITYNUM_NONE || self->client->ps.genericEnemyIndex == -1)
ADDRLP4 1160
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1160
INDIRI4
CNSTI4 1023
EQI4 $1795
ADDRLP4 1160
INDIRI4
CNSTI4 -1
NEI4 $1793
LABELV $1795
line 4126
;4126:	{
line 4127
;4127:		FindGenericEnemyIndex(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 FindGenericEnemyIndex
CALLV
pop
line 4128
;4128:	}
LABELV $1793
line 4130
;4129:
;4130:	if (self->client->ps.genericEnemyIndex != ENTITYNUM_NONE && self->client->ps.genericEnemyIndex != -1)
ADDRLP4 1164
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1164
INDIRI4
CNSTI4 1023
EQI4 $1796
ADDRLP4 1164
INDIRI4
CNSTI4 -1
EQI4 $1796
line 4131
;4131:	{
line 4132
;4132:		en = &g_entities[self->client->ps.genericEnemyIndex];
ADDRLP4 40
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 4134
;4133:
;4134:		VectorCopy(self->client->ps.origin, elevated);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 4135
;4135:		elevated[2] += 40;
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 4137
;4136:
;4137:		angle = ((level.time / 12) & 255) * (M_PI * 2) / 255; //magical numbers make magic happen
ADDRLP4 36
CNSTF4 1086918619
ADDRGP4 level+32
INDIRI4
CNSTI4 12
DIVI4
CNSTI4 255
BANDI4
CVIF4 4
MULF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 4138
;4138:		dir[0] = cos(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1168
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1101004800
ADDRLP4 1168
INDIRF4
MULF4
ASGNF4
line 4139
;4139:		dir[1] = sin(angle) * 20;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1172
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1101004800
ADDRLP4 1172
INDIRF4
MULF4
ASGNF4
line 4140
;4140:		dir[2] = cos(angle) * 5;
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 1176
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1084227584
ADDRLP4 1176
INDIRF4
MULF4
ASGNF4
line 4141
;4141:		VectorAdd(elevated, dir, org);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 4144
;4142:
;4143:		//org is now where the thing should be client-side because it uses the same time-based offset
;4144:		if (self->client->ps.droneFireTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $1808
line 4145
;4145:		{
line 4146
;4146:			trap_Trace(&tr, org, NULL, NULL, en->client->ps.origin, -1, MASK_SOLID);
ADDRLP4 60
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 1180
CNSTP4 0
ASGNP4
ADDRLP4 1180
INDIRP4
ARGP4
ADDRLP4 1180
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 -1
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 4148
;4147:
;4148:			if (tr.fraction == 1 && !tr.startsolid && !tr.allsolid)
ADDRLP4 60+8
INDIRF4
CNSTF4 1065353216
NEF4 $1811
ADDRLP4 1184
CNSTI4 0
ASGNI4
ADDRLP4 60+4
INDIRI4
ADDRLP4 1184
INDIRI4
NEI4 $1811
ADDRLP4 60
INDIRI4
ADDRLP4 1184
INDIRI4
NEI4 $1811
line 4149
;4149:			{
line 4150
;4150:				VectorSubtract(en->client->ps.origin, org, endir);
ADDRLP4 1188
ADDRLP4 40
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 1140
ADDRLP4 1188
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1140+4
ADDRLP4 1188
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1140+8
ADDRLP4 40
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 24+8
INDIRF4
SUBF4
ASGNF4
line 4151
;4151:				VectorNormalize(endir);
ADDRLP4 1140
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 4153
;4152:
;4153:				WP_FireGenericBlasterMissile(self, org, endir, 0, 15, 2000, MOD_BLASTER);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 1140
ARGP4
CNSTI4 0
ARGI4
CNSTI4 15
ARGI4
CNSTI4 2000
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 WP_FireGenericBlasterMissile
CALLV
pop
line 4154
;4154:				G_SoundAtLoc( org, CHAN_WEAPON, G_SoundIndex("sound/weapons/bryar/fire.wav") );
ADDRGP4 $1819
ARGP4
ADDRLP4 1192
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 24
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 1192
INDIRI4
ARGI4
ADDRGP4 G_SoundAtLoc
CALLV
pop
line 4156
;4155:
;4156:				self->client->ps.droneFireTime = level.time + Q_irand(400, 700);
CNSTI4 400
ARGI4
CNSTI4 700
ARGI4
ADDRLP4 1196
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 616
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 1196
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 4157
;4157:			}
LABELV $1811
line 4158
;4158:		}
LABELV $1808
line 4159
;4159:	}
LABELV $1796
line 4160
;4160:}
LABELV $1729
endproc SeekerDroneUpdate 1204 28
export HolocronUpdate
proc HolocronUpdate 28 8
line 4163
;4161:
;4162:void HolocronUpdate(gentity_t *self)
;4163:{
line 4164
;4164:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 4165
;4165:	int noHRank = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 4167
;4166:
;4167:	if (noHRank < FORCE_LEVEL_0)
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $1822
line 4168
;4168:	{
line 4169
;4169:		noHRank = FORCE_LEVEL_0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 4170
;4170:	}
LABELV $1822
line 4171
;4171:	if (noHRank > FORCE_LEVEL_3)
ADDRLP4 4
INDIRI4
CNSTI4 3
LEI4 $1824
line 4172
;4172:	{
line 4173
;4173:		noHRank = FORCE_LEVEL_3;
ADDRLP4 4
CNSTI4 3
ASGNI4
line 4174
;4174:	}
LABELV $1824
line 4176
;4175:
;4176:	trap_Cvar_Update(&g_MaxHolocronCarry);
ADDRGP4 g_MaxHolocronCarry
ARGP4
ADDRGP4 trap_Cvar_Update
CALLV
pop
ADDRGP4 $1827
JUMPV
LABELV $1826
line 4179
;4177:
;4178:	while (i < NUM_FORCE_POWERS)
;4179:	{
line 4180
;4180:		if (self->client->ps.holocronsCarried[i])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 632
ADDP4
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1829
line 4181
;4181:		{
line 4182
;4182:			self->client->ps.holocronBits |= (1 << i);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 712
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 4183
;4183:			self->client->ps.fd.forcePowersKnown |= (1 << i);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 4184
;4184:			self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_3;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 3
ASGNI4
line 4185
;4185:		}
ADDRGP4 $1830
JUMPV
LABELV $1829
line 4187
;4186:		else
;4187:		{
line 4188
;4188:			self->client->ps.fd.forcePowerLevel[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4189
;4189:			if (self->client->ps.holocronBits & (1 << i))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 712
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1831
line 4190
;4190:			{
line 4191
;4191:				self->client->ps.holocronBits -= (1 << i);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 712
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
SUBI4
ASGNI4
line 4192
;4192:			}
LABELV $1831
line 4194
;4193:
;4194:			if ((self->client->ps.fd.forcePowersKnown & (1 << i)) && i != FP_LEVITATION && i != FP_SABERATTACK)
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1833
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $1833
ADDRLP4 0
INDIRI4
CNSTI4 15
EQI4 $1833
line 4195
;4195:			{
line 4196
;4196:				self->client->ps.fd.forcePowersKnown -= (1 << i);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
SUBI4
ASGNI4
line 4197
;4197:			}
LABELV $1833
line 4199
;4198:
;4199:			if ((self->client->ps.fd.forcePowersActive & (1 << i)) && i != FP_LEVITATION && i != FP_SABERATTACK)
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1835
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1835
ADDRLP4 0
INDIRI4
CNSTI4 15
EQI4 $1835
line 4200
;4200:			{
line 4201
;4201:				WP_ForcePowerStop(self, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4202
;4202:			}
LABELV $1835
line 4204
;4203:
;4204:			if (i == FP_LEVITATION)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $1837
line 4205
;4205:			{
line 4206
;4206:				if (noHRank >= FORCE_LEVEL_1)
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $1839
line 4207
;4207:				{
line 4208
;4208:					self->client->ps.fd.forcePowerLevel[i] = noHRank;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 4209
;4209:				}
ADDRGP4 $1838
JUMPV
LABELV $1839
line 4211
;4210:				else
;4211:				{
line 4212
;4212:					self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 1
ASGNI4
line 4213
;4213:				}
line 4214
;4214:			}
ADDRGP4 $1838
JUMPV
LABELV $1837
line 4215
;4215:			else if (i == FP_SABERATTACK)
ADDRLP4 0
INDIRI4
CNSTI4 15
NEI4 $1841
line 4216
;4216:			{
line 4217
;4217:				self->client->ps.fd.forcePowersKnown |= (1 << i);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 4219
;4218:
;4219:				if (noHRank >= FORCE_LEVEL_1)
ADDRLP4 4
INDIRI4
CNSTI4 1
LTI4 $1843
line 4220
;4220:				{
line 4221
;4221:					self->client->ps.fd.forcePowerLevel[i] = noHRank;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 4222
;4222:				}
ADDRGP4 $1842
JUMPV
LABELV $1843
line 4224
;4223:				else
;4224:				{
line 4225
;4225:					self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 1
ASGNI4
line 4226
;4226:				}
line 4227
;4227:			}
ADDRGP4 $1842
JUMPV
LABELV $1841
line 4229
;4228:			else
;4229:			{
line 4230
;4230:				self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4231
;4231:			}
LABELV $1842
LABELV $1838
line 4232
;4232:		}
LABELV $1830
line 4234
;4233:
;4234:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4235
;4235:	}
LABELV $1827
line 4178
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1826
line 4237
;4236:
;4237:	if (HasSetSaberOnly())
ADDRLP4 8
ADDRGP4 HasSetSaberOnly
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1845
line 4238
;4238:	{
line 4244
;4239:		/*
;4240:		self->client->ps.fd.forcePowerLevel[FP_SABERATTACK] = FORCE_LEVEL_3;
;4241:		self->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] = FORCE_LEVEL_3;
;4242:		self->client->ps.fd.forcePowerLevel[FP_SABERTHROW] = FORCE_LEVEL_3;
;4243:		*/
;4244:		if (self->client->ps.fd.forcePowerLevel[FP_SABERATTACK] < FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1847
line 4245
;4245:		{
line 4246
;4246:			self->client->ps.fd.forcePowerLevel[FP_SABERATTACK] = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 992
ADDP4
CNSTI4 1
ASGNI4
line 4247
;4247:		}
LABELV $1847
line 4248
;4248:		if (self->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] < FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 996
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1849
line 4249
;4249:		{
line 4250
;4250:			self->client->ps.fd.forcePowerLevel[FP_SABERDEFEND] = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 996
ADDP4
CNSTI4 1
ASGNI4
line 4251
;4251:		}
LABELV $1849
line 4252
;4252:	}
LABELV $1845
line 4253
;4253:}
LABELV $1821
endproc HolocronUpdate 28 8
export JediMasterUpdate
proc JediMasterUpdate 20 8
line 4256
;4254:
;4255:void JediMasterUpdate(gentity_t *self)
;4256:{
line 4257
;4257:	int i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 4259
;4258:
;4259:	trap_Cvar_Update(&g_MaxHolocronCarry);
ADDRGP4 g_MaxHolocronCarry
ARGP4
ADDRGP4 trap_Cvar_Update
CALLV
pop
ADDRGP4 $1853
JUMPV
LABELV $1852
line 4262
;4260:
;4261:	while (i < NUM_FORCE_POWERS)
;4262:	{
line 4263
;4263:		if (self->client->ps.isJediMaster)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1855
line 4264
;4264:		{
line 4265
;4265:			self->client->ps.fd.forcePowersKnown |= (1 << i);
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 4266
;4266:			self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_3;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 3
ASGNI4
line 4268
;4267:
;4268:			if (i == FP_TEAM_HEAL || i == FP_TEAM_FORCE ||
ADDRLP4 0
INDIRI4
CNSTI4 11
EQI4 $1861
ADDRLP4 0
INDIRI4
CNSTI4 12
EQI4 $1861
ADDRLP4 0
INDIRI4
CNSTI4 13
EQI4 $1861
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1857
LABELV $1861
line 4270
;4269:				i == FP_DRAIN || i == FP_ABSORB)
;4270:			{ //team powers are useless in JM, absorb is too because no one else has powers to absorb. Drain is just
line 4273
;4271:			  //relatively useless in comparison, because its main intent is not to heal, but rather to cripple others
;4272:			  //by draining their force at the same time. And no one needs force in JM except the JM himself.
;4273:				self->client->ps.fd.forcePowersKnown &= ~(1 << i);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 4274
;4274:				self->client->ps.fd.forcePowerLevel[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4275
;4275:			}
LABELV $1857
line 4277
;4276:
;4277:			if (i == FP_TELEPATHY)
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $1856
line 4278
;4278:			{ //this decision was made because level 3 mindtrick allows the JM to just hide too much, and no one else has force
line 4281
;4279:			  //sight to counteract it. Since the JM himself is the focus of gameplay in this mode, having him hidden for large
;4280:			  //durations is indeed a bad thing.
;4281:				self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_2;
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 4282
;4282:			}
line 4283
;4283:		}
ADDRGP4 $1856
JUMPV
LABELV $1855
line 4285
;4284:		else
;4285:		{
line 4286
;4286:			if ((self->client->ps.fd.forcePowersKnown & (1 << i)) && i != FP_LEVITATION)
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1864
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1864
line 4287
;4287:			{
line 4288
;4288:				self->client->ps.fd.forcePowersKnown -= (1 << i);
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
SUBI4
ASGNI4
line 4289
;4289:			}
LABELV $1864
line 4291
;4290:
;4291:			if ((self->client->ps.fd.forcePowersActive & (1 << i)) && i != FP_LEVITATION)
ADDRLP4 12
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1866
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $1866
line 4292
;4292:			{
line 4293
;4293:				WP_ForcePowerStop(self, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4294
;4294:			}
LABELV $1866
line 4296
;4295:
;4296:			if (i == FP_LEVITATION)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $1868
line 4297
;4297:			{
line 4298
;4298:				self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_1;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 1
ASGNI4
line 4299
;4299:			}
ADDRGP4 $1869
JUMPV
LABELV $1868
line 4301
;4300:			else
;4301:			{
line 4302
;4302:				self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4303
;4303:			}
LABELV $1869
line 4304
;4304:		}
LABELV $1856
line 4306
;4305:
;4306:		i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4307
;4307:	}
LABELV $1853
line 4261
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1852
line 4308
;4308:}
LABELV $1851
endproc JediMasterUpdate 20 8
export WP_ForcePowersUpdate
proc WP_ForcePowersUpdate 132 32
line 4311
;4309:
;4310:void WP_ForcePowersUpdate( gentity_t *self, usercmd_t *ucmd )
;4311:{
line 4312
;4312:	qboolean	usingForce = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 4315
;4313:	vec3_t		dmgdir;
;4314:	int			i, holo, holoregen;
;4315:	int			prepower = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 4317
;4316:	//see if any force powers are running
;4317:	if ( !self )
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1871
line 4318
;4318:	{
line 4319
;4319:		return;
ADDRGP4 $1870
JUMPV
LABELV $1871
line 4322
;4320:	}
;4321:
;4322:	if ( !self->client )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1873
line 4323
;4323:	{
line 4324
;4324:		return;
ADDRGP4 $1870
JUMPV
LABELV $1873
line 4327
;4325:	}
;4326:
;4327:	if (self->client->ps.pm_flags & PMF_FOLLOW)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1875
line 4328
;4328:	{ //not a "real" game client, it's a spectator following someone
line 4329
;4329:		return;
ADDRGP4 $1870
JUMPV
LABELV $1875
line 4331
;4330:	}
;4331:	if (self->client->sess.sessionTeam == TEAM_SPECTATOR)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1520
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1877
line 4332
;4332:	{
line 4333
;4333:		return;
ADDRGP4 $1870
JUMPV
LABELV $1877
line 4336
;4334:	}
;4335:
;4336:	if (self->client->ps.fd.saberAnimLevel > self->client->ps.fd.forcePowerLevel[FP_SABERATTACK])
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
ADDRLP4 32
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
LEI4 $1879
line 4337
;4337:	{
line 4338
;4338:		self->client->ps.fd.saberAnimLevel = self->client->ps.fd.forcePowerLevel[FP_SABERATTACK];
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 1216
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 992
ADDP4
INDIRI4
ASGNI4
line 4339
;4339:	}
ADDRGP4 $1880
JUMPV
LABELV $1879
line 4340
;4340:	else if (!self->client->ps.fd.saberAnimLevel)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1881
line 4341
;4341:	{
line 4342
;4342:		self->client->ps.fd.saberAnimLevel = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1216
ADDP4
CNSTI4 1
ASGNI4
line 4343
;4343:	}
LABELV $1881
LABELV $1880
line 4345
;4344:
;4345:	if (!(self->client->ps.fd.forcePowersKnown & (1 << FP_LEVITATION)))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $1883
line 4346
;4346:	{
line 4347
;4347:		self->client->ps.fd.forcePowersKnown |= (1 << FP_LEVITATION);
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 4348
;4348:	}
LABELV $1883
line 4350
;4349:
;4350:	if (self->client->ps.fd.forcePowerLevel[FP_LEVITATION] < FORCE_LEVEL_1)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1885
line 4351
;4351:	{
line 4352
;4352:		self->client->ps.fd.forcePowerLevel[FP_LEVITATION] = FORCE_LEVEL_1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 1
ASGNI4
line 4353
;4353:	}
LABELV $1885
line 4355
;4354:
;4355:	if (self->client->ps.fd.forcePowerSelected < 0)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1887
line 4356
;4356:	{ //bad
line 4357
;4357:		self->client->ps.fd.forcePowerSelected = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
CNSTI4 0
ASGNI4
line 4358
;4358:	}
LABELV $1887
line 4360
;4359:
;4360:	if ( ((self->client->sess.selectedFP != self->client->ps.fd.forcePowerSelected) ||
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 1544
ADDP4
INDIRI4
ADDRLP4 36
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
NEI4 $1891
ADDRLP4 36
INDIRP4
CNSTI4 1548
ADDP4
INDIRI4
ADDRLP4 36
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
EQI4 $1889
LABELV $1891
ADDRFP4 0
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $1889
line 4363
;4361:		(self->client->sess.saberLevel != self->client->ps.fd.saberAnimLevel)) &&
;4362:		!(self->r.svFlags & SVF_BOT) )
;4363:	{
line 4364
;4364:		if (self->client->sess.updateUITime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1556
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1892
line 4365
;4365:		{ //a bit hackish, but we don't want the client to flood with userinfo updates if they rapidly cycle
line 4368
;4366:		  //through their force powers or saber attack levels
;4367:
;4368:			self->client->sess.selectedFP = self->client->ps.fd.forcePowerSelected;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 1544
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
ASGNI4
line 4369
;4369:			self->client->sess.saberLevel = self->client->ps.fd.saberAnimLevel;
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 1548
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 1216
ADDP4
INDIRI4
ASGNI4
line 4370
;4370:		}
LABELV $1892
line 4371
;4371:	}
LABELV $1889
line 4373
;4372:
;4373:	if (!g_LastFrameTime)
ADDRGP4 g_LastFrameTime
INDIRI4
CNSTI4 0
NEI4 $1895
line 4374
;4374:	{
line 4375
;4375:		g_LastFrameTime = level.time;
ADDRGP4 g_LastFrameTime
ADDRGP4 level+32
INDIRI4
ASGNI4
line 4376
;4376:	}
LABELV $1895
line 4378
;4377:
;4378:	if (self->client->ps.forceHandExtend == HANDEXTEND_KNOCKDOWN)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1898
line 4379
;4379:	{
line 4380
;4380:		self->client->ps.zoomFov = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 0
ASGNF4
line 4381
;4381:		self->client->ps.zoomMode = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 4382
;4382:		self->client->ps.zoomLocked = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 4383
;4383:		self->client->ps.zoomTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1324
ADDP4
CNSTI4 0
ASGNI4
line 4384
;4384:	}
LABELV $1898
line 4386
;4385:
;4386:	if (self->client->ps.forceHandExtend != HANDEXTEND_NONE &&
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1900
ADDRLP4 40
INDIRP4
CNSTI4 1240
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $1900
line 4388
;4387:		self->client->ps.forceHandExtendTime < level.time)
;4388:	{
line 4389
;4389:		if (self->client->ps.forceHandExtend == HANDEXTEND_KNOCKDOWN &&
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1903
ADDRLP4 44
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1903
line 4391
;4390:			!self->client->ps.forceDodgeAnim)
;4391:		{
line 4392
;4392:			if (self->client->pers.cmd.upmove &&
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 1398
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $1905
ADDRLP4 48
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1905
line 4394
;4393:				self->client->ps.fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_1)
;4394:			{ //force getup
line 4395
;4395:				G_PreDefSound(self->client->ps.origin, PDSOUND_FORCEJUMP);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 4396
;4396:				self->client->ps.forceDodgeAnim = 2;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 2
ASGNI4
line 4397
;4397:				self->client->ps.forceHandExtendTime = level.time + 800;//1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 800
ADDI4
ASGNI4
line 4399
;4398:
;4399:				self->client->ps.velocity[2] = 300;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1133903872
ASGNF4
line 4400
;4400:			}
ADDRGP4 $1904
JUMPV
LABELV $1905
line 4401
;4401:			else if (self->client->ps.quickerGetup)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1252
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1908
line 4402
;4402:			{
line 4403
;4403:				self->client->ps.quickerGetup = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1252
ADDP4
CNSTI4 0
ASGNI4
line 4404
;4404:				G_EntitySound( self, CHAN_VOICE, G_SoundIndex("*jump1.wav") );
ADDRGP4 $1910
ARGP4
ADDRLP4 52
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
ADDRGP4 G_EntitySound
CALLV
pop
line 4405
;4405:				self->client->ps.forceDodgeAnim = 3;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 3
ASGNI4
line 4406
;4406:				self->client->ps.forceHandExtendTime = level.time + 600;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 4407
;4407:				self->client->ps.velocity[2] = 200;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1128792064
ASGNF4
line 4408
;4408:			}
ADDRGP4 $1904
JUMPV
LABELV $1908
line 4410
;4409:			else
;4410:			{
line 4411
;4411:				self->client->ps.forceDodgeAnim = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 1
ASGNI4
line 4412
;4412:				self->client->ps.forceHandExtendTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 4413
;4413:			}
line 4414
;4414:		}
ADDRGP4 $1904
JUMPV
LABELV $1903
line 4416
;4415:		else
;4416:		{
line 4417
;4417:			self->client->ps.forceHandExtend = HANDEXTEND_WEAPONREADY;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 6
ASGNI4
line 4418
;4418:		}
LABELV $1904
line 4419
;4419:	}
LABELV $1900
line 4421
;4420:
;4421:	if (g_gametype.integer == GT_HOLOCRON)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $1913
line 4422
;4422:	{
line 4423
;4423:		HolocronUpdate(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 HolocronUpdate
CALLV
pop
line 4424
;4424:	}
LABELV $1913
line 4425
;4425:	if (g_gametype.integer == GT_JEDIMASTER)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $1916
line 4426
;4426:	{
line 4427
;4427:		JediMasterUpdate(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 JediMasterUpdate
CALLV
pop
line 4428
;4428:	}
LABELV $1916
line 4430
;4429:
;4430:	SeekerDroneUpdate(self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 SeekerDroneUpdate
CALLV
pop
line 4432
;4431:
;4432:	if (self->client->ps.powerups[PW_FORCE_BOON])
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 400
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1919
line 4433
;4433:	{
line 4434
;4434:		prepower = self->client->ps.fd.forcePower;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
ASGNI4
line 4435
;4435:	}
LABELV $1919
line 4437
;4436:
;4437:	if (self && self->client && (BG_HasYsalamiri(g_gametype.integer, &self->client->ps) ||
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
CNSTU4 0
ASGNU4
ADDRLP4 44
INDIRP4
CVPU4 4
ADDRLP4 48
INDIRU4
EQU4 $1921
ADDRLP4 52
ADDRLP4 44
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
ADDRLP4 48
INDIRU4
EQU4 $1921
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $1924
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1184
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $1921
LABELV $1924
line 4439
;4438:		self->client->ps.fd.forceDeactivateAll))
;4439:	{
line 4440
;4440:		i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1926
JUMPV
LABELV $1925
line 4443
;4441:
;4442:		while (i < NUM_FORCE_POWERS)
;4443:		{
line 4444
;4444:			if ((self->client->ps.fd.forcePowersActive & (1 << i)) && i != FP_LEVITATION)
ADDRLP4 64
CNSTI4 1
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ADDRLP4 64
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1928
ADDRLP4 0
INDIRI4
ADDRLP4 64
INDIRI4
EQI4 $1928
line 4445
;4445:			{
line 4446
;4446:				WP_ForcePowerStop(self, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4447
;4447:			}
LABELV $1928
line 4449
;4448:
;4449:			i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4450
;4450:		}
LABELV $1926
line 4442
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1925
line 4452
;4451:
;4452:		self->client->ps.fd.forceDeactivateAll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1184
ADDP4
CNSTI4 0
ASGNI4
line 4454
;4453:
;4454:		if (self->client->ps.fd.forceJumpCharge)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1922
line 4455
;4455:		{
line 4456
;4456:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 4457
;4457:			self->client->ps.fd.forceJumpCharge = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 0
ASGNF4
line 4458
;4458:		}
line 4459
;4459:	}
ADDRGP4 $1922
JUMPV
LABELV $1921
line 4461
;4460:	else
;4461:	{
line 4462
;4462:		i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1933
JUMPV
LABELV $1932
line 4465
;4463:
;4464:		while (i < NUM_FORCE_POWERS)
;4465:		{
line 4466
;4466:			if ((self->client->ps.fd.forcePowersActive & (1 << i)) && i != FP_LEVITATION &&
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 68
CNSTI4 1
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1935
ADDRLP4 0
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $1935
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 64
INDIRP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1935
line 4468
;4467:				!BG_CanUseFPNow(g_gametype.integer, &self->client->ps, level.time, i))
;4468:			{
line 4469
;4469:				WP_ForcePowerStop(self, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4470
;4470:			}
LABELV $1935
line 4472
;4471:
;4472:			i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4473
;4473:		}
LABELV $1933
line 4464
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1932
line 4474
;4474:	}
LABELV $1922
line 4476
;4475:
;4476:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 4478
;4477:
;4478:	if (self->client->ps.powerups[PW_FORCE_ENLIGHTENED_LIGHT] || self->client->ps.powerups[PW_FORCE_ENLIGHTENED_DARK])
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
NEI4 $1941
ADDRLP4 64
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $1939
LABELV $1941
line 4479
;4479:	{
line 4480
;4480:		if (!self->client->ps.fd.forceUsingAdded)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1940
line 4481
;4481:		{
line 4482
;4482:			i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1945
JUMPV
LABELV $1944
line 4485
;4483:
;4484:			while (i < NUM_FORCE_POWERS)
;4485:			{
line 4486
;4486:				self->client->ps.fd.forcePowerBaseLevel[i] = self->client->ps.fd.forcePowerLevel[i];
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 1004
ADDP4
ADDP4
ADDRLP4 72
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
ASGNI4
line 4488
;4487:
;4488:				if (!forcePowerDarkLight[i] ||
ADDRLP4 80
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forcePowerDarkLight
ADDP4
INDIRI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $1949
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1176
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $1947
LABELV $1949
line 4490
;4489:					self->client->ps.fd.forceSide == forcePowerDarkLight[i])
;4490:				{
line 4491
;4491:					self->client->ps.fd.forcePowerLevel[i] = FORCE_LEVEL_3;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
CNSTI4 3
ASGNI4
line 4492
;4492:					self->client->ps.fd.forcePowersKnown |= (1 << i);
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BORI4
ASGNI4
line 4493
;4493:				}
LABELV $1947
line 4495
;4494:
;4495:				i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4496
;4496:			}
LABELV $1945
line 4484
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1944
line 4498
;4497:
;4498:			self->client->ps.fd.forceUsingAdded = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 1
ASGNI4
line 4499
;4499:		}
line 4500
;4500:	}
ADDRGP4 $1940
JUMPV
LABELV $1939
line 4501
;4501:	else if (self->client->ps.fd.forceUsingAdded)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1076
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1950
line 4502
;4502:	{
line 4503
;4503:		i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1953
JUMPV
LABELV $1952
line 4506
;4504:
;4505:		while (i < NUM_FORCE_POWERS)
;4506:		{
line 4507
;4507:			self->client->ps.fd.forcePowerLevel[i] = self->client->ps.fd.forcePowerBaseLevel[i];
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 932
ADDP4
ADDP4
ADDRLP4 72
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 1004
ADDP4
ADDP4
INDIRI4
ASGNI4
line 4508
;4508:			if (!self->client->ps.fd.forcePowerLevel[i])
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1955
line 4509
;4509:			{
line 4510
;4510:				if (self->client->ps.fd.forcePowersActive & (1 << i))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1957
line 4511
;4511:				{
line 4512
;4512:					WP_ForcePowerStop(self, i);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4513
;4513:				}
LABELV $1957
line 4514
;4514:				self->client->ps.fd.forcePowersKnown &= ~(1 << i);
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 832
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 4515
;4515:			}
LABELV $1955
line 4517
;4516:
;4517:			i++;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4518
;4518:		}
LABELV $1953
line 4505
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1952
line 4520
;4519:
;4520:		self->client->ps.fd.forceUsingAdded = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1076
ADDP4
CNSTI4 0
ASGNI4
line 4521
;4521:	}
LABELV $1950
LABELV $1940
line 4523
;4522:
;4523:	i = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 4525
;4524:
;4525:	if (!(self->client->ps.fd.forcePowersActive & (1 << FP_TELEPATHY)))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $1959
line 4526
;4526:	{
line 4527
;4527:		self->client->ps.fd.forceMindtrickTargetIndex = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1144
ADDP4
CNSTI4 0
ASGNI4
line 4528
;4528:		self->client->ps.fd.forceMindtrickTargetIndex2 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1148
ADDP4
CNSTI4 0
ASGNI4
line 4529
;4529:		self->client->ps.fd.forceMindtrickTargetIndex3 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1152
ADDP4
CNSTI4 0
ASGNI4
line 4530
;4530:		self->client->ps.fd.forceMindtrickTargetIndex4 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1156
ADDP4
CNSTI4 0
ASGNI4
line 4531
;4531:	}
LABELV $1959
line 4540
;4532:	
;4533:	/*if (self->s.number == 0)
;4534:	//if (self->s.number == 1)
;4535:	{
;4536:		G_Printf("FP: %i\n", self->client->ps.fd.forcePower);
;4537:	}*/
;4538:	
;4539:
;4540:	if (self->health < 1)
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1961
line 4541
;4541:	{
line 4542
;4542:		self->client->ps.fd.forceGripBeingGripped = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
CNSTF4 0
ASGNF4
line 4543
;4543:	}
LABELV $1961
line 4545
;4544:
;4545:	if (self->client->ps.fd.forceGripBeingGripped > level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1104
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
LEF4 $1963
line 4546
;4546:	{
line 4547
;4547:		self->client->ps.fd.forceGripCripple = 1;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1108
ADDP4
CNSTI4 1
ASGNI4
line 4548
;4548:	}
ADDRGP4 $1964
JUMPV
LABELV $1963
line 4550
;4549:	else
;4550:	{
line 4551
;4551:		self->client->ps.fd.forceGripCripple = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1108
ADDP4
CNSTI4 0
ASGNI4
line 4552
;4552:	}
LABELV $1964
line 4554
;4553:
;4554:	if (self->client->ps.fd.forceJumpSound)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1088
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1966
line 4555
;4555:	{
line 4556
;4556:		G_PreDefSound(self->client->ps.origin, PDSOUND_FORCEJUMP);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 4557
;4557:		self->client->ps.fd.forceJumpSound = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 0
ASGNI4
line 4558
;4558:	}
LABELV $1966
line 4560
;4559:
;4560:	if (self->client->ps.fd.forceGripCripple)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1968
line 4561
;4561:	{
line 4562
;4562:		if (self->client->ps.fd.forceGripSoundTime < level.time)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1116
ADDP4
INDIRF4
ADDRGP4 level+32
INDIRI4
CVIF4 4
GEF4 $1970
line 4563
;4563:		{
line 4564
;4564:			G_PreDefSound(self->client->ps.origin, PDSOUND_FORCEGRIP);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 G_PreDefSound
CALLV
pop
line 4565
;4565:			self->client->ps.fd.forceGripSoundTime = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1116
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ASGNF4
line 4566
;4566:		}
LABELV $1970
line 4567
;4567:	}
LABELV $1968
line 4569
;4568:
;4569:	if (self->client->ps.fd.forcePowersActive & (1 << FP_SPEED))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1974
line 4570
;4570:	{
line 4571
;4571:		self->client->ps.powerups[PW_SPEED] = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 384
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 4572
;4572:	}
LABELV $1974
line 4574
;4573:
;4574:	if (self->client->ps.fd.forceSpeedDoDamage && FORCE_VELOCITY_DAMAGE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1128
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1977
ADDRGP4 $1977
JUMPV
line 4575
;4575:	{ //we set the flag somewhere to do damage for some reason, so do it
line 4576
;4576:		G_Damage (self, NULL, NULL, NULL, NULL, self->client->ps.fd.forceSpeedDoDamage, DAMAGE_NO_ARMOR, MOD_FALLING);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
CNSTP4 0
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 80
CNSTP4 0
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1128
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 34
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 4580
;4577:		//self->client->ps.pm_time = 20000;
;4578:		//self->client->ps.pm_flags |= PMF_TIME_KNOCKBACK;
;4579:
;4580:		if (self->client->ps.fd.forceSpeedHitIndex != ENTITYNUM_NONE &&
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1132
ADDP4
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 1023
EQI4 $1979
CNSTI4 828
ADDRLP4 84
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1979
line 4582
;4581:			g_entities[self->client->ps.fd.forceSpeedHitIndex].client)
;4582:		{
line 4583
;4583:			VectorSubtract(g_entities[self->client->ps.fd.forceSpeedHitIndex].client->ps.origin, self->client->ps.origin, dmgdir);
ADDRLP4 88
CNSTI4 828
ASGNI4
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 96
ADDRLP4 92
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
CNSTI4 1132
ASGNI4
ADDRLP4 104
CNSTI4 20
ASGNI4
ADDRLP4 16
ADDRLP4 88
INDIRI4
ADDRLP4 96
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 108
ADDRLP4 92
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 112
CNSTI4 24
ASGNI4
ADDRLP4 16+4
ADDRLP4 88
INDIRI4
ADDRLP4 108
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
ADDRLP4 108
INDIRP4
ADDRLP4 112
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 120
CNSTI4 28
ASGNI4
ADDRLP4 16+8
CNSTI4 828
ADDRLP4 116
INDIRP4
CNSTI4 1132
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+408
ADDP4
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
ADDRLP4 116
INDIRP4
ADDRLP4 120
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 4585
;4584:
;4585:			G_Damage (&g_entities[self->client->ps.fd.forceSpeedHitIndex], self, self, dmgdir, NULL, self->client->ps.fd.forceSpeedDoDamage, DAMAGE_NO_ARMOR, MOD_CRUSH);
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
ADDRLP4 124
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
CNSTI4 828
ADDRLP4 128
INDIRP4
CNSTI4 1132
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 16
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 128
INDIRP4
CNSTI4 1128
ADDP4
INDIRF4
CVFI4 4
ARGI4
CNSTI4 2
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 4586
;4586:			self->client->ps.fd.forceSpeedHitIndex = ENTITYNUM_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1132
ADDP4
CNSTI4 1023
ASGNI4
line 4587
;4587:		}
LABELV $1979
line 4591
;4588:
;4589:		//placeholder sound:
;4590:		//G_Sound(self, CHAN_BODY, G_SoundIndex("sound/test/objectBreak.wav"));
;4591:		self->client->ps.fd.forceSpeedDoDamage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1128
ADDP4
CNSTF4 0
ASGNF4
line 4592
;4592:	}
LABELV $1977
line 4594
;4593:
;4594:	if ( self->health <= 0 )
ADDRFP4 0
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1987
line 4595
;4595:	{//if dead, deactivate any active force powers
line 4596
;4596:		for ( i = 0; i < NUM_FORCE_POWERS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1989
line 4597
;4597:		{
line 4598
;4598:			if ( self->client->ps.fd.forcePowerDuration[i] || (self->client->ps.fd.forcePowersActive&( 1 << i )) )
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 76
INDIRP4
CNSTI4 848
ADDP4
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $1995
ADDRLP4 76
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
ADDRLP4 80
INDIRI4
EQI4 $1993
LABELV $1995
line 4599
;4599:			{
line 4600
;4600:				WP_ForcePowerStop( self, (forcePowers_t)i );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4601
;4601:				self->client->ps.fd.forcePowerDuration[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4602
;4602:			}
LABELV $1993
line 4603
;4603:		}
LABELV $1990
line 4596
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $1989
line 4605
;4604:		//return;
;4605:		goto powersetcheck;
ADDRGP4 $1996
JUMPV
LABELV $1987
line 4613
;4606:	}
;4607:
;4608://	if (!ucmd->upmove || (self->client->ps.groundEntityNum != ENTITYNUM_NONE && !self->client->ps.fd.forceJumpCharge))
;4609://	{
;4610://		self->client->groundTime = 0;
;4611://	}
;4612:
;4613:	if (self->client->ps.groundEntityNum != ENTITYNUM_NONE)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $1997
line 4614
;4614:	{
line 4615
;4615:		self->client->fjDidJump = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1752
ADDP4
CNSTI4 0
ASGNI4
line 4616
;4616:	}
LABELV $1997
line 4618
;4617:
;4618:	if (self->client->ps.fd.forceJumpCharge && self->client->ps.groundEntityNum == ENTITYNUM_NONE && self->client->fjDidJump)
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
EQF4 $1999
ADDRLP4 72
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $1999
ADDRLP4 72
INDIRP4
CNSTI4 1752
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1999
line 4619
;4619:	{
line 4620
;4620:		if (ucmd->upmove < 10 && /*!(ucmd->buttons & BUTTON_FORCEJUMP) &&*/ (!(ucmd->buttons & BUTTON_FORCEPOWER) || self->client->ps.fd.forcePowerSelected != FP_LEVITATION))
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 26
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
GEI4 $2001
ADDRLP4 76
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2003
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 1
EQI4 $2001
LABELV $2003
line 4621
;4621:		{
line 4622
;4622:			G_MuteSound(self->client->ps.fd.killSoundEntIndex[TRACK_CHANNEL_1-50], CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1192
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 G_MuteSound
CALLV
pop
line 4623
;4623:			self->client->ps.fd.forceJumpCharge = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1084
ADDP4
CNSTF4 0
ASGNF4
line 4624
;4624:		}
LABELV $2001
line 4625
;4625:	}
LABELV $1999
line 4646
;4626:
;4627:	/*
;4628:	if ( (ucmd->buttons & BUTTON_FORCEJUMP) && !BG_HasYsalamiri(g_gametype.integer, &self->client->ps) && BG_CanUseFPNow(g_gametype.integer, &self->client->ps, level.time, FP_LEVITATION) )
;4629:	{//just charging up
;4630:		ForceJumpCharge( self, ucmd );
;4631:		usingForce = qtrue;
;4632:	}
;4633:	*/
;4634:#ifndef METROID_JUMP
;4635:	else if ( /*!self->client->fjDidJump &&*/ (ucmd->upmove > 10) && (self->client->ps.pm_flags & PMF_JUMP_HELD) && self->client->ps.groundTime && (level.time - self->client->ps.groundTime) > 150 && !BG_HasYsalamiri(g_gametype.integer, &self->client->ps) && BG_CanUseFPNow(g_gametype.integer, &self->client->ps, level.time, FP_LEVITATION)/*&& !self->client->ps.fd.forceJumpZStart*/ )
;4636:	{//just charging up
;4637:		ForceJumpCharge( self, ucmd );
;4638:		usingForce = qtrue;
;4639:	}
;4640:	else if (ucmd->upmove < 10 && self->client->ps.groundEntityNum == ENTITYNUM_NONE && self->client->ps.fd.forceJumpCharge)
;4641:	{
;4642:		self->client->ps.pm_flags &= ~(PMF_JUMP_HELD);
;4643:	}
;4644:#endif
;4645:
;4646:	if (/*!(ucmd->buttons & BUTTON_FORCEJUMP) &&*/ !(self->client->ps.pm_flags & PMF_JUMP_HELD) && self->client->ps.fd.forceJumpCharge)
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $2004
ADDRLP4 76
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
EQF4 $2004
line 4647
;4647:	{
line 4648
;4648:		if (!(ucmd->buttons & BUTTON_FORCEPOWER) ||
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2008
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 1
EQI4 $2006
LABELV $2008
line 4650
;4649:			self->client->ps.fd.forcePowerSelected != FP_LEVITATION)
;4650:		{
line 4651
;4651:			if (WP_DoSpecificPower( self, ucmd, FP_LEVITATION ))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 80
ADDRGP4 WP_DoSpecificPower
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $2009
line 4652
;4652:			{
line 4653
;4653:				usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4654
;4654:			}
LABELV $2009
line 4655
;4655:		}
LABELV $2006
line 4656
;4656:	}
LABELV $2004
line 4658
;4657:
;4658:	if ( ucmd->buttons & BUTTON_FORCEGRIP )
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $2011
line 4659
;4659:	{
line 4660
;4660:		if (WP_DoSpecificPower( self, ucmd, FP_GRIP ))
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRLP4 80
ADDRGP4 WP_DoSpecificPower
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $2013
line 4661
;4661:		{
line 4662
;4662:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4663
;4663:		}
ADDRGP4 $2012
JUMPV
LABELV $2013
line 4665
;4664:		else
;4665:		{ //don't let recharge even if the grip misses if the player still has the button down
line 4666
;4666:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4667
;4667:		}
line 4668
;4668:	}
ADDRGP4 $2012
JUMPV
LABELV $2011
line 4670
;4669:	else
;4670:	{
line 4671
;4671:		if (self->client->ps.fd.forcePowersActive & (1 << FP_GRIP))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $2015
line 4672
;4672:		{
line 4673
;4673:			if (!(ucmd->buttons & BUTTON_FORCEPOWER) || self->client->ps.fd.forcePowerSelected != FP_GRIP)
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2019
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 6
EQI4 $2017
LABELV $2019
line 4674
;4674:			{
line 4675
;4675:				WP_ForcePowerStop(self, FP_GRIP);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4676
;4676:			}
LABELV $2017
line 4677
;4677:		}
LABELV $2015
line 4678
;4678:	}
LABELV $2012
line 4680
;4679:
;4680:	if ( ucmd->buttons & BUTTON_FORCE_LIGHTNING )
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $2020
line 4681
;4681:	{
line 4682
;4682:		WP_DoSpecificPower(self, ucmd, FP_LIGHTNING);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRGP4 WP_DoSpecificPower
CALLI4
pop
line 4683
;4683:		usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4684
;4684:	}
ADDRGP4 $2021
JUMPV
LABELV $2020
line 4686
;4685:	else
;4686:	{
line 4687
;4687:		if (self->client->ps.fd.forcePowersActive & (1 << FP_LIGHTNING))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $2022
line 4688
;4688:		{
line 4689
;4689:			if (!(ucmd->buttons & BUTTON_FORCEPOWER) || self->client->ps.fd.forcePowerSelected != FP_LIGHTNING)
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2026
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 7
EQI4 $2024
LABELV $2026
line 4690
;4690:			{
line 4691
;4691:				WP_ForcePowerStop(self, FP_LIGHTNING);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4692
;4692:			}
LABELV $2024
line 4693
;4693:		}
LABELV $2022
line 4694
;4694:	}
LABELV $2021
line 4696
;4695:
;4696:	if ( ucmd->buttons & BUTTON_FORCE_DRAIN )
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $2027
line 4697
;4697:	{
line 4698
;4698:		WP_DoSpecificPower(self, ucmd, FP_DRAIN);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRGP4 WP_DoSpecificPower
CALLI4
pop
line 4699
;4699:		usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4700
;4700:	}
ADDRGP4 $2028
JUMPV
LABELV $2027
line 4702
;4701:	else
;4702:	{
line 4703
;4703:		if (self->client->ps.fd.forcePowersActive & (1 << FP_DRAIN))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $2029
line 4704
;4704:		{
line 4705
;4705:			if (!(ucmd->buttons & BUTTON_FORCEPOWER) || self->client->ps.fd.forcePowerSelected != FP_DRAIN)
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2033
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 13
EQI4 $2031
LABELV $2033
line 4706
;4706:			{
line 4707
;4707:				WP_ForcePowerStop(self, FP_DRAIN);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 13
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4708
;4708:			}
LABELV $2031
line 4709
;4709:		}
LABELV $2029
line 4710
;4710:	}
LABELV $2028
line 4712
;4711:
;4712:	if ( (ucmd->buttons & BUTTON_FORCEPOWER) /*&&
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $2034
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 80
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $2034
line 4716
;4713:		!BG_HasYsalamiri(g_gametype.integer, &self->client->ps)*/ &&
;4714:	//	WP_ForcePowerUsable(self, self->client->ps.fd.forcePowerSelected) &&
;4715:		BG_CanUseFPNow(g_gametype.integer, &self->client->ps, level.time, self->client->ps.fd.forcePowerSelected))
;4716:	{
line 4717
;4717:		if (self->client->ps.fd.forcePowerSelected == FP_LEVITATION /*&& !self->client->fjDidJump*/)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2038
line 4718
;4718:		{
line 4719
;4719:			ForceJumpCharge( self, ucmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 ForceJumpCharge
CALLV
pop
line 4720
;4720:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4721
;4721:		}
ADDRGP4 $2035
JUMPV
LABELV $2038
line 4722
;4722:		else if (WP_DoSpecificPower( self, ucmd, self->client->ps.fd.forcePowerSelected ))
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 WP_DoSpecificPower
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $2040
line 4723
;4723:		{
line 4724
;4724:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4725
;4725:		}
ADDRGP4 $2035
JUMPV
LABELV $2040
line 4726
;4726:		else if (self->client->ps.fd.forcePowerSelected == FP_GRIP)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 6
NEI4 $2035
line 4727
;4727:		{
line 4728
;4728:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4729
;4729:		}
line 4730
;4730:	}
ADDRGP4 $2035
JUMPV
LABELV $2034
line 4732
;4731:	else
;4732:	{
line 4733
;4733:		self->client->ps.fd.forceButtonNeedRelease = 0;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 844
ADDP4
CNSTI4 0
ASGNI4
line 4734
;4734:	}
LABELV $2035
line 4736
;4735:
;4736:	for ( i = 0; i < NUM_FORCE_POWERS; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $2044
line 4737
;4737:	{
line 4738
;4738:		if ( self->client->ps.fd.forcePowerDuration[i] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2048
line 4739
;4739:		{
line 4740
;4740:			if ( self->client->ps.fd.forcePowerDuration[i] < level.time )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $2050
line 4741
;4741:			{
line 4742
;4742:				if ( (self->client->ps.fd.forcePowersActive&( 1 << i )) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $2053
line 4743
;4743:				{//turn it off
line 4744
;4744:					WP_ForcePowerStop( self, (forcePowers_t)i );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerStop
CALLV
pop
line 4745
;4745:				}
LABELV $2053
line 4746
;4746:				self->client->ps.fd.forcePowerDuration[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 848
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 4747
;4747:			}
LABELV $2050
line 4748
;4748:		}
LABELV $2048
line 4749
;4749:		if ( (self->client->ps.fd.forcePowersActive&( 1 << i )) )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $2055
line 4750
;4750:		{
line 4751
;4751:			usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4752
;4752:			WP_ForcePowerRun( self, (forcePowers_t)i, ucmd );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 WP_ForcePowerRun
CALLV
pop
line 4753
;4753:		}
LABELV $2055
line 4754
;4754:	}
LABELV $2045
line 4736
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $2044
line 4755
;4755:	if ( self->client->ps.saberInFlight )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 504
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2057
line 4756
;4756:	{//don't regen force power while throwing saber
line 4757
;4757:		if ( self->client->ps.saberEntityNum < ENTITYNUM_NONE && self->client->ps.saberEntityNum > 0 )//player is 0
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 1023
GEI4 $2059
ADDRLP4 88
INDIRI4
CNSTI4 0
LEI4 $2059
line 4758
;4758:		{//
line 4759
;4759:			if ( &g_entities[self->client->ps.saberEntityNum] != NULL && g_entities[self->client->ps.saberEntityNum].s.pos.trType == TR_LINEAR )
ADDRLP4 92
CNSTI4 828
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 544
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 92
INDIRI4
ADDRGP4 g_entities
ADDP4
CVPU4 4
CNSTU4 0
EQU4 $2061
ADDRLP4 92
INDIRI4
ADDRGP4 g_entities+12
ADDP4
INDIRI4
CNSTI4 2
NEI4 $2061
line 4760
;4760:			{//fell to the ground and we're trying to pull it back
line 4761
;4761:				usingForce = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 4762
;4762:			}
LABELV $2061
line 4763
;4763:		}
LABELV $2059
line 4764
;4764:	}
LABELV $2057
line 4765
;4765:	if ( /*!usingForce*/!self->client->ps.fd.forcePowersActive || self->client->ps.fd.forcePowersActive == (1 << FP_DRAIN) )
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $2066
ADDRLP4 88
INDIRI4
CNSTI4 8192
NEI4 $2064
LABELV $2066
line 4766
;4766:	{//when not using the force, regenerate at 1 point per half second
line 4767
;4767:		if ( !self->client->ps.saberInFlight && self->client->ps.fd.forcePowerRegenDebounceTime < level.time )
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 504
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2067
ADDRLP4 92
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
GEI4 $2067
line 4768
;4768:		{
line 4769
;4769:			if (g_gametype.integer != GT_HOLOCRON || g_MaxHolocronCarry.value)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 1
NEI4 $2074
ADDRGP4 g_MaxHolocronCarry+8
INDIRF4
CNSTF4 0
EQF4 $2070
LABELV $2074
line 4770
;4770:			{
line 4771
;4771:				if (self->client->ps.powerups[PW_FORCE_BOON])
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 400
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2075
line 4772
;4772:				{
line 4773
;4773:					WP_ForcePowerRegenerate( self, 6 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 WP_ForcePowerRegenerate
CALLV
pop
line 4774
;4774:				}
ADDRGP4 $2071
JUMPV
LABELV $2075
line 4775
;4775:				else if (self->client->ps.isJediMaster && g_gametype.integer == GT_JEDIMASTER)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2077
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $2077
line 4776
;4776:				{
line 4777
;4777:					WP_ForcePowerRegenerate( self, 4 ); //jedi master regenerates 4 times as fast
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 WP_ForcePowerRegenerate
CALLV
pop
line 4778
;4778:				}
ADDRGP4 $2071
JUMPV
LABELV $2077
line 4780
;4779:				else
;4780:				{
line 4781
;4781:					WP_ForcePowerRegenerate( self, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 WP_ForcePowerRegenerate
CALLV
pop
line 4782
;4782:				}
line 4783
;4783:			}
ADDRGP4 $2071
JUMPV
LABELV $2070
line 4785
;4784:			else
;4785:			{ //regenerate based on the number of holocrons carried
line 4786
;4786:				holoregen = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 4787
;4787:				holo = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $2081
JUMPV
LABELV $2080
line 4789
;4788:				while (holo < NUM_FORCE_POWERS)
;4789:				{
line 4790
;4790:					if (self->client->ps.holocronsCarried[holo])
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 632
ADDP4
ADDP4
INDIRF4
CNSTF4 0
EQF4 $2083
line 4791
;4791:					{
line 4792
;4792:						holoregen++;
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4793
;4793:					}
LABELV $2083
line 4794
;4794:					holo++;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4795
;4795:				}
LABELV $2081
line 4788
ADDRLP4 12
INDIRI4
CNSTI4 18
LTI4 $2080
line 4797
;4796:
;4797:				WP_ForcePowerRegenerate(self, holoregen);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 WP_ForcePowerRegenerate
CALLV
pop
line 4798
;4798:			}
LABELV $2071
line 4800
;4799:
;4800:			self->client->ps.fd.forcePowerRegenDebounceTime = level.time + g_forceRegenTime.integer; //500?
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_forceRegenTime+12
INDIRI4
ADDI4
ASGNI4
line 4801
;4801:		}
LABELV $2067
line 4802
;4802:	}
LABELV $2064
LABELV $1996
line 4806
;4803:
;4804:powersetcheck:
;4805:
;4806:	if (prepower && self->client->ps.fd.forcePower < prepower)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $2087
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
GEI4 $2087
line 4807
;4807:	{
line 4808
;4808:		int dif = ((prepower - self->client->ps.fd.forcePower)/2);
ADDRLP4 96
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
SUBI4
CNSTI4 2
DIVI4
ASGNI4
line 4809
;4809:		if (dif < 1)
ADDRLP4 96
INDIRI4
CNSTI4 1
GEI4 $2089
line 4810
;4810:		{
line 4811
;4811:			dif = 1;
ADDRLP4 96
CNSTI4 1
ASGNI4
line 4812
;4812:		}
LABELV $2089
line 4814
;4813:
;4814:		self->client->ps.fd.forcePower = (prepower-dif);
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 920
ADDP4
ADDRLP4 8
INDIRI4
ADDRLP4 96
INDIRI4
SUBI4
ASGNI4
line 4815
;4815:	}
LABELV $2087
line 4816
;4816:}
LABELV $1870
endproc WP_ForcePowersUpdate 132 32
export Jedi_DodgeEvasion
proc Jedi_DodgeEvasion 28 12
line 4819
;4817:
;4818:qboolean Jedi_DodgeEvasion( gentity_t *self, gentity_t *shooter, trace_t *tr, int hitLoc )
;4819:{
line 4820
;4820:	int	dodgeAnim = -1;
ADDRLP4 0
CNSTI4 -1
ASGNI4
line 4822
;4821:
;4822:	if ( !self || !self->client || self->health <= 0 )
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
CNSTU4 0
ASGNU4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
EQU4 $2095
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
EQU4 $2095
ADDRLP4 4
INDIRP4
CNSTI4 676
ADDP4
INDIRI4
CNSTI4 0
GTI4 $2092
LABELV $2095
line 4823
;4823:	{
line 4824
;4824:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2092
line 4827
;4825:	}
;4826:
;4827:	if (!g_forceDodge.integer)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 0
NEI4 $2096
line 4828
;4828:	{
line 4829
;4829:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2096
line 4832
;4830:	}
;4831:
;4832:	if (g_forceDodge.integer != 2)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 2
EQI4 $2099
line 4833
;4833:	{
line 4834
;4834:		if (!(self->client->ps.fd.forcePowersActive & (1 << FP_SEE)))
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
NEI4 $2102
line 4835
;4835:		{
line 4836
;4836:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2102
line 4838
;4837:		}
;4838:	}
LABELV $2099
line 4840
;4839:
;4840:	if (self->client->ps.usingATST)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2104
line 4841
;4841:	{
line 4842
;4842:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2104
line 4845
;4843:	}
;4844:
;4845:	if ( self->client->ps.groundEntityNum == ENTITYNUM_NONE )
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $2106
line 4846
;4846:	{//can't dodge in mid-air
line 4847
;4847:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2106
line 4850
;4848:	}
;4849:
;4850:	if ( self->client->ps.weaponTime > 0 || self->client->ps.forceHandExtend != HANDEXTEND_NONE )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
GTI4 $2110
ADDRLP4 12
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $2108
LABELV $2110
line 4851
;4851:	{//in some effect that stops me from moving on my own
line 4852
;4852:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2108
line 4855
;4853:	}
;4854:
;4855:	if (g_forceDodge.integer == 2)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 2
NEI4 $2111
line 4856
;4856:	{
line 4857
;4857:		if (self->client->ps.fd.forcePowersActive)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 0
EQI4 $2114
line 4858
;4858:		{ //for now just don't let us dodge if we're using a force power at all
line 4859
;4859:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2114
line 4861
;4860:		}
;4861:	}
LABELV $2111
line 4863
;4862:
;4863:	if (g_forceDodge.integer == 2)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 2
NEI4 $2116
line 4864
;4864:	{
line 4865
;4865:		if ( !WP_ForcePowerUsable( self, FP_SPEED ) )
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRLP4 20
ADDRGP4 WP_ForcePowerUsable
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $2119
line 4866
;4866:		{//make sure we have it and have enough force power
line 4867
;4867:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2119
line 4869
;4868:		}
;4869:	}
LABELV $2116
line 4874
;4870:
;4871:	//check force speed power level to determine if I should be able to dodge it
;4872://	if ( Q_irand( 1, 10 ) > self->client->ps.fd.forcePowerLevel[FP_SPEED] )
;4873:
;4874:	if (g_forceDodge.integer == 2)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 2
NEI4 $2121
line 4875
;4875:	{
line 4876
;4876:		if ( Q_irand( 1, 7 ) > self->client->ps.fd.forcePowerLevel[FP_SPEED] )
CNSTI4 1
ARGI4
CNSTI4 7
ARGI4
ADDRLP4 20
ADDRGP4 Q_irand
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
LEI4 $2122
line 4877
;4877:		{//more likely to fail on lower force speed level
line 4878
;4878:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
line 4880
;4879:		}
;4880:	}
LABELV $2121
line 4882
;4881:	else
;4882:	{
line 4885
;4883:		//if ( Q_irand( 1, 4 ) > self->client->ps.fd.forcePowerLevel[FP_SEE] )
;4884:		//NOTE: We now dodge all the time, but only on level 3
;4885:		if (self->client->ps.fd.forcePowerLevel[FP_SEE] < FORCE_LEVEL_3)
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 988
ADDP4
INDIRI4
CNSTI4 3
GEI4 $2126
line 4886
;4886:		{//more likely to fail on lower force sight level
line 4887
;4887:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2126
line 4889
;4888:		}
;4889:	}
LABELV $2122
line 4891
;4890:
;4891:	switch( hitLoc )
ADDRLP4 20
ADDRFP4 12
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
LTI4 $2128
ADDRLP4 20
INDIRI4
CNSTI4 16
GTI4 $2128
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $2140
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $2140
address $2130
address $2131
address $2131
address $2131
address $2131
address $2136
address $2132
address $2134
address $2136
address $2133
address $2135
address $2136
address $2137
address $2138
address $2137
address $2138
address $2139
code
line 4892
;4892:	{
LABELV $2130
line 4894
;4893:	case HL_NONE:
;4894:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
line 4895
;4895:		break;
LABELV $2131
line 4902
;4896:
;4897:	case HL_FOOT_RT:
;4898:	case HL_FOOT_LT:
;4899:	case HL_LEG_RT:
;4900:	case HL_LEG_LT:
;4901:	//case HL_WAIST:
;4902:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2132
line 4905
;4903:
;4904:	case HL_BACK_RT:
;4905:		dodgeAnim = BOTH_DODGE_FL;
ADDRLP4 0
CNSTI4 793
ASGNI4
line 4906
;4906:		break;
ADDRGP4 $2129
JUMPV
LABELV $2133
line 4908
;4907:	case HL_CHEST_RT:
;4908:		dodgeAnim = BOTH_DODGE_FR;//BOTH_DODGE_BL;
ADDRLP4 0
CNSTI4 794
ASGNI4
line 4909
;4909:		break;
ADDRGP4 $2129
JUMPV
LABELV $2134
line 4911
;4910:	case HL_BACK_LT:
;4911:		dodgeAnim = BOTH_DODGE_FR;
ADDRLP4 0
CNSTI4 794
ASGNI4
line 4912
;4912:		break;
ADDRGP4 $2129
JUMPV
LABELV $2135
line 4914
;4913:	case HL_CHEST_LT:
;4914:		dodgeAnim = BOTH_DODGE_FR;//BOTH_DODGE_BR;
ADDRLP4 0
CNSTI4 794
ASGNI4
line 4915
;4915:		break;
ADDRGP4 $2129
JUMPV
LABELV $2136
line 4919
;4916:	case HL_BACK:
;4917:	case HL_CHEST:
;4918:	case HL_WAIST:
;4919:		dodgeAnim = BOTH_DODGE_FL;//Q_irand( BOTH_DODGE_FL, BOTH_DODGE_R );
ADDRLP4 0
CNSTI4 793
ASGNI4
line 4920
;4920:		break;
ADDRGP4 $2129
JUMPV
LABELV $2137
line 4923
;4921:	case HL_ARM_RT:
;4922:	case HL_HAND_RT:
;4923:		dodgeAnim = BOTH_DODGE_L;
ADDRLP4 0
CNSTI4 797
ASGNI4
line 4924
;4924:		break;
ADDRGP4 $2129
JUMPV
LABELV $2138
line 4927
;4925:	case HL_ARM_LT:
;4926:	case HL_HAND_LT:
;4927:		dodgeAnim = BOTH_DODGE_R;
ADDRLP4 0
CNSTI4 798
ASGNI4
line 4928
;4928:		break;
ADDRGP4 $2129
JUMPV
LABELV $2139
line 4930
;4929:	case HL_HEAD:
;4930:		dodgeAnim = BOTH_DODGE_FL;//Q_irand( BOTH_DODGE_FL, BOTH_DODGE_BR );
ADDRLP4 0
CNSTI4 793
ASGNI4
line 4931
;4931:		break;
ADDRGP4 $2129
JUMPV
LABELV $2128
line 4933
;4932:	default:
;4933:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2129
line 4936
;4934:	}
;4935:
;4936:	if ( dodgeAnim != -1 )
ADDRLP4 0
INDIRI4
CNSTI4 -1
EQI4 $2141
line 4937
;4937:	{
line 4942
;4938:		//set the dodge anim we chose
;4939:		//NPC_SetAnim( self, SETANIM_BOTH, dodgeAnim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD );//type
;4940:
;4941:		//Our own happy way of forcing an anim:
;4942:		self->client->ps.forceHandExtend = HANDEXTEND_DODGE;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 7
ASGNI4
line 4943
;4943:		self->client->ps.forceDodgeAnim = dodgeAnim;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 4944
;4944:		self->client->ps.forceHandExtendTime = level.time + 300;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 4946
;4945:
;4946:		self->client->ps.powerups[PW_SPEEDBURST] = level.time + 100;
ADDRFP4 0
INDIRP4
CNSTI4 408
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 4948
;4947:
;4948:		if (g_forceDodge.integer == 2)
ADDRGP4 g_forceDodge+12
INDIRI4
CNSTI4 2
NEI4 $2145
line 4949
;4949:		{
line 4950
;4950:			ForceSpeed( self, 500 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 500
ARGI4
ADDRGP4 ForceSpeed
CALLV
pop
line 4951
;4951:		}
ADDRGP4 $2146
JUMPV
LABELV $2145
line 4953
;4952:		else
;4953:		{
line 4954
;4954:			G_Sound( self, CHAN_BODY, G_SoundIndex("sound/weapons/force/speed.wav") );
ADDRGP4 $529
ARGP4
ADDRLP4 24
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRGP4 G_Sound
CALLV
pop
line 4955
;4955:		}
LABELV $2146
line 4956
;4956:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $2091
JUMPV
LABELV $2141
line 4958
;4957:	}
;4958:	return qfalse;
CNSTI4 0
RETI4
LABELV $2091
endproc Jedi_DodgeEvasion 28 12
import ucmd
import g_TimeSinceLastFrame
import g_LastFrameTime
import botstates
import floattime
import gLevelFlags
import nodenum
import nodetable
import gLastPrintedIndex
import gWPNum
import gWPArray
import gWPRenderedFrame
import gBotEdit
import gDeactivated
import gWPRenderTime
import gBotChatBuffer
import eFlagBlue
import eFlagRed
import oFlagBlue
import flagBlue
import oFlagRed
import flagRed
import bot_wp_visconnect
import bot_wp_distconnect
import bot_wp_clearweight
import bot_wp_edit
import bot_wp_info
import bot_camp
import bot_attachments
import bot_forgimmick
import bot_forcepowers
import ConcatArgs
import GetBestIdleGoal
import GetNearestVisibleWP
import BotIsAChickenWuss
import OrgVisibleBox
import BotWaypointRender
import StandardBotAI
import BotDoChat
import BotUtilizePersonality
import NumBots
import BotResetState
import B_Free
import B_Alloc
import B_TempFree
import B_TempAlloc
import forceJumpStrength
import forceJumpHeight
import forcePowerNeeded
import g_MaxHolocronCarry
import trap_ROFF_Purge_Ent
import trap_ROFF_Play
import trap_ROFF_Cache
import trap_ROFF_UpdateEntities
import trap_ROFF_Clean
import trap_SP_GetStringTextString
import trap_SP_Register
import trap_SP_RegisterServer
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_ForcePower
import trap_EA_Alt_Attack
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_timeouttospec
import g_forceDodge
import g_dismember
import g_singlePlayer
import g_enableBreath
import g_enableDust
import g_rankings
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_blueteam
import g_redteam
import g_debugUp
import g_debugRight
import g_debugForward
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_motd
import g_synchronousClients
import g_adaptRespawn
import g_weaponTeamRespawn
import g_weaponRespawn
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_inactivity
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_gravity
import g_needpass
import g_password
import g_friendlySaber
import g_friendlyFire
import g_saberInterpolate
import g_capturelimit
import g_timelimit
import g_duel_fraglimit
import g_fraglimit
import g_duelWeaponDisable
import g_weaponDisable
import g_forcePowerDisable
import g_spawnInvulnerability
import g_forceRegenTime
import g_saberLocking
import g_privateDuel
import g_forceBasedTeams
import g_maxForceRank
import g_dmflags
import g_autoMapCycle
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_entities
import level
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import SelectSagaSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import B_CleanupAlloc
import B_InitAlloc
import InFieldOfVision
import BotOrder
import OrgVisible
import InitSagaMode
import G_ClearClientLog
import G_LogExit
import G_LogWeaponOutput
import G_LogWeaponInit
import G_LogWeaponItem
import G_LogWeaponPowerup
import G_LogWeaponFrag
import G_LogWeaponDeath
import G_LogWeaponKill
import G_LogWeaponDamage
import G_LogWeaponFire
import G_LogWeaponPickup
import WP_SaberInitBladeData
import WP_SaberCanBlock
import WP_SaberPositionUpdate
import HasSetSaberOnly
import G_RefreshNextMap
import G_DoesMapSupportGametype
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_InitMemory
import G_Alloc
import Team_CheckDroppedItem
import OnSameTeam
import G_RunClient
import ClientEndFrame
import ClientThink
import G_CheckClientTimeouts
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_GetStripEdString
import G_Error
import G_Printf
import SendScoreboardMessageToAllClients
import G_LogPrintf
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import g_ff_objectives
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import BlowDetpacks
import FireWeapon
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import gJMSaberEnt
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import BeginIntermission
import respawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import TeamCount
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import WP_FireGenericBlasterMissile
import WP_FireTurretMissile
import G_PlayerBecomeATST
import ATST_ManageDamageBoxes
import TeleportPlayer
import trigger_teleporter_touch
import Touch_DoorTrigger
import G_RunMover
import WP_FireBlasterMissile
import G_ExplodeMissile
import G_BounceProjectile
import CreateMissile
import G_RunMissile
import G_ReflectMissile
import ExplodeDeath
import TossClientCubes
import TossClientItems
import TossClientWeapon
import body_die
import G_RadiusDamage
import G_Damage
import CanDamage
import trap_G2API_SetBoneAnim
import trap_G2API_GetGLAName
import trap_G2API_SetBoneAngles
import trap_G2API_CleanGhoul2Models
import trap_G2API_RemoveGhoul2Model
import trap_G2API_HasGhoul2ModelOnIndex
import trap_G2API_DuplicateGhoul2Instance
import trap_G2API_CopySpecificGhoul2Model
import trap_G2API_CopyGhoul2Instance
import trap_G2API_SetBoltInfo
import trap_G2API_AddBolt
import trap_G2API_InitGhoul2Model
import trap_G2API_GetBoltMatrix_NoReconstruct
import trap_G2API_GetBoltMatrix
import trap_G2_HaveWeGhoul2Models
import trap_G2_SetGhoul2ModelIndexes
import trap_G2_ListModelBones
import trap_G2_ListModelSurfaces
import G_SkinIndex
import BuildShaderStateConfig
import AddRemap
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_RunObject
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_KillG2Queue
import G_SendG2KillQueue
import TryUse
import G_EntitySound
import G_SoundAtLoc
import G_Sound
import G_MuteSound
import G_ScreenShake
import G_PlayEffect
import G_TempEntity
import G_Spawn
import G_InitGentity
import G_SetAngles
import G_SetMovedir
import G_UseTargets
import G_PickTarget
import G_RadiusList
import G_Find
import G_KillBox
import G_TeamCommand
import G_EffectIndex
import G_SoundIndex
import G_ModelIndex
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import ItemUse_MedPack
import ItemUse_Seeker
import ItemUse_Sentry
import ItemUse_Shield
import ItemUse_Binoculars
import G_GetDuelWinner
import Cmd_EngageDuel_f
import Cmd_ToggleSaber_f
import G_ItemUsable
import Cmd_SaberAttackCycle_f
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import g2SaberInstance
import precachedKyle
import forcePowerDarkLight
import WeaponAttackAnim
import WeaponReadyAnim
import BG_OutOfMemory
import BG_StringAlloc
import BG_TempFree
import BG_TempAlloc
import BG_AllocUnaligned
import BG_Alloc
import BG_CanUseFPNow
import BG_HasYsalamiri
import BG_GetItemIndexByTag
import BG_ParseAnimationFile
import BG_PlayerTouchesItem
import BG_G2PlayerAngles
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_ForcePowerDrain
import BG_SaberStartTransAnim
import BG_InDeathAnim
import BG_InRoll
import BG_SaberInSpecialAttack
import BG_SpinningSaberAnim
import BG_FlippingAnim
import BG_SaberInIdle
import BG_SaberInSpecial
import BG_SaberInAttack
import BG_DirectFlippingAnim
import BG_InSaberStandAnim
import BG_InSpecialJump
import BG_LegalizedForcePowers
import saberMoveData
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import vectoyaw
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import pm
import bgForcePowerCost
import forceMasteryPoints
import forceMasteryLevels
import bgGlobalAnimations
import BGPAFtextLoaded
import forcePowerSorted
import WP_MuzzlePoint
import ammoData
import weaponData
import GetStringForID
import GetIDForString
import Q_irand
import irand
import flrand
import Rand_Init
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import SkipWhitespace
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import powf
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkBlue
import colorLtBlue
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import colorTable
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import forceSpeedLevels
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1910
char 1 42
char 1 106
char 1 117
char 1 109
char 1 112
char 1 49
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1819
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 98
char 1 114
char 1 121
char 1 97
char 1 114
char 1 47
char 1 102
char 1 105
char 1 114
char 1 101
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1753
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 108
char 1 97
char 1 115
char 1 101
char 1 114
char 1 95
char 1 116
char 1 114
char 1 97
char 1 112
char 1 47
char 1 119
char 1 97
char 1 114
char 1 110
char 1 105
char 1 110
char 1 103
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1475
char 1 42
char 1 99
char 1 104
char 1 111
char 1 107
char 1 101
char 1 37
char 1 100
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1395
char 1 42
char 1 103
char 1 97
char 1 115
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1380
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 100
char 1 105
char 1 115
char 1 116
char 1 114
char 1 97
char 1 99
char 1 116
char 1 115
char 1 116
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1175
char 1 108
char 1 105
char 1 109
char 1 98
char 1 0
align 1
LABELV $1171
char 1 102
char 1 117
char 1 110
char 1 99
char 1 95
char 1 100
char 1 111
char 1 111
char 1 114
char 1 0
align 1
LABELV $1168
char 1 108
char 1 105
char 1 103
char 1 104
char 1 116
char 1 115
char 1 97
char 1 98
char 1 101
char 1 114
char 1 0
align 1
LABELV $1089
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 112
char 1 117
char 1 108
char 1 108
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $1085
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 112
char 1 117
char 1 115
char 1 104
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $987
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 100
char 1 105
char 1 115
char 1 116
char 1 114
char 1 97
char 1 99
char 1 116
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $865
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 106
char 1 117
char 1 109
char 1 112
char 1 98
char 1 117
char 1 105
char 1 108
char 1 100
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $722
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 100
char 1 114
char 1 97
char 1 105
char 1 110
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $624
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 108
char 1 105
char 1 103
char 1 104
char 1 116
char 1 110
char 1 105
char 1 110
char 1 103
char 1 104
char 1 105
char 1 116
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $599
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 108
char 1 105
char 1 103
char 1 104
char 1 116
char 1 110
char 1 105
char 1 110
char 1 103
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $584
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 114
char 1 97
char 1 103
char 1 101
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $539
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 115
char 1 101
char 1 101
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $529
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 115
char 1 112
char 1 101
char 1 101
char 1 100
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $393
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 104
char 1 101
char 1 97
char 1 108
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $195
char 1 110
char 1 102
char 1 114
char 1 32
char 1 37
char 1 105
char 1 32
char 1 37
char 1 105
char 1 32
char 1 37
char 1 105
char 1 0
align 1
LABELV $128
char 1 37
char 1 115
char 1 0
char 1 0
align 1
LABELV $125
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 112
char 1 111
char 1 119
char 1 101
char 1 114
char 1 115
char 1 0
align 1
LABELV $121
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 112
char 1 108
char 1 97
char 1 121
char 1 101
char 1 114
char 1 47
char 1 110
char 1 117
char 1 108
char 1 108
char 1 105
char 1 102
char 1 121
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $118
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 115
char 1 101
char 1 101
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $115
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 112
char 1 114
char 1 111
char 1 116
char 1 101
char 1 99
char 1 116
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $112
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 97
char 1 98
char 1 115
char 1 111
char 1 114
char 1 98
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $109
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 114
char 1 97
char 1 103
char 1 101
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
align 1
LABELV $106
char 1 115
char 1 111
char 1 117
char 1 110
char 1 100
char 1 47
char 1 119
char 1 101
char 1 97
char 1 112
char 1 111
char 1 110
char 1 115
char 1 47
char 1 102
char 1 111
char 1 114
char 1 99
char 1 101
char 1 47
char 1 115
char 1 112
char 1 101
char 1 101
char 1 100
char 1 108
char 1 111
char 1 111
char 1 112
char 1 46
char 1 119
char 1 97
char 1 118
char 1 0
