data
export gPMDoSlowFall
align 4
LABELV gPMDoSlowFall
byte 4 0
export pm_stopspeed
align 4
LABELV pm_stopspeed
byte 4 1120403456
export pm_duckScale
align 4
LABELV pm_duckScale
byte 4 1056964608
export pm_swimScale
align 4
LABELV pm_swimScale
byte 4 1056964608
export pm_wadeScale
align 4
LABELV pm_wadeScale
byte 4 1060320051
export pm_accelerate
align 4
LABELV pm_accelerate
byte 4 1092616192
export pm_airaccelerate
align 4
LABELV pm_airaccelerate
byte 4 1065353216
export pm_wateraccelerate
align 4
LABELV pm_wateraccelerate
byte 4 1082130432
export pm_flyaccelerate
align 4
LABELV pm_flyaccelerate
byte 4 1090519040
export pm_friction
align 4
LABELV pm_friction
byte 4 1086324736
export pm_waterfriction
align 4
LABELV pm_waterfriction
byte 4 1065353216
export pm_flightfriction
align 4
LABELV pm_flightfriction
byte 4 1077936128
export pm_spectatorfriction
align 4
LABELV pm_spectatorfriction
byte 4 1084227584
export c_pmove
align 4
LABELV c_pmove
byte 4 0
export forceSpeedLevels
align 4
LABELV forceSpeedLevels
byte 4 1065353216
byte 4 1067450368
byte 4 1069547520
byte 4 1071644672
export forcePowerNeeded
align 4
LABELV forcePowerNeeded
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 999
byte 4 25
byte 4 10
byte 4 50
byte 4 20
byte 4 20
byte 4 20
byte 4 30
byte 4 1
byte 4 50
byte 4 50
byte 4 50
byte 4 50
byte 4 50
byte 4 10
byte 4 20
byte 4 0
byte 4 2
byte 4 20
byte 4 25
byte 4 10
byte 4 50
byte 4 20
byte 4 20
byte 4 20
byte 4 30
byte 4 1
byte 4 50
byte 4 25
byte 4 25
byte 4 33
byte 4 33
byte 4 10
byte 4 20
byte 4 0
byte 4 1
byte 4 20
byte 4 25
byte 4 10
byte 4 50
byte 4 20
byte 4 20
byte 4 20
byte 4 60
byte 4 1
byte 4 50
byte 4 10
byte 4 10
byte 4 25
byte 4 25
byte 4 10
byte 4 20
byte 4 0
byte 4 0
byte 4 20
export forceJumpHeight
align 4
LABELV forceJumpHeight
byte 4 1107296256
byte 4 1119879168
byte 4 1128267776
byte 4 1136656384
export forceJumpStrength
align 4
LABELV forceJumpStrength
byte 4 1130430464
byte 4 1137836032
byte 4 1142128640
byte 4 1146224640
export PM_GetSaberStance
code
proc PM_GetSaberStance 0 0
file "../bg_pmove.c"
line 148
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:// bg_pmove.c -- both games player movement code
;4:// takes a playerstate and a usercmd as input and returns a modifed playerstate
;5:
;6:#include "q_shared.h"
;7:#include "bg_public.h"
;8:#include "bg_local.h"
;9:
;10:#define MAX_WEAPON_CHARGE_TIME 5000
;11:
;12:pmove_t		*pm;
;13:pml_t		pml;
;14:
;15:qboolean gPMDoSlowFall = qfalse;
;16:
;17:// movement parameters
;18:float	pm_stopspeed = 100.0f;
;19:float	pm_duckScale = 0.50f;
;20:float	pm_swimScale = 0.50f;
;21:float	pm_wadeScale = 0.70f;
;22:
;23:float	pm_accelerate = 10.0f;
;24:float	pm_airaccelerate = 1.0f;
;25:float	pm_wateraccelerate = 4.0f;
;26:float	pm_flyaccelerate = 8.0f;
;27:
;28:float	pm_friction = 6.0f;
;29:float	pm_waterfriction = 1.0f;
;30:float	pm_flightfriction = 3.0f;
;31:float	pm_spectatorfriction = 5.0f;
;32:
;33:int		c_pmove = 0;
;34:
;35:float forceSpeedLevels[4] = 
;36:{
;37:	1, //rank 0?
;38:	1.25,
;39:	1.5,
;40:	1.75
;41:};
;42:
;43:int forcePowerNeeded[NUM_FORCE_POWER_LEVELS][NUM_FORCE_POWERS] = 
;44:{
;45:	{ //nothing should be usable at rank 0..
;46:		999,//FP_HEAL,//instant
;47:		999,//FP_LEVITATION,//hold/duration
;48:		999,//FP_SPEED,//duration
;49:		999,//FP_PUSH,//hold/duration
;50:		999,//FP_PULL,//hold/duration
;51:		999,//FP_TELEPATHY,//instant
;52:		999,//FP_GRIP,//hold/duration
;53:		999,//FP_LIGHTNING,//hold/duration
;54:		999,//FP_RAGE,//duration
;55:		999,//FP_PROTECT,//duration
;56:		999,//FP_ABSORB,//duration
;57:		999,//FP_TEAM_HEAL,//instant
;58:		999,//FP_TEAM_FORCE,//instant
;59:		999,//FP_DRAIN,//hold/duration
;60:		999,//FP_SEE,//duration
;61:		999,//FP_SABERATTACK,
;62:		999,//FP_SABERDEFEND,
;63:		999//FP_SABERTHROW,
;64:		//NUM_FORCE_POWERS
;65:	},
;66:	{
;67:		25,//FP_HEAL,//instant
;68:		10,//FP_LEVITATION,//hold/duration
;69:		50,//FP_SPEED,//duration
;70:		20,//FP_PUSH,//hold/duration
;71:		20,//FP_PULL,//hold/duration
;72:		20,//FP_TELEPATHY,//instant
;73:		30,//FP_GRIP,//hold/duration
;74:		1,//FP_LIGHTNING,//hold/duration
;75:		50,//FP_RAGE,//duration
;76:		50,//FP_PROTECT,//duration
;77:		50,//FP_ABSORB,//duration
;78:		50,//FP_TEAM_HEAL,//instant
;79:		50,//FP_TEAM_FORCE,//instant
;80:		10,//FP_DRAIN,//hold/duration
;81:		20,//FP_SEE,//duration
;82:		0,//FP_SABERATTACK,
;83:		2,//FP_SABERDEFEND,
;84:		20//FP_SABERTHROW,
;85:		//NUM_FORCE_POWERS
;86:	},
;87:	{
;88:		25,//FP_HEAL,//instant
;89:		10,//FP_LEVITATION,//hold/duration
;90:		50,//FP_SPEED,//duration
;91:		20,//FP_PUSH,//hold/duration
;92:		20,//FP_PULL,//hold/duration
;93:		20,//FP_TELEPATHY,//instant
;94:		30,//FP_GRIP,//hold/duration
;95:		1,//FP_LIGHTNING,//hold/duration
;96:		50,//FP_RAGE,//duration
;97:		25,//FP_PROTECT,//duration
;98:		25,//FP_ABSORB,//duration
;99:		33,//FP_TEAM_HEAL,//instant
;100:		33,//FP_TEAM_FORCE,//instant
;101:		10,//FP_DRAIN,//hold/duration
;102:		20,//FP_SEE,//duration
;103:		0,//FP_SABERATTACK,
;104:		1,//FP_SABERDEFEND,
;105:		20//FP_SABERTHROW,
;106:		//NUM_FORCE_POWERS
;107:	},
;108:	{
;109:		25,//FP_HEAL,//instant
;110:		10,//FP_LEVITATION,//hold/duration
;111:		50,//FP_SPEED,//duration
;112:		20,//FP_PUSH,//hold/duration
;113:		20,//FP_PULL,//hold/duration
;114:		20,//FP_TELEPATHY,//instant
;115:		60,//FP_GRIP,//hold/duration
;116:		1,//FP_LIGHTNING,//hold/duration
;117:		50,//FP_RAGE,//duration
;118:		10,//FP_PROTECT,//duration
;119:		10,//FP_ABSORB,//duration
;120:		25,//FP_TEAM_HEAL,//instant
;121:		25,//FP_TEAM_FORCE,//instant
;122:		10,//FP_DRAIN,//hold/duration
;123:		20,//FP_SEE,//duration
;124:		0,//FP_SABERATTACK,
;125:		0,//FP_SABERDEFEND,
;126:		20//FP_SABERTHROW,
;127:		//NUM_FORCE_POWERS
;128:	}
;129:};
;130:
;131:float forceJumpHeight[NUM_FORCE_POWER_LEVELS] = 
;132:{
;133:	32,//normal jump (+stepheight+crouchdiff = 66)
;134:	96,//(+stepheight+crouchdiff = 130)
;135:	192,//(+stepheight+crouchdiff = 226)
;136:	384//(+stepheight+crouchdiff = 418)
;137:};
;138:
;139:float forceJumpStrength[NUM_FORCE_POWER_LEVELS] = 
;140:{
;141:	JUMP_VELOCITY,//normal jump
;142:	420,
;143:	590,
;144:	840
;145:};
;146:
;147:int PM_GetSaberStance(void)
;148:{
line 158
;149:	//if (pm->ps->fd.saberAnimLevel == FORCE_LEVEL_2)	//Boot
;150:	//{ //medium
;151:	//	return BOTH_STAND2;
;152:	//}
;153:	//if (pm->ps->fd.saberAnimLevel == FORCE_LEVEL_3)	//Remove red for now
;154:	//{ //strong
;155:	//	return BOTH_SABERSLOW_STANCE;
;156:	//}
;157:
;158:	return BOTH_STAND2;		//Boot - remove blue saber stance for players.
CNSTI4 553
RETI4
LABELV $65
endproc PM_GetSaberStance 0 0
export PM_DoSlowFall
proc PM_DoSlowFall 4 0
line 166
;159:		
;160:
;161:	//fast
;162:	//return BOTH_SABERFAST_STANCE;	//Boot
;163:}
;164:
;165:qboolean PM_DoSlowFall(void)
;166:{
line 167
;167:	if ( ( (pm->ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT || (pm->ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_LEFT ) && pm->ps->legsTimer > 500 )
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 820
EQI4 $69
ADDRLP4 0
INDIRI4
CNSTI4 823
NEI4 $67
LABELV $69
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 500
LEI4 $67
line 168
;168:	{
line 169
;169:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $66
JUMPV
LABELV $67
line 172
;170:	}
;171:
;172:	return qfalse;
CNSTI4 0
RETI4
LABELV $66
endproc PM_DoSlowFall 4 0
export PM_AddEvent
proc PM_AddEvent 0 12
line 181
;173:}
;174:
;175:/*
;176:===============
;177:PM_AddEvent
;178:
;179:===============
;180:*/
;181:void PM_AddEvent( int newEvent ) {
line 182
;182:	BG_AddPredictableEventToPlayerstate( newEvent, 0, pm->ps );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
ADDRGP4 BG_AddPredictableEventToPlayerstate
CALLV
pop
line 183
;183:}
LABELV $70
endproc PM_AddEvent 0 12
export PM_AddEventWithParm
proc PM_AddEventWithParm 0 12
line 186
;184:
;185:void PM_AddEventWithParm( int newEvent, int parm ) 
;186:{
line 187
;187:	BG_AddPredictableEventToPlayerstate( newEvent, parm, pm->ps );
ADDRFP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
ADDRGP4 BG_AddPredictableEventToPlayerstate
CALLV
pop
line 188
;188:}
LABELV $71
endproc PM_AddEventWithParm 0 12
export PM_AddTouchEnt
proc PM_AddTouchEnt 12 0
line 195
;189:
;190:/*
;191:===============
;192:PM_AddTouchEnt
;193:===============
;194:*/
;195:void PM_AddTouchEnt( int entityNum ) {
line 198
;196:	int		i;
;197:
;198:	if ( entityNum == ENTITYNUM_WORLD ) {
ADDRFP4 0
INDIRI4
CNSTI4 1022
NEI4 $73
line 199
;199:		return;
ADDRGP4 $72
JUMPV
LABELV $73
line 201
;200:	}
;201:	if ( pm->numtouch == MAXTOUCH ) {
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 32
NEI4 $75
line 202
;202:		return;
ADDRGP4 $72
JUMPV
LABELV $75
line 206
;203:	}
;204:
;205:	// see if it is already added
;206:	for ( i = 0 ; i < pm->numtouch ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $80
JUMPV
LABELV $77
line 207
;207:		if ( pm->touchents[ i ] == entityNum ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 pm
INDIRP4
CNSTI4 56
ADDP4
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $81
line 208
;208:			return;
ADDRGP4 $72
JUMPV
LABELV $81
line 210
;209:		}
;210:	}
LABELV $78
line 206
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $80
ADDRLP4 0
INDIRI4
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
LTI4 $77
line 213
;211:
;212:	// add it
;213:	pm->touchents[pm->numtouch] = entityNum;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 214
;214:	pm->numtouch++;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 215
;215:}
LABELV $72
endproc PM_AddTouchEnt 12 0
export PM_ClipVelocity
proc PM_ClipVelocity 32 0
line 225
;216:
;217:
;218:/*
;219:==================
;220:PM_ClipVelocity
;221:
;222:Slide off of the impacting surface
;223:==================
;224:*/
;225:void PM_ClipVelocity( vec3_t in, vec3_t normal, vec3_t out, float overbounce ) {
line 230
;226:	float	backoff;
;227:	float	change;
;228:	int		i;
;229:	
;230:	backoff = DotProduct (in, normal);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 4
ASGNI4
ADDRLP4 24
CNSTI4 8
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 232
;231:	
;232:	if ( backoff < 0 ) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GEF4 $84
line 233
;233:		backoff *= overbounce;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 234
;234:	} else {
ADDRGP4 $85
JUMPV
LABELV $84
line 235
;235:		backoff /= overbounce;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRFP4 12
INDIRF4
DIVF4
ASGNF4
line 236
;236:	}
LABELV $85
line 238
;237:
;238:	for ( i=0 ; i<3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $86
line 239
;239:		change = normal[i]*backoff;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ASGNF4
line 240
;240:		out[i] = in[i] - change;
ADDRLP4 28
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRFP4 8
INDIRP4
ADDP4
ADDRLP4 28
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 241
;241:	}
LABELV $87
line 238
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $86
line 242
;242:}
LABELV $83
endproc PM_ClipVelocity 32 0
proc PM_Friction 52 4
line 252
;243:
;244:
;245:/*
;246:==================
;247:PM_Friction
;248:
;249:Handles both ground friction and water friction
;250:==================
;251:*/
;252:static void PM_Friction( void ) {
line 258
;253:	vec3_t	vec;
;254:	float	*vel;
;255:	float	speed, newspeed, control;
;256:	float	drop;
;257:	
;258:	vel = pm->ps->velocity;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
line 260
;259:	
;260:	VectorCopy( vel, vec );
ADDRLP4 16
ADDRLP4 0
INDIRP4
INDIRB
ASGNB 12
line 261
;261:	if ( pml.walking ) {
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
EQI4 $91
line 262
;262:		vec[2] = 0;	// ignore slope movement
ADDRLP4 16+8
CNSTF4 0
ASGNF4
line 263
;263:	}
LABELV $91
line 265
;264:
;265:	speed = VectorLength(vec);
ADDRLP4 16
ARGP4
ADDRLP4 32
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 32
INDIRF4
ASGNF4
line 266
;266:	if (speed < 1) {
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
GEF4 $95
line 267
;267:		vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTF4 0
ASGNF4
line 268
;268:		vel[1] = 0;		// allow sinking underwater
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
line 270
;269:		// FIXME: still have z friction underwater?
;270:		return;
ADDRGP4 $90
JUMPV
LABELV $95
line 273
;271:	}
;272:
;273:	drop = 0;
ADDRLP4 12
CNSTF4 0
ASGNF4
line 276
;274:
;275:	// apply ground friction
;276:	if ( pm->waterlevel <= 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
GTI4 $97
line 277
;277:		if ( pml.walking && !(pml.groundTrace.surfaceFlags & SURF_SLICK) ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 pml+44
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $99
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 16384
BANDI4
ADDRLP4 36
INDIRI4
NEI4 $99
line 279
;278:			// if getting knocked back, no friction
;279:			if ( ! (pm->ps->pm_flags & PMF_TIME_KNOCKBACK) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $104
line 280
;280:				control = speed < pm_stopspeed ? pm_stopspeed : speed;
ADDRLP4 8
INDIRF4
ADDRGP4 pm_stopspeed
INDIRF4
GEF4 $107
ADDRLP4 40
ADDRGP4 pm_stopspeed
INDIRF4
ASGNF4
ADDRGP4 $108
JUMPV
LABELV $107
ADDRLP4 40
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $108
ADDRLP4 28
ADDRLP4 40
INDIRF4
ASGNF4
line 281
;281:				drop += control*pm_friction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 28
INDIRF4
ADDRGP4 pm_friction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 282
;282:			}
LABELV $104
line 283
;283:		}
LABELV $99
line 284
;284:	}
LABELV $97
line 287
;285:
;286:	// apply water friction even if just wading
;287:	if ( pm->waterlevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
EQI4 $110
line 288
;288:		drop += speed*pm_waterfriction*pm->waterlevel*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_waterfriction
INDIRF4
MULF4
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 289
;289:	}
LABELV $110
line 291
;290:
;291:	if ( pm->ps->pm_type == PM_SPECTATOR || pm->ps->pm_type == PM_FLOAT )
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 3
EQI4 $115
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $113
LABELV $115
line 292
;292:	{
line 293
;293:		if (pm->ps->pm_type == PM_FLOAT)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $116
line 294
;294:		{ //almost no friction while floating
line 295
;295:			drop += speed*0.1*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
CNSTF4 1036831949
ADDRLP4 8
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 296
;296:		}
ADDRGP4 $117
JUMPV
LABELV $116
line 298
;297:		else
;298:		{
line 299
;299:			drop += speed*pm_spectatorfriction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_spectatorfriction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 300
;300:		}
LABELV $117
line 301
;301:	}
LABELV $113
line 304
;302:
;303:	// scale the velocity
;304:	newspeed = speed - drop;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
line 305
;305:	if (newspeed < 0) {
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $120
line 306
;306:		newspeed = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 307
;307:	}
LABELV $120
line 308
;308:	newspeed /= speed;
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ASGNF4
line 310
;309:
;310:	vel[0] = vel[0] * newspeed;
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 311
;311:	vel[1] = vel[1] * newspeed;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 312
;312:	vel[2] = vel[2] * newspeed;
ADDRLP4 48
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 313
;313:}
LABELV $90
endproc PM_Friction 52 4
proc PM_Accelerate 32 0
line 323
;314:
;315:
;316:/*
;317:==============
;318:PM_Accelerate
;319:
;320:Handles user intended acceleration
;321:==============
;322:*/
;323:static void PM_Accelerate( vec3_t wishdir, float wishspeed, float accel ) {
line 329
;324:#if 1
;325:	// q2 style
;326:	int			i;
;327:	float		addspeed, accelspeed, currentspeed;
;328:
;329:	currentspeed = DotProduct (pm->ps->velocity, wishdir);
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 330
;330:	addspeed = wishspeed - currentspeed;
ADDRLP4 8
ADDRFP4 4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
line 331
;331:	if (addspeed <= 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $123
line 332
;332:		return;
ADDRGP4 $122
JUMPV
LABELV $123
line 334
;333:	}
;334:	accelspeed = accel*pml.frametime*wishspeed;
ADDRLP4 4
ADDRFP4 8
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 335
;335:	if (accelspeed > addspeed) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $126
line 336
;336:		accelspeed = addspeed;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ASGNF4
line 337
;337:	}
LABELV $126
line 339
;338:	
;339:	for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $128
line 340
;340:		pm->ps->velocity[i] += accelspeed*wishdir[i];	
ADDRLP4 24
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 28
ADDRLP4 24
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 24
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 341
;341:	}
LABELV $129
line 339
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $128
line 360
;342:#else
;343:	// proper way (avoids strafe jump maxspeed bug), but feels bad
;344:	vec3_t		wishVelocity;
;345:	vec3_t		pushDir;
;346:	float		pushLen;
;347:	float		canPush;
;348:
;349:	VectorScale( wishdir, wishspeed, wishVelocity );
;350:	VectorSubtract( wishVelocity, pm->ps->velocity, pushDir );
;351:	pushLen = VectorNormalize( pushDir );
;352:
;353:	canPush = accel*pml.frametime*wishspeed;
;354:	if (canPush > pushLen) {
;355:		canPush = pushLen;
;356:	}
;357:
;358:	VectorMA( pm->ps->velocity, canPush, pushDir, pm->ps->velocity );
;359:#endif
;360:}
LABELV $122
endproc PM_Accelerate 32 0
proc PM_CmdScale 48 4
line 373
;361:
;362:
;363:
;364:/*
;365:============
;366:PM_CmdScale
;367:
;368:Returns the scale factor to apply to cmd movements
;369:This allows the clients to use axial -127 to 127 values for all directions
;370:without getting a sqrt(2) distortion in speed.
;371:============
;372:*/
;373:static float PM_CmdScale( usercmd_t *cmd ) {
line 377
;374:	int		max;
;375:	float	total;
;376:	float	scale;
;377:	int		umove = 0; //cmd->upmove;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 380
;378:			//don't factor upmove into scaling speed
;379:
;380:	max = abs( cmd->forwardmove );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 16
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 16
INDIRI4
ASGNI4
line 381
;381:	if ( abs( cmd->rightmove ) > max ) {
ADDRFP4 0
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 20
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $133
line 382
;382:		max = abs( cmd->rightmove );
ADDRFP4 0
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 24
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 383
;383:	}
LABELV $133
line 384
;384:	if ( abs( umove ) > max ) {
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $135
line 385
;385:		max = abs( umove );
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 386
;386:	}
LABELV $135
line 387
;387:	if ( !max ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $137
line 388
;388:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $132
JUMPV
LABELV $137
line 391
;389:	}
;390:
;391:	total = sqrt( cmd->forwardmove * cmd->forwardmove
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 36
ADDRLP4 28
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 32
INDIRI4
ADDRLP4 32
INDIRI4
MULI4
ADDRLP4 36
INDIRI4
ADDRLP4 36
INDIRI4
MULI4
ADDI4
ADDRLP4 4
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 44
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 44
INDIRF4
ASGNF4
line 393
;392:		+ cmd->rightmove * cmd->rightmove + umove * umove );
;393:	scale = (float)pm->ps->speed * max / ( 127.0 * total );
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CNSTF4 1123942400
ADDRLP4 8
INDIRF4
MULF4
DIVF4
ASGNF4
line 395
;394:
;395:	return scale;
ADDRLP4 12
INDIRF4
RETF4
LABELV $132
endproc PM_CmdScale 48 4
proc PM_SetMovementDir 72 0
line 407
;396:}
;397:
;398:
;399:/*
;400:================
;401:PM_SetMovementDir
;402:
;403:Determine the rotation of the legs reletive
;404:to the facing dir
;405:================
;406:*/
;407:static void PM_SetMovementDir( void ) {
line 408
;408:	if ( pm->cmd.forwardmove || pm->cmd.rightmove ) {
ADDRLP4 0
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
NEI4 $142
ADDRLP4 0
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
EQI4 $140
LABELV $142
line 409
;409:		if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove > 0 ) {
ADDRLP4 8
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
NEI4 $143
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
LEI4 $143
line 410
;410:			pm->ps->movementDir = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 0
ASGNI4
line 411
;411:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove > 0 ) {
ADDRGP4 $141
JUMPV
LABELV $143
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 20
INDIRI4
GEI4 $145
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 20
INDIRI4
LEI4 $145
line 412
;412:			pm->ps->movementDir = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 413
;413:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove == 0 ) {
ADDRGP4 $141
JUMPV
LABELV $145
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 24
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 28
INDIRI4
GEI4 $147
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 28
INDIRI4
NEI4 $147
line 414
;414:			pm->ps->movementDir = 2;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 2
ASGNI4
line 415
;415:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $141
JUMPV
LABELV $147
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
GEI4 $149
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
GEI4 $149
line 416
;416:			pm->ps->movementDir = 3;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 3
ASGNI4
line 417
;417:		} else if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $141
JUMPV
LABELV $149
ADDRLP4 40
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 44
INDIRI4
NEI4 $151
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 44
INDIRI4
GEI4 $151
line 418
;418:			pm->ps->movementDir = 4;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 4
ASGNI4
line 419
;419:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $141
JUMPV
LABELV $151
ADDRLP4 48
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 48
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 52
INDIRI4
LEI4 $153
ADDRLP4 48
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 52
INDIRI4
GEI4 $153
line 420
;420:			pm->ps->movementDir = 5;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 5
ASGNI4
line 421
;421:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove == 0 ) {
ADDRGP4 $141
JUMPV
LABELV $153
ADDRLP4 56
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 60
INDIRI4
LEI4 $155
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 60
INDIRI4
NEI4 $155
line 422
;422:			pm->ps->movementDir = 6;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 6
ASGNI4
line 423
;423:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove > 0 ) {
ADDRGP4 $141
JUMPV
LABELV $155
ADDRLP4 64
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 68
INDIRI4
LEI4 $141
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 68
INDIRI4
LEI4 $141
line 424
;424:			pm->ps->movementDir = 7;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 7
ASGNI4
line 425
;425:		}
line 426
;426:	} else {
ADDRGP4 $141
JUMPV
LABELV $140
line 430
;427:		// if they aren't actively going directly sideways,
;428:		// change the animation to the diagonal so they
;429:		// don't stop too crooked
;430:		if ( pm->ps->movementDir == 2 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 2
NEI4 $159
line 431
;431:			pm->ps->movementDir = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 1
ASGNI4
line 432
;432:		} else if ( pm->ps->movementDir == 6 ) {
ADDRGP4 $160
JUMPV
LABELV $159
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 6
NEI4 $161
line 433
;433:			pm->ps->movementDir = 7;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
CNSTI4 7
ASGNI4
line 434
;434:		} 
LABELV $161
LABELV $160
line 435
;435:	}
LABELV $141
line 436
;436:}
LABELV $139
endproc PM_SetMovementDir 72 0
export PM_ForceJumpingUp
proc PM_ForceJumpingUp 40 16
line 441
;437:
;438:#define METROID_JUMP 1
;439:
;440:qboolean PM_ForceJumpingUp(void)
;441:{
line 442
;442:	if ( !(pm->ps->fd.forcePowersActive&(1<<FP_LEVITATION)) && pm->ps->fd.forceJumpCharge )
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $164
ADDRLP4 0
INDIRP4
CNSTI4 1084
ADDP4
INDIRF4
CNSTF4 0
EQF4 $164
line 443
;443:	{//already jumped and let go
line 444
;444:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $164
line 447
;445:	}
;446:
;447:	if ( BG_InSpecialJump( pm->ps->legsAnim ) )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 BG_InSpecialJump
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $166
line 448
;448:	{
line 449
;449:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $166
line 452
;450:	}
;451:
;452:	if (BG_SaberInSpecial(pm->ps->saberMove))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_SaberInSpecial
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $168
line 453
;453:	{
line 454
;454:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $168
line 457
;455:	}
;456:
;457:	if (BG_SaberInSpecialAttack(pm->ps->legsAnim))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 BG_SaberInSpecialAttack
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $170
line 458
;458:	{
line 459
;459:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $170
line 462
;460:	}
;461:
;462:	if (BG_HasYsalamiri(pm->gametype, pm->ps))
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $172
line 463
;463:	{
line 464
;464:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $172
line 467
;465:	}
;466:
;467:	if (!BG_CanUseFPNow(pm->gametype, pm->ps, pm->cmd.serverTime, FP_LEVITATION))
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 28
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $174
line 468
;468:	{
line 469
;469:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $163
JUMPV
LABELV $174
line 472
;470:	}
;471:
;472:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE && //in air
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $176
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 36
INDIRI4
EQI4 $176
ADDRLP4 32
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
LEI4 $176
ADDRLP4 32
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
LEF4 $176
line 476
;473:		(pm->ps->pm_flags & PMF_JUMP_HELD) &&//forceJumpZStart && //jumped
;474:		pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_0 && //force-jump capable
;475:		pm->ps->velocity[2] > 0 )//going up
;476:	{
line 477
;477:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $163
JUMPV
LABELV $176
line 479
;478:	}
;479:	return qfalse;
CNSTI4 0
RETI4
LABELV $163
endproc PM_ForceJumpingUp 40 16
proc PM_JumpForDir 8 16
line 483
;480:}
;481:
;482:static void PM_JumpForDir( void )
;483:{
line 484
;484:	int anim = BOTH_JUMP1;
ADDRLP4 0
CNSTI4 752
ASGNI4
line 485
;485:	if ( pm->cmd.forwardmove > 0 ) 
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $179
line 486
;486:	{
line 487
;487:		anim = BOTH_JUMP1;
ADDRLP4 0
CNSTI4 752
ASGNI4
line 488
;488:		pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 489
;489:	} 
ADDRGP4 $180
JUMPV
LABELV $179
line 490
;490:	else if ( pm->cmd.forwardmove < 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $181
line 491
;491:	{
line 492
;492:		anim = BOTH_JUMPBACK1;
ADDRLP4 0
CNSTI4 756
ASGNI4
line 493
;493:		pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 494
;494:	}
ADDRGP4 $182
JUMPV
LABELV $181
line 495
;495:	else if ( pm->cmd.rightmove > 0 ) 
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $183
line 496
;496:	{
line 497
;497:		anim = BOTH_JUMPRIGHT1;
ADDRLP4 0
CNSTI4 762
ASGNI4
line 498
;498:		pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 499
;499:	}
ADDRGP4 $184
JUMPV
LABELV $183
line 500
;500:	else if ( pm->cmd.rightmove < 0 ) 
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $185
line 501
;501:	{
line 502
;502:		anim = BOTH_JUMPLEFT1;
ADDRLP4 0
CNSTI4 759
ASGNI4
line 503
;503:		pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 504
;504:	}
ADDRGP4 $186
JUMPV
LABELV $185
line 506
;505:	else
;506:	{
line 507
;507:		anim = BOTH_JUMP1;
ADDRLP4 0
CNSTI4 752
ASGNI4
line 508
;508:		pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 509
;509:	}
LABELV $186
LABELV $184
LABELV $182
LABELV $180
line 510
;510:	if(!BG_InDeathAnim(pm->ps->legsAnim))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 BG_InDeathAnim
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $187
line 511
;511:	{
line 512
;512:		PM_SetAnim(SETANIM_LEGS,anim,SETANIM_FLAG_OVERRIDE, 100);		// Only blend over 100ms
CNSTI4 2
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 513
;513:	}
LABELV $187
line 514
;514:}
LABELV $178
endproc PM_JumpForDir 8 16
export PM_SetPMViewAngle
proc PM_SetPMViewAngle 12 0
line 517
;515:
;516:void PM_SetPMViewAngle(playerState_t *ps, vec3_t angle, usercmd_t *ucmd)
;517:{
line 521
;518:	int			i;
;519:
;520:	// set the delta angle
;521:	for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $190
line 524
;522:		int		cmdAngle;
;523:
;524:		cmdAngle = ANGLE2SHORT(angle[i]);
ADDRLP4 4
CNSTF4 1199570944
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
MULF4
CNSTF4 1135869952
DIVF4
CVFI4 4
CNSTI4 65535
BANDI4
ASGNI4
line 525
;525:		ps->delta_angles[i] = cmdAngle - ucmd->angles[i];
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 526
;526:	}
LABELV $191
line 521
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $190
line 528
;527:	//VectorCopy( angle, ent->s.angles );
;528:	VectorCopy (angle, ps->viewangles);
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 529
;529:}
LABELV $189
endproc PM_SetPMViewAngle 12 0
export PM_AdjustAngleForWallRun
proc PM_AdjustAngleForWallRun 1216 28
line 532
;530:
;531:qboolean PM_AdjustAngleForWallRun( playerState_t *ps, usercmd_t *ucmd, qboolean doMove )
;532:{
line 533
;533:	if (( (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT || (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_LEFT ) && ps->legsTimer > 500 )
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 820
EQI4 $197
ADDRLP4 0
INDIRI4
CNSTI4 823
NEI4 $195
LABELV $197
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 500
LEI4 $195
line 534
;534:	{//wall-running and not at end of anim
line 540
;535:		//stick to wall, if there is one
;536:		vec3_t	rt, traceTo, mins, maxs, fwdAngles;
;537:		trace_t	trace;
;538:		float	dist, yawAdjust;
;539:
;540:		VectorSet(mins, -15, -15, 0);
ADDRLP4 1152
CNSTF4 3245342720
ASGNF4
ADDRLP4 44
ADDRLP4 1152
INDIRF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 1152
INDIRF4
ASGNF4
ADDRLP4 44+8
CNSTF4 0
ASGNF4
line 541
;541:		VectorSet(maxs, 15, 15, 24);
ADDRLP4 1156
CNSTF4 1097859072
ASGNF4
ADDRLP4 56
ADDRLP4 1156
INDIRF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 1156
INDIRF4
ASGNF4
ADDRLP4 56+8
CNSTF4 1103101952
ASGNF4
line 542
;542:		VectorSet(fwdAngles, 0, pm->ps->viewangles[YAW], 0);
ADDRLP4 20
CNSTF4 0
ASGNF4
ADDRLP4 20+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
ADDRLP4 20+8
CNSTF4 0
ASGNF4
line 544
;543:
;544:		AngleVectors( fwdAngles, NULL, rt, NULL );
ADDRLP4 20
ARGP4
ADDRLP4 1160
CNSTP4 0
ASGNP4
ADDRLP4 1160
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 1160
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 545
;545:		if ( (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT )
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 820
NEI4 $204
line 546
;546:		{
line 547
;547:			dist = 128;
ADDRLP4 16
CNSTF4 1124073472
ASGNF4
line 548
;548:			yawAdjust = -90;
ADDRLP4 1148
CNSTF4 3266576384
ASGNF4
line 549
;549:		}
ADDRGP4 $205
JUMPV
LABELV $204
line 551
;550:		else
;551:		{
line 552
;552:			dist = -128;
ADDRLP4 16
CNSTF4 3271557120
ASGNF4
line 553
;553:			yawAdjust = 90;
ADDRLP4 1148
CNSTF4 1119092736
ASGNF4
line 554
;554:		}
LABELV $205
line 555
;555:		VectorMA( ps->origin, dist, rt, traceTo );
ADDRLP4 1164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1168
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 32
ADDRLP4 1164
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 1168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 1164
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 1168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32+8
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 557
;556:		
;557:		pm->trace( &trace, ps->origin, mins, maxs, traceTo, ps->clientNum, MASK_PLAYERSOLID );
ADDRLP4 68
ARGP4
ADDRLP4 1172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1172
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 44
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 1172
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 pm
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 559
;558:
;559:		if ( trace.fraction < 1.0f )
ADDRLP4 68+8
INDIRF4
CNSTF4 1065353216
GEF4 $210
line 560
;560:		{//still a wall there
line 563
;561:			//FIXME: don't pull around 90 turns
;562:			//FIXME: simulate stepping up steps here, somehow?
;563:			if ( (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT )
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 820
NEI4 $213
line 564
;564:			{
line 565
;565:				ucmd->rightmove = 127;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 127
ASGNI1
line 566
;566:			}
ADDRGP4 $214
JUMPV
LABELV $213
line 568
;567:			else
;568:			{
line 569
;569:				ucmd->rightmove = -127;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 -127
ASGNI1
line 570
;570:			}
LABELV $214
line 571
;571:			if ( ucmd->upmove < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 26
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $215
line 572
;572:			{
line 573
;573:				ucmd->upmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 26
ADDP4
CNSTI1 0
ASGNI1
line 574
;574:			}
LABELV $215
line 576
;575:			//make me face perpendicular to the wall
;576:			ps->viewangles[YAW] = vectoyaw( trace.plane.normal )+yawAdjust;
ADDRLP4 68+24
ARGP4
ADDRLP4 1176
ADDRGP4 vectoyaw
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 1176
INDIRF4
ADDRLP4 1148
INDIRF4
ADDF4
ASGNF4
line 579
;577:
;578:			//SetClientViewAngle( ent, ent->client->ps.viewangles );
;579:			PM_SetPMViewAngle(ps, ps->viewangles, ucmd);
ADDRLP4 1180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1180
INDIRP4
ARGP4
ADDRLP4 1180
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 PM_SetPMViewAngle
CALLV
pop
line 581
;580:
;581:			ucmd->angles[YAW] = ANGLE2SHORT( ps->viewangles[YAW] ) - ps->delta_angles[YAW];
ADDRLP4 1184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
CNSTF4 1199570944
ADDRLP4 1184
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
MULF4
CNSTF4 1135869952
DIVF4
CVFI4 4
CNSTI4 65535
BANDI4
ADDRLP4 1184
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
SUBI4
ASGNI4
line 582
;582:			if ( doMove )
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $218
line 583
;583:			{
line 586
;584:				//push me forward
;585:				vec3_t	fwd;
;586:				float	zVel = ps->velocity[2];
ADDRLP4 1188
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ASGNF4
line 587
;587:				if ( ps->legsTimer > 500 )
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 500
LEI4 $220
line 588
;588:				{//not at end of anim yet
line 589
;589:					float speed = 175;
ADDRLP4 1204
CNSTF4 1127153664
ASGNF4
line 591
;590:
;591:					fwdAngles[YAW] = ps->viewangles[YAW];
ADDRLP4 20+4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
line 592
;592:					AngleVectors( fwdAngles, fwd, NULL, NULL );
ADDRLP4 20
ARGP4
ADDRLP4 1192
ARGP4
ADDRLP4 1208
CNSTP4 0
ASGNP4
ADDRLP4 1208
INDIRP4
ARGP4
ADDRLP4 1208
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 594
;593:					//FIXME: or MA?
;594:					if ( ucmd->forwardmove < 0 )
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $223
line 595
;595:					{//slower
line 596
;596:						speed = 100;
ADDRLP4 1204
CNSTF4 1120403456
ASGNF4
line 597
;597:					}
ADDRGP4 $224
JUMPV
LABELV $223
line 598
;598:					else if ( ucmd->forwardmove > 0 )
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $225
line 599
;599:					{
line 600
;600:						speed = 250;//running speed
ADDRLP4 1204
CNSTF4 1132068864
ASGNF4
line 601
;601:					}
LABELV $225
LABELV $224
line 602
;602:					VectorScale( fwd, speed, ps->velocity );
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 1192
INDIRF4
ADDRLP4 1204
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 1192+4
INDIRF4
ADDRLP4 1204
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 1192+8
INDIRF4
ADDRLP4 1204
INDIRF4
MULF4
ASGNF4
line 603
;603:				}
LABELV $220
line 604
;604:				ps->velocity[2] = zVel;//preserve z velocity
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 1188
INDIRF4
ASGNF4
line 606
;605:				//pull me toward the wall, too
;606:				VectorMA( ps->velocity, dist, rt, ps->velocity );
ADDRLP4 1204
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1204
INDIRP4
ADDRLP4 1204
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1208
INDIRP4
ADDRLP4 1208
INDIRP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1212
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1212
INDIRP4
ADDRLP4 1212
INDIRP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 607
;607:			}
LABELV $218
line 608
;608:			ucmd->forwardmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 0
ASGNI1
line 609
;609:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $194
JUMPV
LABELV $210
line 611
;610:		}
;611:		else if ( doMove )
ADDRFP4 8
INDIRI4
CNSTI4 0
EQI4 $231
line 612
;612:		{//stop it
line 613
;613:			if ( (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT )
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 820
NEI4 $233
line 614
;614:			{
line 615
;615:				PM_SetAnim(SETANIM_BOTH, BOTH_WALL_RUN_RIGHT_STOP, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 0);
ADDRLP4 1176
CNSTI4 3
ASGNI4
ADDRLP4 1176
INDIRI4
ARGI4
CNSTI4 822
ARGI4
ADDRLP4 1176
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 616
;616:			}
ADDRGP4 $234
JUMPV
LABELV $233
line 617
;617:			else if ( (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_LEFT )
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 823
NEI4 $235
line 618
;618:			{
line 619
;619:				PM_SetAnim(SETANIM_BOTH, BOTH_WALL_RUN_LEFT_STOP, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 0);
ADDRLP4 1176
CNSTI4 3
ASGNI4
ADDRLP4 1176
INDIRI4
ARGI4
CNSTI4 825
ARGI4
ADDRLP4 1176
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 620
;620:			}
LABELV $235
LABELV $234
line 621
;621:		}
LABELV $231
line 622
;622:	}
LABELV $195
line 624
;623:
;624:	return qfalse;
CNSTI4 0
RETI4
LABELV $194
endproc PM_AdjustAngleForWallRun 1216 28
proc PM_CheckJump 1284 28
line 634
;625:}
;626:
;627:/*
;628:=============
;629:PM_CheckJump
;630:=============
;631:*/
;632:
;633:static qboolean PM_CheckJump( void ) 
;634:{
line 635
;635:	if (pm->ps->usingATST)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $238
line 636
;636:	{
line 637
;637:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $238
line 640
;638:	}
;639:
;640:	if (pm->ps->forceHandExtend == HANDEXTEND_KNOCKDOWN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
NEI4 $240
line 641
;641:	{
line 642
;642:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $240
line 646
;643:	}
;644:
;645:	//Don't allow jump until all buttons are up
;646:	if ( pm->ps->pm_flags & PMF_RESPAWNED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $242
line 647
;647:		return qfalse;		
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $242
line 650
;648:	}
;649:
;650:	if ( PM_InKnockDown( pm->ps ) || BG_InRoll( pm->ps, pm->ps->legsAnim ) ) 
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 PM_InKnockDown
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $246
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $244
LABELV $246
line 651
;651:	{//in knockdown
line 652
;652:		return qfalse;		
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $244
line 655
;653:	}
;654:
;655:	if (pm->ps->groundEntityNum != ENTITYNUM_NONE || pm->ps->origin[2] < pm->ps->fd.forceJumpZStart)
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $249
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
GEF4 $247
LABELV $249
line 656
;656:	{
line 657
;657:		pm->ps->fd.forcePowersActive &= ~(1<<FP_LEVITATION);
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 658
;658:	}
LABELV $247
line 666
;659:	/*
;660:	if ( pm->cmd.buttons & BUTTON_FORCEJUMP )
;661:	{
;662:		pm->ps->pm_flags |= PMF_JUMP_HELD;
;663:	}
;664:	*/
;665:
;666:	if (pm->ps->fd.forcePowersActive & (1 << FP_LEVITATION))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $250
line 667
;667:	{
line 668
;668:		if (pm->ps->fd.forcePowerDebounce[FP_LEVITATION] < pm->cmd.serverTime)
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRP4
CNSTI4 764
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $252
line 669
;669:		{
line 670
;670:			BG_ForcePowerDrain( pm->ps, FP_LEVITATION, 5 );
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
CNSTI4 1
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 BG_ForcePowerDrain
CALLV
pop
line 671
;671:			if (pm->ps->fd.forcePowerLevel[FP_LEVITATION] >= FORCE_LEVEL_2)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LTI4 $254
line 672
;672:			{
line 673
;673:				pm->ps->fd.forcePowerDebounce[FP_LEVITATION] = pm->cmd.serverTime + 300;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRP4
CNSTI4 764
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 674
;674:			}
ADDRGP4 $255
JUMPV
LABELV $254
line 676
;675:			else
;676:			{
line 677
;677:				pm->ps->fd.forcePowerDebounce[FP_LEVITATION] = pm->cmd.serverTime + 200;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRP4
CNSTI4 764
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 678
;678:			}
LABELV $255
line 679
;679:		}
LABELV $252
line 680
;680:	}
LABELV $250
line 682
;681:
;682:	if (pm->ps->forceJumpFlip)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1232
ADDP4
INDIRI4
CNSTI4 0
EQI4 $256
line 683
;683:	{
line 684
;684:		int anim = BOTH_FORCEINAIR1;
ADDRLP4 16
CNSTI4 766
ASGNI4
line 685
;685:		int	parts = SETANIM_BOTH;
ADDRLP4 20
CNSTI4 3
ASGNI4
line 687
;686:
;687:		if ( pm->cmd.forwardmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $258
line 688
;688:		{
line 689
;689:			anim = BOTH_FLIP_F;
ADDRLP4 16
CNSTI4 777
ASGNI4
line 690
;690:		}
ADDRGP4 $259
JUMPV
LABELV $258
line 691
;691:		else if ( pm->cmd.forwardmove < 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $260
line 692
;692:		{
line 693
;693:			anim = BOTH_FLIP_B;
ADDRLP4 16
CNSTI4 778
ASGNI4
line 694
;694:		}
ADDRGP4 $261
JUMPV
LABELV $260
line 695
;695:		else if ( pm->cmd.rightmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $262
line 696
;696:		{
line 697
;697:			anim = BOTH_FLIP_R;
ADDRLP4 16
CNSTI4 780
ASGNI4
line 698
;698:		}
ADDRGP4 $263
JUMPV
LABELV $262
line 699
;699:		else if ( pm->cmd.rightmove < 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $264
line 700
;700:		{
line 701
;701:			anim = BOTH_FLIP_L;
ADDRLP4 16
CNSTI4 779
ASGNI4
line 702
;702:		}
LABELV $264
LABELV $263
LABELV $261
LABELV $259
line 703
;703:		if ( pm->ps->weaponTime )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
EQI4 $266
line 704
;704:		{//FIXME: really only care if we're in a saber attack anim...
line 705
;705:			parts = SETANIM_LEGS;
ADDRLP4 20
CNSTI4 2
ASGNI4
line 706
;706:		}
LABELV $266
line 708
;707:
;708:		PM_SetAnim( parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150 );
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 709
;709:		pm->ps->forceJumpFlip = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1232
ADDP4
CNSTI4 0
ASGNI4
line 710
;710:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $237
JUMPV
LABELV $256
line 713
;711:	}
;712:#if METROID_JUMP
;713:	if ( pm->waterlevel < 2 ) 
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
GEI4 $268
line 714
;714:	{
line 715
;715:		if ( pm->ps->gravity > 0 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
LEI4 $270
line 716
;716:		{//can't do this in zero-G
line 718
;717:			//FIXME: still able to pogo-jump...
;718:			if ( PM_ForceJumpingUp() )
ADDRLP4 16
ADDRGP4 PM_ForceJumpingUp
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $272
line 719
;719:			{//holding jump in air
line 720
;720:				float curHeight = pm->ps->origin[2] - pm->ps->fd.forceJumpZStart;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 24
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
SUBF4
ASGNF4
line 722
;721:				//check for max force jump level and cap off & cut z vel
;722:				if ( ( curHeight<=forceJumpHeight[0] ||//still below minimum jump height
ADDRLP4 20
INDIRF4
ADDRGP4 forceJumpHeight
INDIRF4
LEF4 $276
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 920
ADDP4
INDIRI4
CNSTI4 0
EQI4 $274
ADDRLP4 28
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
LTI4 $274
LABELV $276
ADDRLP4 20
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceJumpHeight
ADDP4
INDIRF4
GEF4 $274
line 725
;723:						(pm->ps->fd.forcePower&&pm->cmd.upmove>=10) ) &&////still have force power available and still trying to jump up 
;724:					curHeight < forceJumpHeight[pm->ps->fd.forcePowerLevel[FP_LEVITATION]] )//still below maximum jump height
;725:				{//can still go up
line 729
;726:					//FIXME: after a certain amount of time of held jump, play force jump sound and flip if a dir is being held
;727:					//FIXME: if hit a wall... should we cut velocity or allow them to slide up it?
;728:					//FIXME: constantly drain force power at a rate by which the usage for maximum height would use up the full cost of force jump
;729:					if ( curHeight > forceJumpHeight[0] )
ADDRLP4 20
INDIRF4
ADDRGP4 forceJumpHeight
INDIRF4
LEF4 $277
line 730
;730:					{//passed normal jump height  *2?
line 731
;731:						if ( !(pm->ps->fd.forcePowersActive&(1<<FP_LEVITATION)) )//haven't started forcejump yet
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $279
line 732
;732:						{
line 734
;733:							//start force jump
;734:							pm->ps->fd.forcePowersActive |= (1<<FP_LEVITATION);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 735
;735:							pm->ps->fd.forceJumpSound = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 1
ASGNI4
line 772
;736:							//play flip
;737:							//FIXME: do this only when they stop the jump (below) or when they're just about to hit the peak of the jump
;738:
;739:							//if ((pm->cmd.forwardmove || pm->cmd.rightmove) && //pushing in a dir			//Boot comment - disable flips.
;740:							//	(pm->ps->legsAnim&~ANIM_TOGGLEBIT) != BOTH_FLIP_F &&//not already flipping
;741:							//	(pm->ps->legsAnim&~ANIM_TOGGLEBIT) != BOTH_FLIP_B &&
;742:							//	(pm->ps->legsAnim&~ANIM_TOGGLEBIT) != BOTH_FLIP_R &&
;743:							//	(pm->ps->legsAnim&~ANIM_TOGGLEBIT) != BOTH_FLIP_L)
;744:							//{//FIXME: this could end up playing twice if the jump is very long...
;745:							//	int anim = BOTH_FORCEINAIR1;
;746:							//	int	parts = SETANIM_BOTH;
;747:
;748:							//	if ( pm->cmd.forwardmove > 0 )
;749:							//	{
;750:							//		anim = BOTH_FLIP_F;
;751:							//	}
;752:							//	else if ( pm->cmd.forwardmove < 0 )
;753:							//	{
;754:							//		anim = BOTH_FLIP_B;
;755:							//	}
;756:							//	else if ( pm->cmd.rightmove > 0 )
;757:							//	{
;758:							//		anim = BOTH_FLIP_R;
;759:							//	}
;760:							//	else if ( pm->cmd.rightmove < 0 )
;761:							//	{
;762:							//		anim = BOTH_FLIP_L;
;763:							//	}
;764:							//	if ( pm->ps->weaponTime )
;765:							//	{//FIXME: really only care if we're in a saber attack anim...
;766:							//		parts = SETANIM_LEGS;
;767:							//	}
;768:
;769:							//	PM_SetAnim( parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150 );
;770:							//}
;771:							//else 
;772:							if ( pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_1 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
LEI4 $280
line 773
;773:							{//FIXME: really want to know how far off ground we are, probably...
line 775
;774:								vec3_t facingFwd, facingRight, facingAngles;// = {0, pm->ps->viewangles[YAW], 0};
;775:								int	anim = -1;
ADDRLP4 36
CNSTI4 -1
ASGNI4
line 778
;776:								float dotR, dotF;
;777:								
;778:								VectorSet(facingAngles, 0, pm->ps->viewangles[YAW], 0);
ADDRLP4 64
CNSTF4 0
ASGNF4
ADDRLP4 64+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
ADDRLP4 64+8
CNSTF4 0
ASGNF4
line 780
;779:
;780:								AngleVectors( facingAngles, facingFwd, facingRight, NULL );
ADDRLP4 64
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 52
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 781
;781:								dotR = DotProduct( facingRight, pm->ps->velocity );
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 52
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 782
;782:								dotF = DotProduct( facingFwd, pm->ps->velocity );
ADDRLP4 88
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 40
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 784
;783:
;784:								if ( fabs(dotR) > fabs(dotF) * 1.5 )
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 92
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 96
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 92
INDIRF4
CNSTF4 1069547520
ADDRLP4 96
INDIRF4
MULF4
LEF4 $289
line 785
;785:								{
line 786
;786:									if ( dotR > 150 )
ADDRLP4 76
INDIRF4
CNSTF4 1125515264
LEF4 $291
line 787
;787:									{
line 788
;788:										anim = BOTH_FORCEJUMPRIGHT1;
ADDRLP4 36
CNSTI4 774
ASGNI4
line 789
;789:									}
ADDRGP4 $290
JUMPV
LABELV $291
line 790
;790:									else if ( dotR < -150 )
ADDRLP4 76
INDIRF4
CNSTF4 3272998912
GEF4 $290
line 791
;791:									{
line 792
;792:										anim = BOTH_FORCEJUMPLEFT1;
ADDRLP4 36
CNSTI4 771
ASGNI4
line 793
;793:									}
line 794
;794:								}
ADDRGP4 $290
JUMPV
LABELV $289
line 796
;795:								else
;796:								{
line 797
;797:									if ( dotF > 150 )
ADDRLP4 80
INDIRF4
CNSTF4 1125515264
LEF4 $295
line 798
;798:									{
line 799
;799:										anim = BOTH_FORCEJUMP1;
ADDRLP4 36
CNSTI4 765
ASGNI4
line 800
;800:									}
ADDRGP4 $296
JUMPV
LABELV $295
line 801
;801:									else if ( dotF < -150 )
ADDRLP4 80
INDIRF4
CNSTF4 3272998912
GEF4 $297
line 802
;802:									{
line 803
;803:										anim = BOTH_FORCEJUMPBACK1;
ADDRLP4 36
CNSTI4 768
ASGNI4
line 804
;804:									}
LABELV $297
LABELV $296
line 805
;805:								}
LABELV $290
line 806
;806:								if ( anim != -1 )
ADDRLP4 36
INDIRI4
CNSTI4 -1
EQI4 $280
line 807
;807:								{
line 808
;808:									int parts = SETANIM_BOTH;
ADDRLP4 100
CNSTI4 3
ASGNI4
line 809
;809:									if ( pm->ps->weaponTime )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
EQI4 $301
line 810
;810:									{//FIXME: really only care if we're in a saber attack anim...
line 811
;811:										parts = SETANIM_LEGS;
ADDRLP4 100
CNSTI4 2
ASGNI4
line 812
;812:									}
LABELV $301
line 814
;813:
;814:									PM_SetAnim( parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150 );
ADDRLP4 100
INDIRI4
ARGI4
ADDRLP4 36
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 815
;815:								}
line 816
;816:							}
line 817
;817:						}
ADDRGP4 $280
JUMPV
LABELV $279
line 819
;818:						else
;819:						{
line 820
;820:							if ( pm->ps->legsTimer < 1 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 1
GEI4 $303
line 821
;821:							{//not in the middle of a legsAnim
line 822
;822:								int anim = (pm->ps->legsAnim&~ANIM_TOGGLEBIT);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
line 823
;823:								int newAnim = -1;
ADDRLP4 32
CNSTI4 -1
ASGNI4
line 824
;824:								switch ( anim )
ADDRLP4 40
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 44
CNSTI4 765
ASGNI4
ADDRLP4 40
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $307
ADDRLP4 40
INDIRI4
CNSTI4 768
EQI4 $308
ADDRLP4 40
INDIRI4
ADDRLP4 44
INDIRI4
LTI4 $305
LABELV $311
ADDRLP4 48
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 771
EQI4 $309
ADDRLP4 48
INDIRI4
CNSTI4 774
EQI4 $310
ADDRGP4 $305
JUMPV
line 825
;825:								{
LABELV $307
line 827
;826:								case BOTH_FORCEJUMP1:
;827:									newAnim = BOTH_FORCELAND1;//BOTH_FORCEINAIR1;
ADDRLP4 32
CNSTI4 767
ASGNI4
line 828
;828:									break;
ADDRGP4 $306
JUMPV
LABELV $308
line 830
;829:								case BOTH_FORCEJUMPBACK1:
;830:									newAnim = BOTH_FORCELANDBACK1;//BOTH_FORCEINAIRBACK1;
ADDRLP4 32
CNSTI4 770
ASGNI4
line 831
;831:									break;
ADDRGP4 $306
JUMPV
LABELV $309
line 833
;832:								case BOTH_FORCEJUMPLEFT1:
;833:									newAnim = BOTH_FORCELANDLEFT1;//BOTH_FORCEINAIRLEFT1;
ADDRLP4 32
CNSTI4 773
ASGNI4
line 834
;834:									break;
ADDRGP4 $306
JUMPV
LABELV $310
line 836
;835:								case BOTH_FORCEJUMPRIGHT1:
;836:									newAnim = BOTH_FORCELANDRIGHT1;//BOTH_FORCEINAIRRIGHT1;
ADDRLP4 32
CNSTI4 776
ASGNI4
line 837
;837:									break;
LABELV $305
LABELV $306
line 839
;838:								}
;839:								if ( newAnim != -1 )
ADDRLP4 32
INDIRI4
CNSTI4 -1
EQI4 $312
line 840
;840:								{
line 841
;841:									int parts = SETANIM_BOTH;
ADDRLP4 52
CNSTI4 3
ASGNI4
line 842
;842:									if ( pm->ps->weaponTime )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
EQI4 $314
line 843
;843:									{//FIXME: really only care if we're in a saber attack anim...
line 844
;844:										parts = SETANIM_LEGS;
ADDRLP4 52
CNSTI4 2
ASGNI4
line 845
;845:									}
LABELV $314
line 847
;846:
;847:									PM_SetAnim( parts, newAnim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150 );
ADDRLP4 52
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 848
;848:								}
LABELV $312
line 849
;849:							}
LABELV $303
line 850
;850:						}
LABELV $280
line 851
;851:					}
LABELV $277
line 854
;852:
;853:					//need to scale this down, start with height velocity (based on max force jump height) and scale down to regular jump vel
;854:					pm->ps->velocity[2] = (forceJumpHeight[pm->ps->fd.forcePowerLevel[FP_LEVITATION]]-curHeight)/forceJumpHeight[pm->ps->fd.forcePowerLevel[FP_LEVITATION]]*forceJumpStrength[pm->ps->fd.forcePowerLevel[FP_LEVITATION]];//JUMP_VELOCITY;
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 40
ADDRLP4 36
INDIRI4
ADDRGP4 forceJumpHeight
ADDP4
INDIRF4
ASGNF4
ADDRLP4 32
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 40
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
ADDRLP4 40
INDIRF4
DIVF4
ADDRLP4 36
INDIRI4
ADDRGP4 forceJumpStrength
ADDP4
INDIRF4
MULF4
ASGNF4
line 855
;855:					pm->ps->velocity[2] /= 10;
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1092616192
DIVF4
ASGNF4
line 856
;856:					pm->ps->velocity[2] += JUMP_VELOCITY;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1130430464
ADDF4
ASGNF4
line 857
;857:					pm->ps->pm_flags |= PMF_JUMP_HELD;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 858
;858:				}
ADDRGP4 $275
JUMPV
LABELV $274
line 859
;859:				else if ( curHeight > forceJumpHeight[0] && curHeight < forceJumpHeight[pm->ps->fd.forcePowerLevel[FP_LEVITATION]] - forceJumpHeight[0] )
ADDRLP4 32
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 36
ADDRGP4 forceJumpHeight
ASGNP4
ADDRLP4 40
ADDRLP4 36
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 40
INDIRF4
LEF4 $316
ADDRLP4 32
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 36
INDIRP4
ADDP4
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
GEF4 $316
line 860
;860:				{//still have some headroom, don't totally stop it
line 861
;861:					if ( pm->ps->velocity[2] > JUMP_VELOCITY )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1130430464
LEF4 $317
line 862
;862:					{
line 863
;863:						pm->ps->velocity[2] = JUMP_VELOCITY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1130430464
ASGNF4
line 864
;864:					}
line 865
;865:				}
ADDRGP4 $317
JUMPV
LABELV $316
line 867
;866:				else
;867:				{
line 871
;868:					//pm->ps->velocity[2] = 0;
;869:					//rww - changed for the sake of balance in multiplayer
;870:
;871:					if ( pm->ps->velocity[2] > JUMP_VELOCITY )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 1130430464
LEF4 $320
line 872
;872:					{
line 873
;873:						pm->ps->velocity[2] = JUMP_VELOCITY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1130430464
ASGNF4
line 874
;874:					}
LABELV $320
line 875
;875:				}
LABELV $317
LABELV $275
line 876
;876:				pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 877
;877:				return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $272
line 879
;878:			}
;879:			else if ( pm->ps->groundEntityNum == ENTITYNUM_NONE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $322
line 880
;880:			{
line 881
;881:				int legsAnim = (pm->ps->legsAnim&~ANIM_TOGGLEBIT);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
line 882
;882:				if ( legsAnim != BOTH_WALL_RUN_LEFT && legsAnim != BOTH_WALL_RUN_RIGHT )
ADDRLP4 24
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 823
EQI4 $324
ADDRLP4 24
INDIRI4
CNSTI4 820
EQI4 $324
line 883
;883:				{//special case.. these let you jump off a wall
line 884
;884:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $324
line 886
;885:				}
;886:			}
LABELV $322
line 887
;887:		}
LABELV $270
line 888
;888:	}
LABELV $268
line 893
;889:
;890:#endif
;891:
;892:	//Not jumping
;893:	if ( pm->cmd.upmove < 10 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
GEI4 $326
line 894
;894:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $326
line 898
;895:	}
;896:
;897:	// must wait for jump to be released
;898:	if ( pm->ps->pm_flags & PMF_JUMP_HELD ) 
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $328
line 899
;899:	{
line 901
;900:		// clear upmove so cmdscale doesn't lower running speed
;901:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 902
;902:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $328
line 905
;903:	}
;904:
;905:	if ( pm->ps->gravity <= 0 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
GTI4 $330
line 906
;906:	{//in low grav, you push in the dir you're facing as long as there is something behind you to shove off of
line 910
;907:		vec3_t	forward, back;
;908:		trace_t	trace;
;909:
;910:		AngleVectors( pm->ps->viewangles, forward, NULL, NULL );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 1120
CNSTP4 0
ASGNP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 911
;911:		VectorMA( pm->ps->origin, -8, forward, back );
ADDRLP4 1124
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1128
CNSTF4 3238002688
ASGNF4
ADDRLP4 28
ADDRLP4 1124
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1128
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 1124
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1128
INDIRF4
ADDRLP4 16+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 28+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3238002688
ADDRLP4 16+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 912
;912:		pm->trace( &trace, pm->ps->origin, pm->mins, pm->maxs, back, pm->ps->clientNum, pm->tracemask );
ADDRLP4 40
ARGP4
ADDRLP4 1132
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1136
ADDRLP4 1132
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1136
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1132
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1132
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 1136
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1132
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1132
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 914
;913:
;914:		if ( trace.fraction <= 1.0f )
ADDRLP4 40+8
INDIRF4
CNSTF4 1065353216
GTF4 $336
line 915
;915:		{
line 916
;916:			VectorMA( pm->ps->velocity, JUMP_VELOCITY*2, forward, pm->ps->velocity );
ADDRLP4 1140
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1140
INDIRP4
ADDRLP4 1140
INDIRP4
INDIRF4
CNSTF4 1138819072
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1144
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1144
INDIRP4
ADDRLP4 1144
INDIRP4
INDIRF4
CNSTF4 1138819072
ADDRLP4 16+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1148
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1148
INDIRP4
ADDRLP4 1148
INDIRP4
INDIRF4
CNSTF4 1138819072
ADDRLP4 16+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 918
;917:			//FIXME: kicking off wall anim?  At least check what anim we're in?
;918:			PM_SetAnim(SETANIM_LEGS,BOTH_FORCEJUMP1,SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD|SETANIM_FLAG_RESTART, 150);
CNSTI4 2
ARGI4
CNSTI4 765
ARGI4
CNSTI4 7
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 919
;919:		}//else no surf close enough to push off of
LABELV $336
line 920
;920:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 921
;921:	}
ADDRGP4 $331
JUMPV
LABELV $330
line 922
;922:	else if ( pm->cmd.upmove > 0 && pm->waterlevel < 2 &&
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 20
INDIRI4
LEI4 $341
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
GEI4 $341
ADDRLP4 28
ADDRLP4 16
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $341
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
BANDI4
ADDRLP4 20
INDIRI4
NEI4 $341
ADDRLP4 28
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $341
ADDRLP4 16
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $341
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 40
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $341
line 930
;923:		pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_0 &&
;924:		!(pm->ps->pm_flags&PMF_JUMP_HELD) /*&&
;925:		WP_ForcePowerAvailable( pm->gent, FP_LEVITATION, 0 ) */ &&
;926:		pm->ps->weapon == WP_SABER &&
;927:		!BG_HasYsalamiri(pm->gametype, pm->ps) &&
;928:		BG_CanUseFPNow(pm->gametype, pm->ps, pm->cmd.serverTime, FP_LEVITATION)
;929:		 )
;930:	{
line 931
;931:		if ( pm->ps->groundEntityNum != ENTITYNUM_NONE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $343
line 932
;932:		{//on the ground
line 934
;933:			//check for left-wall and right-wall special jumps
;934:			int anim = -1;
ADDRLP4 44
CNSTI4 -1
ASGNI4
line 935
;935:			float	vertPush = 0;
ADDRLP4 48
CNSTF4 0
ASGNF4
line 936
;936:			if ( pm->cmd.rightmove > 0 && pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_1 )
ADDRLP4 52
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $345
ADDRLP4 52
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
LEI4 $345
line 937
;937:			{//strafing right
line 938
;938:				if ( pm->cmd.forwardmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $347
line 939
;939:				{//wall-run
line 940
;940:					vertPush = forceJumpStrength[FORCE_LEVEL_2]/2.0f;
ADDRLP4 48
ADDRGP4 forceJumpStrength+8
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 941
;941:					anim = BOTH_WALL_RUN_RIGHT;
ADDRLP4 44
CNSTI4 820
ASGNI4
line 942
;942:				}
ADDRGP4 $346
JUMPV
LABELV $347
line 943
;943:				else if ( pm->cmd.forwardmove == 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $346
line 944
;944:				{//wall-flip
line 945
;945:					vertPush = forceJumpStrength[FORCE_LEVEL_2]/2.25f;
ADDRLP4 48
ADDRGP4 forceJumpStrength+8
INDIRF4
CNSTF4 1074790400
DIVF4
ASGNF4
line 946
;946:					anim = BOTH_WALL_FLIP_RIGHT;
ADDRLP4 44
CNSTI4 826
ASGNI4
line 947
;947:				}
line 948
;948:			}
ADDRGP4 $346
JUMPV
LABELV $345
line 949
;949:			else if ( pm->cmd.rightmove < 0 && pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_1 )
ADDRLP4 56
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $353
ADDRLP4 56
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
LEI4 $353
line 950
;950:			{//strafing left
line 951
;951:				if ( pm->cmd.forwardmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $355
line 952
;952:				{//wall-run
line 953
;953:					vertPush = forceJumpStrength[FORCE_LEVEL_2]/2.0f;
ADDRLP4 48
ADDRGP4 forceJumpStrength+8
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 954
;954:					anim = BOTH_WALL_RUN_LEFT;
ADDRLP4 44
CNSTI4 823
ASGNI4
line 955
;955:				}
ADDRGP4 $354
JUMPV
LABELV $355
line 956
;956:				else if ( pm->cmd.forwardmove == 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $354
line 957
;957:				{//wall-flip
line 958
;958:					vertPush = forceJumpStrength[FORCE_LEVEL_2]/2.25f;
ADDRLP4 48
ADDRGP4 forceJumpStrength+8
INDIRF4
CNSTF4 1074790400
DIVF4
ASGNF4
line 959
;959:					anim = BOTH_WALL_FLIP_LEFT;
ADDRLP4 44
CNSTI4 827
ASGNI4
line 960
;960:				}
line 961
;961:			}
ADDRGP4 $354
JUMPV
LABELV $353
line 962
;962:			else if ( pm->cmd.forwardmove > 0 && pm->ps->fd.forcePowerLevel[FP_LEVITATION] > FORCE_LEVEL_1 )
ADDRLP4 60
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $361
ADDRLP4 60
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 1
LEI4 $361
line 963
;963:			{//run up wall, flip backwards
line 964
;964:				vertPush = forceJumpStrength[FORCE_LEVEL_2]/2.25f;
ADDRLP4 48
ADDRGP4 forceJumpStrength+8
INDIRF4
CNSTF4 1074790400
DIVF4
ASGNF4
line 965
;965:				anim = BOTH_WALL_FLIP_BACK1;
ADDRLP4 44
CNSTI4 849
ASGNI4
line 966
;966:			}
ADDRGP4 $362
JUMPV
LABELV $361
line 967
;967:			else if ( pm->cmd.forwardmove < 0 && !(pm->cmd.buttons&BUTTON_ATTACK) )
ADDRLP4 64
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 68
CNSTI4 0
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 68
INDIRI4
GEI4 $364
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 68
INDIRI4
NEI4 $364
line 968
;968:			{//backflip
line 969
;969:				vertPush = JUMP_VELOCITY;
ADDRLP4 48
CNSTF4 1130430464
ASGNF4
line 970
;970:				anim = BOTH_FLIP_BACK1;//PM_PickAnim( BOTH_FLIP_BACK1, BOTH_FLIP_BACK3 );
ADDRLP4 44
CNSTI4 815
ASGNI4
line 971
;971:			}
LABELV $364
LABELV $362
LABELV $354
LABELV $346
line 984
;972:			/*
;973:			else if ( VectorLengthSquared( pm->ps->velocity ) < 256 )
;974:			{//not moving
;975:				if ( pm->ps->weapon == WP_SABER && (pm->cmd.buttons & BUTTON_ATTACK) && pm->ps->fd.saberAnimLevel == FORCE_LEVEL_2 )
;976:				{//butterfly... FIXME: does direction matter?
;977:					vertPush = JUMP_VELOCITY;
;978:					anim = BOTH_BUTTERFLY_LEFT;
;979:				}
;980:			}
;981:			*/
;982:			//FIXME: Do we want special moves in MP?
;983:
;984:			vertPush += 128; //is gravity different in SP or something?
ADDRLP4 48
ADDRLP4 48
INDIRF4
CNSTF4 1124073472
ADDF4
ASGNF4
line 986
;985:
;986:			if ( anim != -1 /*&& PM_HasAnimation( pm->gent, anim )*/ )
ADDRLP4 44
INDIRI4
CNSTI4 -1
EQI4 $344
line 987
;987:			{
line 991
;988:				vec3_t fwd, right, traceto, mins, maxs, fwdAngles;
;989:				vec3_t	idealNormal;
;990:				trace_t	trace;
;991:				qboolean doTrace = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 992
;992:				int contents = /*CONTENTS_SOLID*/MASK_PLAYERSOLID;
ADDRLP4 76
CNSTI4 273
ASGNI4
line 994
;993:
;994:				VectorSet(mins, pm->mins[0],pm->mins[1],0);
ADDRLP4 1244
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1184
ADDRLP4 1244
INDIRP4
CNSTI4 188
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1184+4
ADDRLP4 1244
INDIRP4
CNSTI4 192
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1184+8
CNSTF4 0
ASGNF4
line 995
;995:				VectorSet(maxs, pm->maxs[0],pm->maxs[1],24);
ADDRLP4 1248
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1196
ADDRLP4 1248
INDIRP4
CNSTI4 200
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1196+4
ADDRLP4 1248
INDIRP4
CNSTI4 204
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1196+8
CNSTF4 1103101952
ASGNF4
line 996
;996:				VectorSet(fwdAngles, 0, pm->ps->viewangles[YAW], 0);
ADDRLP4 1172
CNSTF4 0
ASGNF4
ADDRLP4 1172+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1172+8
CNSTF4 0
ASGNF4
line 998
;997:
;998:				memset(&trace, 0, sizeof(trace)); //to shut the compiler up
ADDRLP4 80
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1080
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1000
;999:
;1000:				AngleVectors( fwdAngles, fwd, right, NULL );
ADDRLP4 1172
ARGP4
ADDRLP4 1232
ARGP4
ADDRLP4 1220
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1003
;1001:
;1002:				//trace-check for a wall, if necc.
;1003:				switch ( anim )
ADDRLP4 1252
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 1252
INDIRI4
CNSTI4 820
LTI4 $374
ADDRLP4 1252
INDIRI4
CNSTI4 827
GTI4 $391
ADDRLP4 1252
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $392-3280
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $392
address $381
address $374
address $374
address $376
address $374
address $374
address $381
address $376
code
LABELV $391
ADDRLP4 44
INDIRI4
CNSTI4 849
EQI4 $386
ADDRGP4 $374
JUMPV
line 1004
;1004:				{
LABELV $376
line 1009
;1005:				case BOTH_WALL_FLIP_LEFT:
;1006:					//contents |= CONTENTS_BODY;
;1007:					//NOTE: purposely falls through to next case!
;1008:				case BOTH_WALL_RUN_LEFT:
;1009:					doTrace = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
line 1010
;1010:					VectorMA( pm->ps->origin, -16, right, traceto );
ADDRLP4 1256
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1260
CNSTF4 3246391296
ASGNF4
ADDRLP4 1208
ADDRLP4 1256
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1260
INDIRF4
ADDRLP4 1220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+4
ADDRLP4 1256
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1260
INDIRF4
ADDRLP4 1220+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 1220+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1011
;1011:					break;
ADDRGP4 $375
JUMPV
LABELV $381
line 1017
;1012:
;1013:				case BOTH_WALL_FLIP_RIGHT:
;1014:					//contents |= CONTENTS_BODY;
;1015:					//NOTE: purposely falls through to next case!
;1016:				case BOTH_WALL_RUN_RIGHT:
;1017:					doTrace = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
line 1018
;1018:					VectorMA( pm->ps->origin, 16, right, traceto );
ADDRLP4 1264
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1268
CNSTF4 1098907648
ASGNF4
ADDRLP4 1208
ADDRLP4 1264
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1268
INDIRF4
ADDRLP4 1220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+4
ADDRLP4 1264
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1268
INDIRF4
ADDRLP4 1220+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1098907648
ADDRLP4 1220+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1019
;1019:					break;
ADDRGP4 $375
JUMPV
LABELV $386
line 1023
;1020:
;1021:				case BOTH_WALL_FLIP_BACK1:
;1022:					//contents |= CONTENTS_BODY;
;1023:					doTrace = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
line 1024
;1024:					VectorMA( pm->ps->origin, 16, fwd, traceto );
ADDRLP4 1272
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1276
CNSTF4 1098907648
ASGNF4
ADDRLP4 1208
ADDRLP4 1272
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1276
INDIRF4
ADDRLP4 1232
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+4
ADDRLP4 1272
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1276
INDIRF4
ADDRLP4 1232+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1208+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1098907648
ADDRLP4 1232+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1025
;1025:					break;
LABELV $374
LABELV $375
line 1028
;1026:				}
;1027:
;1028:				if ( doTrace )
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $394
line 1029
;1029:				{
line 1030
;1030:					pm->trace( &trace, pm->ps->origin, mins, maxs, traceto, pm->ps->clientNum, contents );
ADDRLP4 80
ARGP4
ADDRLP4 1256
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1260
ADDRLP4 1256
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1260
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1184
ARGP4
ADDRLP4 1196
ARGP4
ADDRLP4 1208
ARGP4
ADDRLP4 1260
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRLP4 1256
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 1031
;1031:					VectorSubtract( pm->ps->origin, traceto, idealNormal );
ADDRLP4 1264
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1160
ADDRLP4 1264
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1208
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1160+4
ADDRLP4 1264
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1208+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 1160+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 1208+8
INDIRF4
SUBF4
ASGNF4
line 1032
;1032:					VectorNormalize( idealNormal );
ADDRLP4 1160
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1033
;1033:				}
LABELV $394
line 1037
;1034:	//			gentity_t *traceEnt = &g_entities[trace.entityNum];
;1035:				
;1036:				//if ( !doTrace || (trace.fraction < 1.0f&&((trace.entityNum<ENTITYNUM_WORLD&&traceEnt&&traceEnt->s.solid!=SOLID_BMODEL)||DotProduct(trace.plane.normal,idealNormal)>0.7)) )
;1037:				if ( !doTrace || (trace.fraction < 1.0f && (trace.entityNum < MAX_CLIENTS || DotProduct(trace.plane.normal,idealNormal) > 0.7)) )
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $412
ADDRLP4 80+8
INDIRF4
CNSTF4 1065353216
GEF4 $344
ADDRLP4 80+52
INDIRI4
CNSTI4 32
LTI4 $412
ADDRLP4 80+24
INDIRF4
ADDRLP4 1160
INDIRF4
MULF4
ADDRLP4 80+24+4
INDIRF4
ADDRLP4 1160+4
INDIRF4
MULF4
ADDF4
ADDRLP4 80+24+8
INDIRF4
ADDRLP4 1160+8
INDIRF4
MULF4
ADDF4
CNSTF4 1060320051
LEF4 $344
LABELV $412
line 1038
;1038:				{//there is a wall there
line 1041
;1039:					int parts;
;1040:					//move me to side
;1041:					if ( anim == BOTH_WALL_FLIP_LEFT )
ADDRLP4 44
INDIRI4
CNSTI4 827
NEI4 $413
line 1042
;1042:					{
line 1043
;1043:						pm->ps->velocity[0] = pm->ps->velocity[1] = 0;
ADDRLP4 1260
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1264
CNSTF4 0
ASGNF4
ADDRLP4 1260
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 1264
INDIRF4
ASGNF4
ADDRLP4 1260
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 1264
INDIRF4
ASGNF4
line 1044
;1044:						VectorMA( pm->ps->velocity, 150, right, pm->ps->velocity );
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1268
INDIRP4
ADDRLP4 1268
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 1220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1272
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1272
INDIRP4
ADDRLP4 1272
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 1220+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1276
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1276
INDIRP4
ADDRLP4 1276
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 1220+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1045
;1045:					}
ADDRGP4 $414
JUMPV
LABELV $413
line 1046
;1046:					else if ( anim == BOTH_WALL_FLIP_RIGHT )
ADDRLP4 44
INDIRI4
CNSTI4 826
NEI4 $417
line 1047
;1047:					{
line 1048
;1048:						pm->ps->velocity[0] = pm->ps->velocity[1] = 0;
ADDRLP4 1260
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1264
CNSTF4 0
ASGNF4
ADDRLP4 1260
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 1264
INDIRF4
ASGNF4
ADDRLP4 1260
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 1264
INDIRF4
ASGNF4
line 1049
;1049:						VectorMA( pm->ps->velocity, -150, right, pm->ps->velocity );
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1268
INDIRP4
ADDRLP4 1268
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1272
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1272
INDIRP4
ADDRLP4 1272
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1220+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1276
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1276
INDIRP4
ADDRLP4 1276
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1220+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1050
;1050:					}
ADDRGP4 $418
JUMPV
LABELV $417
line 1051
;1051:					else if ( anim == BOTH_FLIP_BACK1 
ADDRLP4 1260
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 1260
INDIRI4
CNSTI4 815
EQI4 $425
ADDRLP4 1260
INDIRI4
CNSTI4 816
EQI4 $425
ADDRLP4 1260
INDIRI4
CNSTI4 817
EQI4 $425
ADDRLP4 1260
INDIRI4
CNSTI4 849
NEI4 $421
LABELV $425
line 1055
;1052:						|| anim == BOTH_FLIP_BACK2 
;1053:						|| anim == BOTH_FLIP_BACK3 
;1054:						|| anim == BOTH_WALL_FLIP_BACK1 )
;1055:					{
line 1056
;1056:						pm->ps->velocity[0] = pm->ps->velocity[1] = 0;
ADDRLP4 1264
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1268
CNSTF4 0
ASGNF4
ADDRLP4 1264
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 1268
INDIRF4
ASGNF4
ADDRLP4 1264
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 1268
INDIRF4
ASGNF4
line 1057
;1057:						VectorMA( pm->ps->velocity, -150, fwd, pm->ps->velocity );
ADDRLP4 1272
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1272
INDIRP4
ADDRLP4 1272
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1232
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1276
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1276
INDIRP4
ADDRLP4 1276
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1232+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1280
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1280
INDIRP4
ADDRLP4 1280
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 1232+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1058
;1058:					}
LABELV $421
LABELV $418
LABELV $414
line 1079
;1059:					//kick if jumping off an ent
;1060:					/*
;1061:					if ( doTrace && anim != BOTH_WALL_RUN_LEFT && anim != BOTH_WALL_RUN_RIGHT )
;1062:					{
;1063:						if ( pm->gent && trace.entityNum < ENTITYNUM_WORLD )
;1064:						{
;1065:							if ( traceEnt && traceEnt->client && traceEnt->health && traceEnt->takedamage )
;1066:							{//push them away and do pain
;1067:								vec3_t oppDir;
;1068:								float strength = VectorNormalize2( pm->ps->velocity, oppDir );
;1069:								VectorScale( oppDir, -1, oppDir );
;1070:								//FIXME: need knockdown anim
;1071:								G_Damage( traceEnt, pm->gent, pm->gent, oppDir, traceEnt->currentOrigin, 10, DAMAGE_NO_ARMOR|DAMAGE_NO_HIT_LOC|DAMAGE_NO_KNOCKBACK, MOD_MELEE );
;1072:								NPC_SetAnim( traceEnt, SETANIM_BOTH, BOTH_KNOCKDOWN1, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD );
;1073:								G_Throw( traceEnt, oppDir, strength );
;1074:								G_Sound( traceEnt, G_SoundIndex( va("sound/weapons/melee/punch%d", Q_irand(1, 4)) ) );
;1075:							}
;1076:						}
;1077:					}
;1078:					*/
;1079:					if ( doTrace && anim != BOTH_WALL_RUN_LEFT && anim != BOTH_WALL_RUN_RIGHT )
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $428
ADDRLP4 1264
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 1264
INDIRI4
CNSTI4 823
EQI4 $428
ADDRLP4 1264
INDIRI4
CNSTI4 820
EQI4 $428
line 1080
;1080:					{
line 1081
;1081:						if (trace.entityNum < MAX_CLIENTS)
ADDRLP4 80+52
INDIRI4
CNSTI4 32
GEI4 $430
line 1082
;1082:						{
line 1083
;1083:							pm->ps->forceKickFlip = trace.entityNum+1; //let the server know that this person gets kicked by this client
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1280
ADDP4
ADDRLP4 80+52
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1084
;1084:						}
LABELV $430
line 1085
;1085:					}
LABELV $428
line 1090
;1086:
;1087:					//FIXMEFIXME
;1088:
;1089:					//up
;1090:					if ( vertPush )
ADDRLP4 48
INDIRF4
CNSTF4 0
EQF4 $434
line 1091
;1091:					{
line 1092
;1092:						pm->ps->velocity[2] = vertPush;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 1093
;1093:						pm->ps->fd.forcePowersActive |= (1 << FP_LEVITATION);
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
ASGNP4
ADDRLP4 1268
INDIRP4
ADDRLP4 1268
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1094
;1094:					}
LABELV $434
line 1096
;1095:					//animate me
;1096:					parts = SETANIM_LEGS;
ADDRLP4 1256
CNSTI4 2
ASGNI4
line 1097
;1097:					if ( anim == BOTH_BUTTERFLY_LEFT )
ADDRLP4 44
INDIRI4
CNSTI4 818
NEI4 $436
line 1098
;1098:					{
line 1099
;1099:						parts = SETANIM_BOTH;
ADDRLP4 1256
CNSTI4 3
ASGNI4
line 1100
;1100:						pm->cmd.buttons&=~BUTTON_ATTACK;
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 1268
INDIRP4
ADDRLP4 1268
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 1101
;1101:						pm->ps->saberMove = LS_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 0
ASGNI4
line 1102
;1102:					}
ADDRGP4 $437
JUMPV
LABELV $436
line 1103
;1103:					else if ( !pm->ps->weaponTime )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
NEI4 $438
line 1104
;1104:					{
line 1105
;1105:						parts = SETANIM_BOTH;
ADDRLP4 1256
CNSTI4 3
ASGNI4
line 1106
;1106:					}
LABELV $438
LABELV $437
line 1107
;1107:					PM_SetAnim( parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 0 );
ADDRLP4 1256
INDIRI4
ARGI4
ADDRLP4 44
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 1108
;1108:					if ( anim == BOTH_BUTTERFLY_LEFT )
ADDRLP4 44
INDIRI4
CNSTI4 818
NEI4 $440
line 1109
;1109:					{
line 1110
;1110:						pm->ps->weaponTime = pm->ps->torsoTimer;
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1268
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 1268
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ASGNI4
line 1111
;1111:					}
LABELV $440
line 1112
;1112:					pm->ps->fd.forceJumpZStart = pm->ps->origin[2];//so we don't take damage if we land at same height
ADDRLP4 1268
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1268
INDIRP4
CNSTI4 1080
ADDP4
ADDRLP4 1268
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 1113
;1113:					pm->ps->pm_flags |= PMF_JUMP_HELD;//PMF_JUMPING|PMF_SLOW_MO_FALL;
ADDRLP4 1272
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1272
INDIRP4
ADDRLP4 1272
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1114
;1114:					pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 1116
;1115:					//WP_ForcePowerDrain( pm->gent, FP_LEVITATION, 0 );
;1116:					pm->ps->fd.forceJumpSound = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1088
ADDP4
CNSTI4 1
ASGNI4
line 1117
;1117:				}
line 1118
;1118:			}
line 1119
;1119:		}
ADDRGP4 $344
JUMPV
LABELV $343
line 1121
;1120:		else 
;1121:		{//in the air
line 1122
;1122:			int legsAnim = (pm->ps->legsAnim&~ANIM_TOGGLEBIT);
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
line 1123
;1123:			if ( legsAnim == BOTH_WALL_RUN_LEFT || legsAnim == BOTH_WALL_RUN_RIGHT )
ADDRLP4 48
ADDRLP4 44
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 823
EQI4 $444
ADDRLP4 48
INDIRI4
CNSTI4 820
NEI4 $442
LABELV $444
line 1124
;1124:			{//running on a wall
line 1127
;1125:				vec3_t right, traceto, mins, maxs, fwdAngles;
;1126:				trace_t	trace;
;1127:				int		anim = -1;
ADDRLP4 52
CNSTI4 -1
ASGNI4
line 1129
;1128:
;1129:				VectorSet(mins, pm->mins[0], pm->mins[0], 0);
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 68
ADDRLP4 1196
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 68+4
ADDRLP4 1196
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 68+8
CNSTF4 0
ASGNF4
line 1130
;1130:				VectorSet(maxs, pm->maxs[0], pm->maxs[0], 24);
ADDRLP4 1200
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 80
ADDRLP4 1200
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 80+4
ADDRLP4 1200
INDIRP4
INDIRF4
ASGNF4
ADDRLP4 80+8
CNSTF4 1103101952
ASGNF4
line 1131
;1131:				VectorSet(fwdAngles, 0, pm->ps->viewangles[YAW], 0);
ADDRLP4 56
CNSTF4 0
ASGNF4
ADDRLP4 56+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+8
CNSTF4 0
ASGNF4
line 1133
;1132:
;1133:				AngleVectors( fwdAngles, NULL, right, NULL );
ADDRLP4 56
ARGP4
ADDRLP4 1204
CNSTP4 0
ASGNP4
ADDRLP4 1204
INDIRP4
ARGP4
ADDRLP4 92
ARGP4
ADDRLP4 1204
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1135
;1134:
;1135:				if ( legsAnim == BOTH_WALL_RUN_LEFT )
ADDRLP4 44
INDIRI4
CNSTI4 823
NEI4 $451
line 1136
;1136:				{
line 1137
;1137:					if ( pm->ps->legsTimer > 400 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 400
LEI4 $452
line 1138
;1138:					{//not at the end of the anim
line 1139
;1139:						float animLen = PM_AnimLength( 0, (animNumber_t)BOTH_WALL_RUN_LEFT );
CNSTI4 0
ARGI4
CNSTI4 823
ARGI4
ADDRLP4 1212
ADDRGP4 PM_AnimLength
CALLI4
ASGNI4
ADDRLP4 1208
ADDRLP4 1212
INDIRI4
CVIF4 4
ASGNF4
line 1140
;1140:						if ( pm->ps->legsTimer < animLen - 400 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 1208
INDIRF4
CNSTF4 1137180672
SUBF4
GEF4 $452
line 1141
;1141:						{//not at start of anim
line 1142
;1142:							VectorMA( pm->ps->origin, -16, right, traceto );
ADDRLP4 1216
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1220
CNSTF4 3246391296
ASGNF4
ADDRLP4 104
ADDRLP4 1216
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+4
ADDRLP4 1216
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 92+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3246391296
ADDRLP4 92+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1143
;1143:							anim = BOTH_WALL_RUN_LEFT_FLIP;
ADDRLP4 52
CNSTI4 824
ASGNI4
line 1144
;1144:						}
line 1145
;1145:					}
line 1146
;1146:				}
ADDRGP4 $452
JUMPV
LABELV $451
line 1147
;1147:				else if ( legsAnim == BOTH_WALL_RUN_RIGHT )
ADDRLP4 44
INDIRI4
CNSTI4 820
NEI4 $461
line 1148
;1148:				{
line 1149
;1149:					if ( pm->ps->legsTimer > 400 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 400
LEI4 $463
line 1150
;1150:					{//not at the end of the anim
line 1151
;1151:						float animLen = PM_AnimLength( 0, (animNumber_t)BOTH_WALL_RUN_RIGHT );
CNSTI4 0
ARGI4
CNSTI4 820
ARGI4
ADDRLP4 1212
ADDRGP4 PM_AnimLength
CALLI4
ASGNI4
ADDRLP4 1208
ADDRLP4 1212
INDIRI4
CVIF4 4
ASGNF4
line 1152
;1152:						if ( pm->ps->legsTimer < animLen - 400 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 1208
INDIRF4
CNSTF4 1137180672
SUBF4
GEF4 $465
line 1153
;1153:						{//not at start of anim
line 1154
;1154:							VectorMA( pm->ps->origin, 16, right, traceto );
ADDRLP4 1216
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1220
CNSTF4 1098907648
ASGNF4
ADDRLP4 104
ADDRLP4 1216
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+4
ADDRLP4 1216
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 92+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1098907648
ADDRLP4 92+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1155
;1155:							anim = BOTH_WALL_RUN_RIGHT_FLIP;
ADDRLP4 52
CNSTI4 821
ASGNI4
line 1156
;1156:						}
LABELV $465
line 1157
;1157:					}
LABELV $463
line 1158
;1158:				}
LABELV $461
LABELV $452
line 1159
;1159:				if ( anim != -1 )
ADDRLP4 52
INDIRI4
CNSTI4 -1
EQI4 $471
line 1160
;1160:				{
line 1161
;1161:					pm->trace( &trace, pm->ps->origin, mins, maxs, traceto, pm->ps->clientNum, CONTENTS_SOLID|CONTENTS_BODY );
ADDRLP4 116
ARGP4
ADDRLP4 1208
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1212
ADDRLP4 1208
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1212
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 68
ARGP4
ADDRLP4 80
ARGP4
ADDRLP4 104
ARGP4
ADDRLP4 1212
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 257
ARGI4
ADDRLP4 1208
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 1162
;1162:					if ( trace.fraction < 1.0f )
ADDRLP4 116+8
INDIRF4
CNSTF4 1065353216
GEF4 $473
line 1163
;1163:					{//flip off wall
line 1164
;1164:						int parts = 0;
ADDRLP4 1216
CNSTI4 0
ASGNI4
line 1166
;1165:
;1166:						if ( anim == BOTH_WALL_RUN_LEFT_FLIP )
ADDRLP4 52
INDIRI4
CNSTI4 824
NEI4 $476
line 1167
;1167:						{
line 1168
;1168:							pm->ps->velocity[0] *= 0.5f;
ADDRLP4 1220
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1220
INDIRP4
CNSTF4 1056964608
ADDRLP4 1220
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1169
;1169:							pm->ps->velocity[1] *= 0.5f;
ADDRLP4 1224
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1224
INDIRP4
CNSTF4 1056964608
ADDRLP4 1224
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1170
;1170:							VectorMA( pm->ps->velocity, 150, right, pm->ps->velocity );
ADDRLP4 1228
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1228
INDIRP4
ADDRLP4 1228
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1232
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1232
INDIRP4
ADDRLP4 1232
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 92+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1236
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1236
INDIRP4
ADDRLP4 1236
INDIRP4
INDIRF4
CNSTF4 1125515264
ADDRLP4 92+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1171
;1171:						}
ADDRGP4 $477
JUMPV
LABELV $476
line 1172
;1172:						else if ( anim == BOTH_WALL_RUN_RIGHT_FLIP )
ADDRLP4 52
INDIRI4
CNSTI4 821
NEI4 $480
line 1173
;1173:						{
line 1174
;1174:							pm->ps->velocity[0] *= 0.5f;
ADDRLP4 1220
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1220
INDIRP4
CNSTF4 1056964608
ADDRLP4 1220
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1175
;1175:							pm->ps->velocity[1] *= 0.5f;
ADDRLP4 1224
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1224
INDIRP4
CNSTF4 1056964608
ADDRLP4 1224
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1176
;1176:							VectorMA( pm->ps->velocity, -150, right, pm->ps->velocity );
ADDRLP4 1228
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 1228
INDIRP4
ADDRLP4 1228
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 92
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1232
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 1232
INDIRP4
ADDRLP4 1232
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 92+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1236
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 1236
INDIRP4
ADDRLP4 1236
INDIRP4
INDIRF4
CNSTF4 3272998912
ADDRLP4 92+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1177
;1177:						}
LABELV $480
LABELV $477
line 1178
;1178:						parts = SETANIM_LEGS;
ADDRLP4 1216
CNSTI4 2
ASGNI4
line 1179
;1179:						if ( !pm->ps->weaponTime )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
NEI4 $484
line 1180
;1180:						{
line 1181
;1181:							parts = SETANIM_BOTH;
ADDRLP4 1216
CNSTI4 3
ASGNI4
line 1182
;1182:						}
LABELV $484
line 1183
;1183:						PM_SetAnim( parts, anim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 0 );
ADDRLP4 1216
INDIRI4
ARGI4
ADDRLP4 52
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 1186
;1184:						//FIXME: do damage to traceEnt, like above?
;1185:						//pm->ps->pm_flags |= PMF_JUMPING|PMF_SLOW_MO_FALL;
;1186:						pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 1187
;1187:					}
LABELV $473
line 1188
;1188:				}
LABELV $471
line 1189
;1189:				if ( pm->cmd.upmove != 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $443
line 1190
;1190:				{//jump failed, so don't try to do normal jump code, just return
line 1191
;1191:					return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
line 1193
;1192:				}
;1193:			}
LABELV $442
line 1195
;1194:			else
;1195:			{
line 1197
;1196:				//FIXME: if in a butterfly, kick people away?
;1197:			}
LABELV $443
line 1198
;1198:		}
LABELV $344
line 1199
;1199:	}
LABELV $341
LABELV $331
line 1259
;1200:
;1201:	//if ( pm->cmd.upmove > 0		//Boot comment. Disable DFA.
;1202:	//	&& pm->ps->weapon == WP_SABER
;1203:	//	&& (pm->ps->weaponTime > 0||pm->cmd.buttons&BUTTON_ATTACK) )
;1204:	//{//okay, we just jumped and we're in an attack
;1205:	//	if ( !BG_InRoll( pm->ps, pm->ps->legsAnim )
;1206:	//		&& !PM_InKnockDown( pm->ps )
;1207:	//		&& !BG_InDeathAnim(pm->ps->legsAnim)
;1208:	//		&& !BG_FlippingAnim( pm->ps->legsAnim )
;1209:	//		&& !PM_SpinningAnim( pm->ps->legsAnim )
;1210:	//		&& !BG_SaberInSpecialAttack( pm->ps->torsoAnim )
;1211:	//		&& ( BG_SaberInAttack( pm->ps->saberMove ) )
;1212:	//		/*&& PM_InAnimForSaberMove( pm->ps->torsoAnim, pm->ps->saberMove )*/ )
;1213:	//	{//not in an anim we shouldn't interrupt
;1214:	//		//see if it's not too late to start a special jump-attack
;1215:	//		float animLength = PM_AnimLength( 0, (animNumber_t)pm->ps->torsoAnim );
;1216:	//		if ( animLength - pm->ps->torsoTimer < 500 )
;1217:	//		{//just started the saberMove
;1218:	//			//check for special-case jump attacks
;1219:	//			if ( pm->ps->fd.saberAnimLevel == FORCE_LEVEL_2 )
;1220:	//			{//using medium attacks
;1221:	//				if (/*pm->ps->velocity[2] > 100 &&*/
;1222:	//					PM_GroundDistance() < 32 &&
;1223:	//					!BG_InSpecialJump(pm->ps->legsAnim))
;1224:	//				{ //FLIP AND DOWNWARD ATTACK
;1225:	//					trace_t tr;
;1226:
;1227:	//					if (PM_SomeoneInFront(&tr))
;1228:	//					{
;1229:	//						PM_SetSaberMove(PM_SaberFlipOverAttackMove(&tr));
;1230:	//						pml.groundPlane = qfalse;
;1231:	//						pml.walking = qfalse;
;1232:	//						pm->ps->pm_flags |= PMF_JUMP_HELD;
;1233:	//						pm->ps->groundEntityNum = ENTITYNUM_NONE;
;1234:	//						VectorClear(pml.groundTrace.plane.normal);
;1235:
;1236:	//						pm->ps->weaponTime = pm->ps->torsoTimer;
;1237:	//					}
;1238:	//				}
;1239:	//			}
;1240:	//			else if ( pm->ps->fd.saberAnimLevel == FORCE_LEVEL_3 )
;1241:	//			{//using strong attacks
;1242:	//				if ( pm->cmd.forwardmove > 0 && //going forward
;1243:	//					PM_GroundDistance() < 32 &&
;1244:	//					!BG_InSpecialJump(pm->ps->legsAnim))
;1245:	//				{//strong attack: jump-hack
;1246:	//					PM_SetSaberMove( PM_SaberJumpAttackMove() );
;1247:	//					pml.groundPlane = qfalse;
;1248:	//					pml.walking = qfalse;
;1249:	//					pm->ps->pm_flags |= PMF_JUMP_HELD;
;1250:	//					pm->ps->groundEntityNum = ENTITYNUM_NONE;
;1251:	//					VectorClear(pml.groundTrace.plane.normal);
;1252:
;1253:	//					pm->ps->weaponTime = pm->ps->torsoTimer;
;1254:	//				}
;1255:	//			}
;1256:	//		}
;1257:	//	}
;1258:	//}
;1259:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $488
line 1260
;1260:	{
line 1261
;1261:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $237
JUMPV
LABELV $488
line 1263
;1262:	}
;1263:	if ( pm->cmd.upmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $490
line 1264
;1264:	{//no special jumps
line 1273
;1265:		/*
;1266:		gentity_t *groundEnt = &g_entities[pm->ps->groundEntityNum];
;1267:		if ( groundEnt && groundEnt->NPC )
;1268:		{//Can't jump off of someone's head
;1269:			return qfalse;
;1270:		}
;1271:		*/
;1272:
;1273:		pm->ps->velocity[2] = JUMP_VELOCITY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1130430464
ASGNF4
line 1274
;1274:		pm->ps->fd.forceJumpZStart = pm->ps->origin[2];//so we don't take damage if we land at same height
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 1080
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 1275
;1275:		pm->ps->pm_flags |= PMF_JUMP_HELD;//PMF_JUMPING;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1276
;1276:	}
LABELV $490
line 1279
;1277:
;1278:	//Jumping
;1279:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 1280
;1280:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1281
;1281:	pm->ps->pm_flags |= PMF_JUMP_HELD;
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 1282
;1282:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1023
ASGNI4
line 1283
;1283:	pm->ps->fd.forceJumpZStart = pm->ps->origin[2];
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 1080
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ASGNF4
line 1285
;1284:
;1285:	PM_AddEvent( EV_JUMP );
CNSTI4 14
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1288
;1286:
;1287:	//Set the animations
;1288:	if ( pm->ps->gravity > 0 && !BG_InSpecialJump( pm->ps->legsAnim ) )
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
LEI4 $494
ADDRLP4 52
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 BG_InSpecialJump
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $494
line 1289
;1289:	{
line 1290
;1290:		PM_JumpForDir();
ADDRGP4 PM_JumpForDir
CALLV
pop
line 1291
;1291:	}
LABELV $494
line 1293
;1292:
;1293:	return qtrue;
CNSTI4 1
RETI4
LABELV $237
endproc PM_CheckJump 1284 28
proc PM_CheckWaterJump 56 8
line 1300
;1294:}
;1295:/*
;1296:=============
;1297:PM_CheckWaterJump
;1298:=============
;1299:*/
;1300:static qboolean	PM_CheckWaterJump( void ) {
line 1305
;1301:	vec3_t	spot;
;1302:	int		cont;
;1303:	vec3_t	flatforward;
;1304:
;1305:	if (pm->ps->pm_time) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $497
line 1306
;1306:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $496
JUMPV
LABELV $497
line 1310
;1307:	}
;1308:
;1309:	// check for water jump
;1310:	if ( pm->waterlevel != 2 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
EQI4 $499
line 1311
;1311:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $496
JUMPV
LABELV $499
line 1314
;1312:	}
;1313:
;1314:	flatforward[0] = pml.forward[0];
ADDRLP4 12
ADDRGP4 pml
INDIRF4
ASGNF4
line 1315
;1315:	flatforward[1] = pml.forward[1];
ADDRLP4 12+4
ADDRGP4 pml+4
INDIRF4
ASGNF4
line 1316
;1316:	flatforward[2] = 0;
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 1317
;1317:	VectorNormalize (flatforward);
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1319
;1318:
;1319:	VectorMA (pm->ps->origin, 30, flatforward, spot);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
CNSTF4 1106247680
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1320
;1320:	spot[2] += 4;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1082130432
ADDF4
ASGNF4
line 1321
;1321:	cont = pm->pointcontents (spot, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ADDRLP4 36
INDIRP4
CNSTI4 244
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 40
INDIRI4
ASGNI4
line 1322
;1322:	if ( !(cont & CONTENTS_SOLID) ) {
ADDRLP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $509
line 1323
;1323:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $496
JUMPV
LABELV $509
line 1326
;1324:	}
;1325:
;1326:	spot[2] += 16;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 1327
;1327:	cont = pm->pointcontents (spot, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 44
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRLP4 44
INDIRP4
CNSTI4 244
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 48
INDIRI4
ASGNI4
line 1328
;1328:	if ( cont ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $512
line 1329
;1329:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $496
JUMPV
LABELV $512
line 1333
;1330:	}
;1331:
;1332:	// jump out of water
;1333:	VectorScale (pml.forward, 200, pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1128792064
ADDRGP4 pml
INDIRF4
MULF4
ASGNF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1128792064
ADDRGP4 pml+4
INDIRF4
MULF4
ASGNF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1128792064
ADDRGP4 pml+8
INDIRF4
MULF4
ASGNF4
line 1334
;1334:	pm->ps->velocity[2] = 350;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1135542272
ASGNF4
line 1336
;1335:
;1336:	pm->ps->pm_flags |= PMF_TIME_WATERJUMP;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 1337
;1337:	pm->ps->pm_time = 2000;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 2000
ASGNI4
line 1339
;1338:
;1339:	return qtrue;
CNSTI4 1
RETI4
LABELV $496
endproc PM_CheckWaterJump 56 8
proc PM_WaterJumpMove 12 4
line 1352
;1340:}
;1341:
;1342://============================================================================
;1343:
;1344:
;1345:/*
;1346:===================
;1347:PM_WaterJumpMove
;1348:
;1349:Flying out of the water
;1350:===================
;1351:*/
;1352:static void PM_WaterJumpMove( void ) {
line 1355
;1353:	// waterjump has no control, but falls
;1354:
;1355:	PM_StepSlideMove( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 1357
;1356:
;1357:	pm->ps->velocity[2] -= pm->ps->gravity * pml.frametime;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pml+36
INDIRF4
MULF4
SUBF4
ASGNF4
line 1358
;1358:	if (pm->ps->velocity[2] < 0) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
GEF4 $518
line 1360
;1359:		// cancel as soon as we are falling down again
;1360:		pm->ps->pm_flags &= ~PMF_ALL_TIMES;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -353
BANDI4
ASGNI4
line 1361
;1361:		pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 1362
;1362:	}
LABELV $518
line 1363
;1363:}
LABELV $516
endproc PM_WaterJumpMove 12 4
proc PM_WaterMove 76 16
line 1371
;1364:
;1365:/*
;1366:===================
;1367:PM_WaterMove
;1368:
;1369:===================
;1370:*/
;1371:static void PM_WaterMove( void ) {
line 1379
;1372:	int		i;
;1373:	vec3_t	wishvel;
;1374:	float	wishspeed;
;1375:	vec3_t	wishdir;
;1376:	float	scale;
;1377:	float	vel;
;1378:
;1379:	if ( PM_CheckWaterJump() ) {
ADDRLP4 40
ADDRGP4 PM_CheckWaterJump
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $521
line 1380
;1380:		PM_WaterJumpMove();
ADDRGP4 PM_WaterJumpMove
CALLV
pop
line 1381
;1381:		return;
ADDRGP4 $520
JUMPV
LABELV $521
line 1397
;1382:	}
;1383:#if 0
;1384:	// jump = head for surface
;1385:	if ( pm->cmd.upmove >= 10 ) {
;1386:		if (pm->ps->velocity[2] > -300) {
;1387:			if ( pm->watertype == CONTENTS_WATER ) {
;1388:				pm->ps->velocity[2] = 100;
;1389:			} else if (pm->watertype == CONTENTS_SLIME) {
;1390:				pm->ps->velocity[2] = 80;
;1391:			} else {
;1392:				pm->ps->velocity[2] = 50;
;1393:			}
;1394:		}
;1395:	}
;1396:#endif
;1397:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 1399
;1398:
;1399:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 44
INDIRF4
ASGNF4
line 1403
;1400:	//
;1401:	// user intentions
;1402:	//
;1403:	if ( !scale ) {
ADDRLP4 4
INDIRF4
CNSTF4 0
NEF4 $523
line 1404
;1404:		wishvel[0] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 1405
;1405:		wishvel[1] = 0;
ADDRLP4 8+4
CNSTF4 0
ASGNF4
line 1406
;1406:		wishvel[2] = -60;		// sink towards bottom
ADDRLP4 8+8
CNSTF4 3262119936
ASGNF4
line 1407
;1407:	} else {
ADDRGP4 $524
JUMPV
LABELV $523
line 1408
;1408:		for (i=0 ; i<3 ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $527
line 1409
;1409:			wishvel[i] = scale * pml.forward[i]*pm->cmd.forwardmove + scale * pml.right[i]*pm->cmd.rightmove;
ADDRLP4 48
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 56
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 48
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 48
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
MULF4
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDRLP4 4
INDIRF4
ADDRLP4 48
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
MULF4
ADDRLP4 56
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
LABELV $528
line 1408
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $527
line 1411
;1410:
;1411:		wishvel[2] += scale * pm->cmd.upmove;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1412
;1412:	}
LABELV $524
line 1414
;1413:
;1414:	VectorCopy (wishvel, wishdir);
ADDRLP4 24
ADDRLP4 8
INDIRB
ASGNB 12
line 1415
;1415:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 24
ARGP4
ADDRLP4 48
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 48
INDIRF4
ASGNF4
line 1417
;1416:
;1417:	if ( wishspeed > pm->ps->speed * pm_swimScale ) {
ADDRLP4 20
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_swimScale
INDIRF4
MULF4
LEF4 $533
line 1418
;1418:		wishspeed = pm->ps->speed * pm_swimScale;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_swimScale
INDIRF4
MULF4
ASGNF4
line 1419
;1419:	}
LABELV $533
line 1421
;1420:
;1421:	PM_Accelerate (wishdir, wishspeed, pm_wateraccelerate);
ADDRLP4 24
ARGP4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 pm_wateraccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 1424
;1422:
;1423:	// make sure we can go up slopes easily under water
;1424:	if ( pml.groundPlane && DotProduct( pm->ps->velocity, pml.groundTrace.plane.normal ) < 0 ) {
ADDRGP4 pml+48
INDIRI4
CNSTI4 0
EQI4 $535
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRGP4 pml+52+24
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRGP4 pml+52+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRGP4 pml+52+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
GEF4 $535
line 1425
;1425:		vel = VectorLength(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 56
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 56
INDIRF4
ASGNF4
line 1427
;1426:		// slide along the ground plane
;1427:		PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal, 
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 60
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 1430
;1428:			pm->ps->velocity, OVERCLIP );
;1429:
;1430:		VectorNormalize(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1431
;1431:		VectorScale(pm->ps->velocity, vel, pm->ps->velocity);
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 72
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
line 1432
;1432:	}
LABELV $535
line 1434
;1433:
;1434:	PM_SlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_SlideMove
CALLI4
pop
line 1435
;1435:}
LABELV $520
endproc PM_WaterMove 76 16
proc PM_FlyMove 52 12
line 1444
;1436:
;1437:/*
;1438:===================
;1439:PM_FlyMove
;1440:
;1441:Only with the flight powerup
;1442:===================
;1443:*/
;1444:static void PM_FlyMove( void ) {
line 1452
;1445:	int		i;
;1446:	vec3_t	wishvel;
;1447:	float	wishspeed;
;1448:	vec3_t	wishdir;
;1449:	float	scale;
;1450:
;1451:	// normal slowdown
;1452:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 1454
;1453:
;1454:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 36
INDIRF4
ASGNF4
line 1458
;1455:	//
;1456:	// user intentions
;1457:	//
;1458:	if ( !scale ) {
ADDRLP4 4
INDIRF4
CNSTF4 0
NEF4 $549
line 1459
;1459:		wishvel[0] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 1460
;1460:		wishvel[1] = 0;
ADDRLP4 8+4
CNSTF4 0
ASGNF4
line 1461
;1461:		wishvel[2] = 0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 1462
;1462:	} else {
ADDRGP4 $550
JUMPV
LABELV $549
line 1463
;1463:		for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $553
line 1464
;1464:			wishvel[i] = scale * pml.forward[i]*pm->cmd.forwardmove + scale * pml.right[i]*pm->cmd.rightmove;
ADDRLP4 40
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 48
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 40
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 40
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDRLP4 4
INDIRF4
ADDRLP4 40
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1465
;1465:		}
LABELV $554
line 1463
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $553
line 1467
;1466:
;1467:		wishvel[2] += scale * pm->cmd.upmove;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1468
;1468:	}
LABELV $550
line 1470
;1469:
;1470:	VectorCopy (wishvel, wishdir);
ADDRLP4 20
ADDRLP4 8
INDIRB
ASGNB 12
line 1471
;1471:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 20
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 40
INDIRF4
ASGNF4
line 1473
;1472:
;1473:	PM_Accelerate (wishdir, wishspeed, pm_flyaccelerate);
ADDRLP4 20
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 pm_flyaccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 1475
;1474:
;1475:	PM_StepSlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 1476
;1476:}
LABELV $548
endproc PM_FlyMove 52 12
proc PM_AirMove 84 16
line 1485
;1477:
;1478:
;1479:/*
;1480:===================
;1481:PM_AirMove
;1482:
;1483:===================
;1484:*/
;1485:static void PM_AirMove( void ) {
line 1494
;1486:	int			i;
;1487:	vec3_t		wishvel;
;1488:	float		fmove, smove;
;1489:	vec3_t		wishdir;
;1490:	float		wishspeed;
;1491:	float		scale;
;1492:	usercmd_t	cmd;
;1493:
;1494:	if (pm->ps->pm_type != PM_SPECTATOR)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $560
line 1495
;1495:	{
line 1497
;1496:#if METROID_JUMP
;1497:		PM_CheckJump();
ADDRGP4 PM_CheckJump
CALLI4
pop
line 1505
;1498:#else
;1499:		if (pm->ps->fd.forceJumpZStart &&
;1500:			pm->ps->forceJumpFlip)
;1501:		{
;1502:			PM_CheckJump();
;1503:		}
;1504:#endif
;1505:	}
LABELV $560
line 1506
;1506:	PM_Friction();
ADDRGP4 PM_Friction
CALLV
pop
line 1508
;1507:
;1508:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1509
;1509:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1511
;1510:
;1511:	cmd = pm->cmd;
ADDRLP4 44
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 28
line 1512
;1512:	scale = PM_CmdScale( &cmd );
ADDRLP4 44
ARGP4
ADDRLP4 72
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 72
INDIRF4
ASGNF4
line 1515
;1513:
;1514:	// set the movementDir so clients can rotate the legs for strafing
;1515:	PM_SetMovementDir();
ADDRGP4 PM_SetMovementDir
CALLV
pop
line 1518
;1516:
;1517:	// project moves down to flat plane
;1518:	pml.forward[2] = 0;
ADDRGP4 pml+8
CNSTF4 0
ASGNF4
line 1519
;1519:	pml.right[2] = 0;
ADDRGP4 pml+12+8
CNSTF4 0
ASGNF4
line 1520
;1520:	VectorNormalize (pml.forward);
ADDRGP4 pml
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1521
;1521:	VectorNormalize (pml.right);
ADDRGP4 pml+12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1523
;1522:
;1523:	if ( gPMDoSlowFall )
ADDRGP4 gPMDoSlowFall
INDIRI4
CNSTI4 0
EQI4 $566
line 1524
;1524:	{//no air-control
line 1525
;1525:		VectorClear( wishvel );
ADDRLP4 76
CNSTF4 0
ASGNF4
ADDRLP4 4+8
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 76
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 76
INDIRF4
ASGNF4
line 1526
;1526:	}
ADDRGP4 $567
JUMPV
LABELV $566
line 1528
;1527:	else
;1528:	{
line 1529
;1529:		for ( i = 0 ; i < 2 ; i++ )
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $570
line 1530
;1530:		{
line 1531
;1531:			wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 76
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 76
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 76
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 1532
;1532:		}
LABELV $571
line 1529
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $570
line 1533
;1533:		wishvel[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 1534
;1534:	}
LABELV $567
line 1536
;1535:
;1536:	VectorCopy (wishvel, wishdir);
ADDRLP4 24
ADDRLP4 4
INDIRB
ASGNB 12
line 1537
;1537:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 24
ARGP4
ADDRLP4 76
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 76
INDIRF4
ASGNF4
line 1538
;1538:	wishspeed *= scale;
ADDRLP4 36
ADDRLP4 36
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
line 1541
;1539:
;1540:	// not on ground, so little effect on velocity
;1541:	PM_Accelerate (wishdir, wishspeed, pm_airaccelerate);
ADDRLP4 24
ARGP4
ADDRLP4 36
INDIRF4
ARGF4
ADDRGP4 pm_airaccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 1546
;1542:
;1543:	// we may have a ground plane that is very steep, even
;1544:	// though we don't have a groundentity
;1545:	// slide along the steep plane
;1546:	if ( pml.groundPlane ) {
ADDRGP4 pml+48
INDIRI4
CNSTI4 0
EQI4 $576
line 1547
;1547:		PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal, 
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 1549
;1548:			pm->ps->velocity, OVERCLIP );
;1549:	}
LABELV $576
line 1551
;1550:
;1551:	PM_StepSlideMove ( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 1552
;1552:}
LABELV $559
endproc PM_AirMove 84 16
proc PM_WalkMove 148 16
line 1560
;1553:
;1554:/*
;1555:===================
;1556:PM_WalkMove
;1557:
;1558:===================
;1559:*/
;1560:static void PM_WalkMove( void ) {
line 1572
;1561:	int			i;
;1562:	vec3_t		wishvel;
;1563:	float		fmove, smove;
;1564:	vec3_t		wishdir;
;1565:	float		wishspeed;
;1566:	float		scale;
;1567:	usercmd_t	cmd;
;1568:	float		accelerate;
;1569:	float		vel;
;1570:	float		totalVel;
;1571:
;1572:	if (pm->ps->velocity[0] < 0)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
GEF4 $582
line 1573
;1573:	{
line 1574
;1574:		totalVel = -pm->ps->velocity[0];
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
NEGF4
ASGNF4
line 1575
;1575:	}
ADDRGP4 $583
JUMPV
LABELV $582
line 1577
;1576:	else
;1577:	{
line 1578
;1578:		totalVel = pm->ps->velocity[0];
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ASGNF4
line 1579
;1579:	}
LABELV $583
line 1581
;1580:
;1581:	if (pm->ps->velocity[1] < 0)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
CNSTF4 0
GEF4 $584
line 1582
;1582:	{
line 1583
;1583:		totalVel += -pm->ps->velocity[1];
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
NEGF4
ADDF4
ASGNF4
line 1584
;1584:	}
ADDRGP4 $585
JUMPV
LABELV $584
line 1586
;1585:	else
;1586:	{
line 1587
;1587:		totalVel += pm->ps->velocity[1];
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1588
;1588:	}
LABELV $585
line 1590
;1589:
;1590:	if (totalVel < 200)
ADDRLP4 44
INDIRF4
CNSTF4 1128792064
GEF4 $586
line 1591
;1591:	{
line 1592
;1592:		pm->ps->fd.forceSpeedSmash = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1124
ADDP4
CNSTF4 1065353216
ASGNF4
line 1593
;1593:	}
LABELV $586
line 1595
;1594:
;1595:	if ( pm->waterlevel > 2 && DotProduct( pml.forward, pml.groundTrace.plane.normal ) > 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
LEI4 $588
ADDRGP4 pml
INDIRF4
ADDRGP4 pml+52+24
INDIRF4
MULF4
ADDRGP4 pml+4
INDIRF4
ADDRGP4 pml+52+24+4
INDIRF4
MULF4
ADDF4
ADDRGP4 pml+8
INDIRF4
ADDRGP4 pml+52+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
LEF4 $588
line 1597
;1596:		// begin swimming
;1597:		PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 1598
;1598:		return;
ADDRGP4 $581
JUMPV
LABELV $588
line 1602
;1599:	}
;1600:
;1601:
;1602:	if (pm->ps->pm_type != PM_SPECTATOR)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $600
line 1603
;1603:	{
line 1604
;1604:		if ( PM_CheckJump () ) {
ADDRLP4 84
ADDRGP4 PM_CheckJump
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $602
line 1606
;1605:			// jumped away
;1606:			if ( pm->waterlevel > 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LEI4 $604
line 1607
;1607:				PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 1608
;1608:			} else {
ADDRGP4 $581
JUMPV
LABELV $604
line 1609
;1609:				PM_AirMove();
ADDRGP4 PM_AirMove
CALLV
pop
line 1610
;1610:			}
line 1611
;1611:			return;
ADDRGP4 $581
JUMPV
LABELV $602
line 1613
;1612:		}
;1613:	}
LABELV $600
line 1615
;1614:
;1615:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 1617
;1616:
;1617:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1618
;1618:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1620
;1619:
;1620:	cmd = pm->cmd;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 28
line 1621
;1621:	scale = PM_CmdScale( &cmd );
ADDRLP4 52
ARGP4
ADDRLP4 84
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 84
INDIRF4
ASGNF4
line 1624
;1622:
;1623:	// set the movementDir so clients can rotate the legs for strafing
;1624:	PM_SetMovementDir();
ADDRGP4 PM_SetMovementDir
CALLV
pop
line 1627
;1625:
;1626:	// project moves down to flat plane
;1627:	pml.forward[2] = 0;
ADDRGP4 pml+8
CNSTF4 0
ASGNF4
line 1628
;1628:	pml.right[2] = 0;
ADDRGP4 pml+12+8
CNSTF4 0
ASGNF4
line 1631
;1629:
;1630:	// project the forward and right directions onto the ground plane
;1631:	PM_ClipVelocity (pml.forward, pml.groundTrace.plane.normal, pml.forward, OVERCLIP );
ADDRLP4 88
ADDRGP4 pml
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 1632
;1632:	PM_ClipVelocity (pml.right, pml.groundTrace.plane.normal, pml.right, OVERCLIP );
ADDRGP4 pml+12
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRGP4 pml+12
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 1634
;1633:	//
;1634:	VectorNormalize (pml.forward);
ADDRGP4 pml
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1635
;1635:	VectorNormalize (pml.right);
ADDRGP4 pml+12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1637
;1636:
;1637:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $616
line 1638
;1638:		wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 92
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 92
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 92
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 92
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 1639
;1639:	}
LABELV $617
line 1637
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $616
line 1643
;1640:	// when going up or down slopes the wish velocity should Not be zero
;1641://	wishvel[2] = 0;
;1642:
;1643:	VectorCopy (wishvel, wishdir);
ADDRLP4 32
ADDRLP4 4
INDIRB
ASGNB 12
line 1644
;1644:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 32
ARGP4
ADDRLP4 92
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 92
INDIRF4
ASGNF4
line 1645
;1645:	wishspeed *= scale;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 1648
;1646:
;1647:	// clamp the speed lower if ducking
;1648:	if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $621
line 1649
;1649:		if ( wishspeed > pm->ps->speed * pm_duckScale ) {
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
LEF4 $622
line 1650
;1650:			wishspeed = pm->ps->speed * pm_duckScale;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
ASGNF4
line 1651
;1651:		}
line 1652
;1652:	}
ADDRGP4 $622
JUMPV
LABELV $621
line 1653
;1653:	else if ( (pm->ps->pm_flags & PMF_ROLLING) && !BG_InRoll(pm->ps, pm->ps->legsAnim) &&
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $625
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
NEI4 $625
ADDRLP4 104
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 PM_InRollComplete
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $625
line 1655
;1654:		!PM_InRollComplete(pm->ps, pm->ps->legsAnim))
;1655:	{
line 1656
;1656:		if ( wishspeed > pm->ps->speed * pm_duckScale ) {
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
LEF4 $627
line 1657
;1657:			wishspeed = pm->ps->speed * pm_duckScale;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
ASGNF4
line 1658
;1658:		}
LABELV $627
line 1659
;1659:	}
LABELV $625
LABELV $622
line 1662
;1660:
;1661:	// clamp the speed lower if wading or walking on the bottom
;1662:	if ( pm->waterlevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
EQI4 $629
line 1665
;1663:		float	waterScale;
;1664:
;1665:		waterScale = pm->waterlevel / 3.0;
ADDRLP4 112
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1077936128
DIVF4
ASGNF4
line 1666
;1666:		waterScale = 1.0 - ( 1.0 - pm_swimScale ) * waterScale;
ADDRLP4 116
CNSTF4 1065353216
ASGNF4
ADDRLP4 112
ADDRLP4 116
INDIRF4
ADDRLP4 116
INDIRF4
ADDRGP4 pm_swimScale
INDIRF4
SUBF4
ADDRLP4 112
INDIRF4
MULF4
SUBF4
ASGNF4
line 1667
;1667:		if ( wishspeed > pm->ps->speed * waterScale ) {
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRF4
MULF4
LEF4 $631
line 1668
;1668:			wishspeed = pm->ps->speed * waterScale;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRF4
MULF4
ASGNF4
line 1669
;1669:		}
LABELV $631
line 1670
;1670:	}
LABELV $629
line 1674
;1671:
;1672:	// when a player gets hit, they temporarily lose
;1673:	// full control, which allows them to be moved a bit
;1674:	if ( ( pml.groundTrace.surfaceFlags & SURF_SLICK ) || pm->ps->pm_flags & PMF_TIME_KNOCKBACK ) {
ADDRLP4 112
CNSTI4 0
ASGNI4
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 16384
BANDI4
ADDRLP4 112
INDIRI4
NEI4 $637
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 112
INDIRI4
EQI4 $633
LABELV $637
line 1675
;1675:		accelerate = pm_airaccelerate;
ADDRLP4 80
ADDRGP4 pm_airaccelerate
INDIRF4
ASGNF4
line 1676
;1676:	} else {
ADDRGP4 $634
JUMPV
LABELV $633
line 1677
;1677:		accelerate = pm_accelerate;
ADDRLP4 80
ADDRGP4 pm_accelerate
INDIRF4
ASGNF4
line 1678
;1678:	}
LABELV $634
line 1680
;1679:
;1680:	PM_Accelerate (wishdir, wishspeed, accelerate);
ADDRLP4 32
ARGP4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 1685
;1681:
;1682:	//Com_Printf("velocity = %1.1f %1.1f %1.1f\n", pm->ps->velocity[0], pm->ps->velocity[1], pm->ps->velocity[2]);
;1683:	//Com_Printf("velocity1 = %1.1f\n", VectorLength(pm->ps->velocity));
;1684:
;1685:	if ( ( pml.groundTrace.surfaceFlags & SURF_SLICK ) || pm->ps->pm_flags & PMF_TIME_KNOCKBACK ) {
ADDRLP4 116
CNSTI4 0
ASGNI4
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 16384
BANDI4
ADDRLP4 116
INDIRI4
NEI4 $642
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 116
INDIRI4
EQI4 $638
LABELV $642
line 1686
;1686:		pm->ps->velocity[2] -= pm->ps->gravity * pml.frametime;
ADDRLP4 120
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 124
ADDRLP4 120
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
ADDRLP4 120
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pml+36
INDIRF4
MULF4
SUBF4
ASGNF4
line 1687
;1687:	} else {
LABELV $638
line 1690
;1688:		// don't reset the z velocity for slopes
;1689://		pm->ps->velocity[2] = 0;
;1690:	}
LABELV $639
line 1692
;1691:
;1692:	vel = VectorLength(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 120
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 120
INDIRF4
ASGNF4
line 1695
;1693:
;1694:	// slide along the ground plane
;1695:	PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal, 
ADDRLP4 124
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 1699
;1696:		pm->ps->velocity, OVERCLIP );
;1697:
;1698:	// don't decrease velocity when going up or down a slope
;1699:	VectorNormalize(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1700
;1700:	VectorScale(pm->ps->velocity, vel, pm->ps->velocity);
ADDRLP4 128
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 132
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 136
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 1703
;1701:
;1702:	// don't do anything if standing still
;1703:	if (!pm->ps->velocity[0] && !pm->ps->velocity[1]) {
ADDRLP4 140
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 144
CNSTF4 0
ASGNF4
ADDRLP4 140
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 144
INDIRF4
NEF4 $646
ADDRLP4 140
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 144
INDIRF4
NEF4 $646
line 1704
;1704:		pm->ps->fd.forceSpeedSmash = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1124
ADDP4
CNSTF4 1065353216
ASGNF4
line 1705
;1705:		return;
ADDRGP4 $581
JUMPV
LABELV $646
line 1708
;1706:	}
;1707:
;1708:	PM_StepSlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 1712
;1709:
;1710:	//Com_Printf("velocity2 = %1.1f\n", VectorLength(pm->ps->velocity));
;1711:
;1712:}
LABELV $581
endproc PM_WalkMove 148 16
proc PM_DeadMove 20 4
line 1720
;1713:
;1714:
;1715:/*
;1716:==============
;1717:PM_DeadMove
;1718:==============
;1719:*/
;1720:static void PM_DeadMove( void ) {
line 1723
;1721:	float	forward;
;1722:
;1723:	if ( !pml.walking ) {
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
NEI4 $649
line 1724
;1724:		return;
ADDRGP4 $648
JUMPV
LABELV $649
line 1729
;1725:	}
;1726:
;1727:	// extra friction
;1728:
;1729:	forward = VectorLength (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 1730
;1730:	forward -= 20;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1101004800
SUBF4
ASGNF4
line 1731
;1731:	if ( forward <= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
GTF4 $652
line 1732
;1732:		VectorClear (pm->ps->velocity);
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1733
;1733:	} else {
ADDRGP4 $653
JUMPV
LABELV $652
line 1734
;1734:		VectorNormalize (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1735
;1735:		VectorScale (pm->ps->velocity, forward, pm->ps->velocity);
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1736
;1736:	}
LABELV $653
line 1737
;1737:}
LABELV $648
endproc PM_DeadMove 20 4
proc PM_NoclipMove 104 12
line 1745
;1738:
;1739:
;1740:/*
;1741:===============
;1742:PM_NoclipMove
;1743:===============
;1744:*/
;1745:static void PM_NoclipMove( void ) {
line 1754
;1746:	float	speed, drop, friction, control, newspeed;
;1747:	int			i;
;1748:	vec3_t		wishvel;
;1749:	float		fmove, smove;
;1750:	vec3_t		wishdir;
;1751:	float		wishspeed;
;1752:	float		scale;
;1753:
;1754:	pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 36
ASGNI4
line 1758
;1755:
;1756:	// friction
;1757:
;1758:	speed = VectorLength (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 64
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 64
INDIRF4
ASGNF4
line 1759
;1759:	if (speed < 1)
ADDRLP4 24
INDIRF4
CNSTF4 1065353216
GEF4 $655
line 1760
;1760:	{
line 1761
;1761:		VectorCopy (vec3_origin, pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDRGP4 vec3_origin
INDIRB
ASGNB 12
line 1762
;1762:	}
ADDRGP4 $656
JUMPV
LABELV $655
line 1764
;1763:	else
;1764:	{
line 1765
;1765:		drop = 0;
ADDRLP4 52
CNSTF4 0
ASGNF4
line 1767
;1766:
;1767:		friction = pm_friction*1.5;	// extra friction
ADDRLP4 56
CNSTF4 1069547520
ADDRGP4 pm_friction
INDIRF4
MULF4
ASGNF4
line 1768
;1768:		control = speed < pm_stopspeed ? pm_stopspeed : speed;
ADDRLP4 24
INDIRF4
ADDRGP4 pm_stopspeed
INDIRF4
GEF4 $658
ADDRLP4 68
ADDRGP4 pm_stopspeed
INDIRF4
ASGNF4
ADDRGP4 $659
JUMPV
LABELV $658
ADDRLP4 68
ADDRLP4 24
INDIRF4
ASGNF4
LABELV $659
ADDRLP4 60
ADDRLP4 68
INDIRF4
ASGNF4
line 1769
;1769:		drop += control*friction*pml.frametime;
ADDRLP4 52
ADDRLP4 52
INDIRF4
ADDRLP4 60
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 1772
;1770:
;1771:		// scale the velocity
;1772:		newspeed = speed - drop;
ADDRLP4 28
ADDRLP4 24
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
ASGNF4
line 1773
;1773:		if (newspeed < 0)
ADDRLP4 28
INDIRF4
CNSTF4 0
GEF4 $661
line 1774
;1774:			newspeed = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
LABELV $661
line 1775
;1775:		newspeed /= speed;
ADDRLP4 28
ADDRLP4 28
INDIRF4
ADDRLP4 24
INDIRF4
DIVF4
ASGNF4
line 1777
;1776:
;1777:		VectorScale (pm->ps->velocity, newspeed, pm->ps->velocity);
ADDRLP4 72
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 1778
;1778:	}
LABELV $656
line 1781
;1779:
;1780:	// accelerate
;1781:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRLP4 68
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 68
INDIRF4
ASGNF4
line 1782
;1782:	if (pm->cmd.buttons & BUTTON_ATTACK) {	//turbo boost
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $663
line 1783
;1783:		scale *= 10;
ADDRLP4 48
CNSTF4 1092616192
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 1784
;1784:	}
LABELV $663
line 1785
;1785:	if (pm->cmd.buttons & BUTTON_ALT_ATTACK) {	//turbo boost
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $665
line 1786
;1786:		scale *= 10;
ADDRLP4 48
CNSTF4 1092616192
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 1787
;1787:	}
LABELV $665
line 1789
;1788:
;1789:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1790
;1790:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 1792
;1791:	
;1792:	for (i=0 ; i<3 ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $667
line 1793
;1793:		wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 72
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 72
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $668
line 1792
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $667
line 1794
;1794:	wishvel[2] += pm->cmd.upmove;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ADDF4
ASGNF4
line 1796
;1795:
;1796:	VectorCopy (wishvel, wishdir);
ADDRLP4 32
ADDRLP4 4
INDIRB
ASGNB 12
line 1797
;1797:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 32
ARGP4
ADDRLP4 76
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 44
ADDRLP4 76
INDIRF4
ASGNF4
line 1798
;1798:	wishspeed *= scale;
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 1800
;1799:
;1800:	PM_Accelerate( wishdir, wishspeed, pm_accelerate );
ADDRLP4 32
ARGP4
ADDRLP4 44
INDIRF4
ARGF4
ADDRGP4 pm_accelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 1803
;1801:
;1802:	// move
;1803:	VectorMA (pm->ps->origin, pml.frametime, pm->ps->velocity, pm->ps->origin);
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 84
ADDRLP4 80
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 96
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 1804
;1804:}
LABELV $654
endproc PM_NoclipMove 104 12
proc PM_FootstepForSurface 0 0
line 1815
;1805:
;1806://============================================================================
;1807:
;1808:/*
;1809:================
;1810:PM_FootstepForSurface
;1811:
;1812:Returns an event number apropriate for the groundsurface
;1813:================
;1814:*/
;1815:static int PM_FootstepForSurface( void ) {
line 1816
;1816:	if ( pml.groundTrace.surfaceFlags & SURF_NOSTEPS ) {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 4194304
BANDI4
CNSTI4 0
EQI4 $677
line 1817
;1817:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $676
JUMPV
LABELV $677
line 1819
;1818:	}
;1819:	if ( pml.groundTrace.surfaceFlags & SURF_METALSTEPS ) {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $681
line 1820
;1820:		return EV_FOOTSTEP_METAL;
CNSTI4 3
RETI4
ADDRGP4 $676
JUMPV
LABELV $681
line 1822
;1821:	}
;1822:	return EV_FOOTSTEP;
CNSTI4 2
RETI4
LABELV $676
endproc PM_FootstepForSurface 0 0
proc PM_TryRoll 1204 28
line 1826
;1823:}
;1824:
;1825:static int PM_TryRoll( void )
;1826:{
line 1828
;1827:	trace_t	trace;
;1828:	int		anim = -1;
ADDRLP4 36
CNSTI4 -1
ASGNI4
line 1831
;1829:	vec3_t fwd, right, traceto, mins, maxs, fwdAngles;
;1830:
;1831:	if ( BG_SaberInAttack( pm->ps->saberMove ) || BG_SaberInSpecialAttack( pm->ps->torsoAnim ) 
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 1156
ADDRGP4 BG_SaberInAttack
CALLI4
ASGNI4
ADDRLP4 1156
INDIRI4
CNSTI4 0
NEI4 $689
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRLP4 1160
ADDRGP4 BG_SaberInSpecialAttack
CALLI4
ASGNI4
ADDRLP4 1160
INDIRI4
CNSTI4 0
NEI4 $689
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 1164
ADDRGP4 BG_SpinningSaberAnim
CALLI4
ASGNI4
ADDRLP4 1164
INDIRI4
CNSTI4 0
EQI4 $686
LABELV $689
line 1834
;1832:		|| BG_SpinningSaberAnim( pm->ps->legsAnim ) 
;1833:		/*|| (!pm->ps->clientNum&&PM_SaberInStart( pm->ps->saberMove ))*/ ) // Boot commented out this to allow client 0 to roll in start of attack.
;1834:	{//attacking or spinning (or, if player, starting an attack)
line 1835
;1835:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $685
JUMPV
LABELV $686
line 1838
;1836:	}
;1837:
;1838:	if (pm->ps->weapon != WP_SABER || BG_HasYsalamiri(pm->gametype, pm->ps) ||
ADDRLP4 1168
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1172
ADDRLP4 1168
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1172
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $693
ADDRLP4 1168
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 1172
INDIRP4
ARGP4
ADDRLP4 1176
ADDRGP4 BG_HasYsalamiri
CALLI4
ASGNI4
ADDRLP4 1176
INDIRI4
CNSTI4 0
NEI4 $693
ADDRLP4 1180
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1180
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 1180
INDIRP4
INDIRP4
ARGP4
ADDRLP4 1180
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 1184
ADDRGP4 BG_CanUseFPNow
CALLI4
ASGNI4
ADDRLP4 1184
INDIRI4
CNSTI4 0
NEI4 $690
LABELV $693
line 1840
;1839:		!BG_CanUseFPNow(pm->gametype, pm->ps, pm->cmd.serverTime, FP_LEVITATION))
;1840:	{
line 1841
;1841:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $685
JUMPV
LABELV $690
line 1847
;1842:	}
;1843:
;1844:	//VectorSet(mins, pm->mins[0],pm->mins[1],pm->mins[2]+STEPSIZE);
;1845:	//VectorSet(maxs, pm->maxs[0],pm->maxs[1],pm->gent->client->crouchheight);
;1846:
;1847:	VectorSet(mins, pm->mins[0],pm->mins[1],pm->mins[2]+STEPSIZE);
ADDRLP4 1188
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 1188
INDIRP4
CNSTI4 188
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 1188
INDIRP4
CNSTI4 192
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12+8
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
INDIRF4
CNSTF4 1099956224
ADDF4
ASGNF4
line 1848
;1848:	VectorSet(maxs, pm->maxs[0],pm->maxs[1],CROUCH_MAXS_2);
ADDRLP4 1192
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 1192
INDIRP4
CNSTI4 200
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 1192
INDIRP4
CNSTI4 204
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24+8
CNSTF4 1098907648
ASGNF4
line 1850
;1849:
;1850:	VectorSet(fwdAngles, 0, pm->ps->viewangles[YAW], 0);
ADDRLP4 0
CNSTF4 0
ASGNF4
ADDRLP4 0+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1852
;1851:
;1852:	AngleVectors( fwdAngles, fwd, right, NULL );
ADDRLP4 0
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1854
;1853:	//FIXME: trace ahead for clearance to roll
;1854:	if ( pm->cmd.forwardmove )
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $700
line 1855
;1855:	{
line 1856
;1856:		if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) 
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $702
line 1857
;1857:		{
line 1858
;1858:			anim = BOTH_ROLL_B;
ADDRLP4 36
CNSTI4 782
ASGNI4
line 1859
;1859:			VectorMA( pm->ps->origin, -64, fwd, traceto );
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
CNSTF4 3263168512
ASGNF4
ADDRLP4 40
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 52+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3263168512
ADDRLP4 52+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1860
;1860:		}
ADDRGP4 $701
JUMPV
LABELV $702
line 1862
;1861:		else
;1862:		{
line 1863
;1863:			anim = BOTH_ROLL_F;
ADDRLP4 36
CNSTI4 781
ASGNI4
line 1864
;1864:			VectorMA( pm->ps->origin, 64, fwd, traceto );
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
CNSTF4 1115684864
ASGNF4
ADDRLP4 40
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 52+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 52+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1865
;1865:		}
line 1866
;1866:	}
ADDRGP4 $701
JUMPV
LABELV $700
line 1867
;1867:	else if ( pm->cmd.rightmove > 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $712
line 1868
;1868:	{
line 1869
;1869:		anim = BOTH_ROLL_R;
ADDRLP4 36
CNSTI4 784
ASGNI4
line 1870
;1870:		VectorMA( pm->ps->origin, 64, right, traceto );
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
CNSTF4 1115684864
ASGNF4
ADDRLP4 40
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1871
;1871:	}
ADDRGP4 $713
JUMPV
LABELV $712
line 1872
;1872:	else if ( pm->cmd.rightmove < 0 )
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $718
line 1873
;1873:	{
line 1874
;1874:		anim = BOTH_ROLL_L;
ADDRLP4 36
CNSTI4 783
ASGNI4
line 1875
;1875:		VectorMA( pm->ps->origin, -64, right, traceto );
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
CNSTF4 3263168512
ASGNF4
ADDRLP4 40
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1200
INDIRF4
ADDRLP4 64+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 40+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3263168512
ADDRLP4 64+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1876
;1876:	}
LABELV $718
line 1878
;1877:	else
;1878:	{//???
line 1879
;1879:	}
LABELV $719
LABELV $713
LABELV $701
line 1880
;1880:	if ( anim != -1 )
ADDRLP4 36
INDIRI4
CNSTI4 -1
EQI4 $724
line 1881
;1881:	{
line 1882
;1882:		pm->trace( &trace, pm->ps->origin, mins, maxs, traceto, pm->ps->clientNum, CONTENTS_SOLID );
ADDRLP4 76
ARGP4
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
ADDRLP4 1196
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1200
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 1200
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 1196
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 1883
;1883:		if ( trace.fraction >= 1.0f )
ADDRLP4 76+8
INDIRF4
CNSTF4 1065353216
LTF4 $726
line 1884
;1884:		{
line 1887
;1885:			//PM_AddEvent( EV_ROLL );
;1886:			//Done later..
;1887:			pm->ps->saberMove = LS_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
CNSTI4 0
ASGNI4
line 1888
;1888:			return anim;
ADDRLP4 36
INDIRI4
RETI4
ADDRGP4 $685
JUMPV
LABELV $726
line 1890
;1889:		}
;1890:	}
LABELV $724
line 1891
;1891:	return 0;
CNSTI4 0
RETI4
LABELV $685
endproc PM_TryRoll 1204 28
proc PM_CrashLand 112 16
line 1901
;1892:}
;1893:
;1894:/*
;1895:=================
;1896:PM_CrashLand
;1897:
;1898:Check for hard landings that generate sound events
;1899:=================
;1900:*/
;1901:static void PM_CrashLand( void ) {
line 1907
;1902:	float		delta;
;1903:	float		dist;
;1904:	float		vel, acc;
;1905:	float		t;
;1906:	float		a, b, c, den;
;1907:	qboolean	didRoll = qfalse;
ADDRLP4 36
CNSTI4 0
ASGNI4
line 1910
;1908:
;1909:	// calculate the exact velocity on landing
;1910:	dist = pm->ps->origin[2] - pml.previous_origin[2];
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRGP4 pml+1136+8
INDIRF4
SUBF4
ASGNF4
line 1911
;1911:	vel = pml.previous_velocity[2];
ADDRLP4 8
ADDRGP4 pml+1148+8
INDIRF4
ASGNF4
line 1912
;1912:	acc = -pm->ps->gravity;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
NEGI4
CVIF4 4
ASGNF4
line 1914
;1913:
;1914:	a = acc / 2;
ADDRLP4 16
ADDRLP4 12
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 1915
;1915:	b = vel;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ASGNF4
line 1916
;1916:	c = -dist;
ADDRLP4 32
ADDRLP4 24
INDIRF4
NEGF4
ASGNF4
line 1918
;1917:
;1918:	den =  b * b - 4 * a * c;
ADDRLP4 20
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1082130432
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 32
INDIRF4
MULF4
SUBF4
ASGNF4
line 1919
;1919:	if ( den < 0 ) {
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $734
line 1920
;1920:		pm->ps->inAirAnim = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
CNSTI4 0
ASGNI4
line 1921
;1921:		return;
ADDRGP4 $729
JUMPV
LABELV $734
line 1923
;1922:	}
;1923:	t = (-b - sqrt( den ) ) / ( 2 * a );
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 44
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 44
INDIRF4
SUBF4
CNSTF4 1073741824
ADDRLP4 16
INDIRF4
MULF4
DIVF4
ASGNF4
line 1925
;1924:
;1925:	delta = vel + t * acc;
ADDRLP4 0
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1926
;1926:	delta = delta*delta * 0.0001;
ADDRLP4 0
CNSTF4 953267991
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
MULF4
ASGNF4
line 1929
;1927:
;1928:	// ducking while falling doubles damage
;1929:	if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $736
line 1930
;1930:		delta *= 2;
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1931
;1931:	}
LABELV $736
line 1934
;1932:
;1933:	// decide which landing animation to use
;1934:	if (!BG_InRoll(pm->ps, pm->ps->legsAnim) && pm->ps->inAirAnim)
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 52
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
NEI4 $738
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $738
line 1935
;1935:	{ //only play a land animation if we transitioned into an in-air animation while off the ground
line 1936
;1936:		if (!BG_SaberInSpecial(pm->ps->saberMove))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 BG_SaberInSpecial
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $740
line 1937
;1937:		{
line 1938
;1938:			if ( pm->ps->pm_flags & PMF_BACKWARDS_JUMP ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $742
line 1939
;1939:				PM_ForceLegsAnim( BOTH_LANDBACK1 );
CNSTI4 758
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1940
;1940:			} else {
ADDRGP4 $743
JUMPV
LABELV $742
line 1941
;1941:				PM_ForceLegsAnim( BOTH_LAND1 );
CNSTI4 754
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1942
;1942:			}
LABELV $743
line 1943
;1943:		}
LABELV $740
line 1944
;1944:	}
LABELV $738
line 1952
;1945:
;1946:	/*
;1947:	if (pm->ps->forceHandExtend == HANDEXTEND_NONE)
;1948:	{
;1949:		pm->ps->forceHandExtend = HANDEXTEND_WEAPONREADY;
;1950:	}
;1951:	*/
;1952:	if (pm->ps->weapon != WP_SABER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
EQI4 $744
line 1953
;1953:	{ //saber handles its own anims
line 1954
;1954:		if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1)
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $746
ADDRLP4 64
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $746
line 1955
;1955:		{
line 1956
;1956:			PM_StartTorsoAnim( TORSO_WEAPONREADY4 );
CNSTI4 965
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1957
;1957:		}
ADDRGP4 $747
JUMPV
LABELV $746
line 1959
;1958:		else
;1959:		{
line 1960
;1960:			if (pm->ps->weapon == WP_EMPLACED_GUN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $748
line 1961
;1961:			{
line 1962
;1962:				PM_StartTorsoAnim( BOTH_GUNSIT1 );
CNSTI4 710
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1963
;1963:			}
ADDRGP4 $749
JUMPV
LABELV $748
line 1965
;1964:			else
;1965:			{
line 1966
;1966:				PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1967
;1967:			}
LABELV $749
line 1968
;1968:		}
LABELV $747
line 1969
;1969:	}
LABELV $744
line 1972
;1970:	//just a stupid hack to push us back into our "idle" stance
;1971:
;1972:	if (!BG_InSpecialJump(pm->ps->legsAnim) ||
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 BG_InSpecialJump
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $754
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 1
LTI4 $754
ADDRLP4 72
ADDRLP4 68
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 823
EQI4 $754
ADDRLP4 72
INDIRI4
CNSTI4 820
NEI4 $750
LABELV $754
line 1976
;1973:		pm->ps->legsTimer < 1 ||
;1974:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_LEFT ||
;1975:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_WALL_RUN_RIGHT)
;1976:	{
line 1977
;1977:		if (!BG_InRoll(pm->ps, pm->ps->legsAnim) && pm->ps->inAirAnim)
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 84
INDIRI4
NEI4 $755
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
EQI4 $755
line 1978
;1978:		{
line 1979
;1979:			if (!BG_SaberInSpecial(pm->ps->saberMove) || pm->ps->weapon != WP_SABER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 BG_SaberInSpecial
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $759
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
EQI4 $757
LABELV $759
line 1980
;1980:			{
line 1981
;1981:				pm->ps->legsTimer = TIMER_LAND;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 130
ASGNI4
line 1982
;1982:			}
LABELV $757
line 1983
;1983:		}
LABELV $755
line 1984
;1984:	}
LABELV $750
line 1986
;1985:
;1986:	pm->ps->inAirAnim = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
CNSTI4 0
ASGNI4
line 1989
;1987:
;1988:	// never take falling damage if completely underwater
;1989:	if ( pm->waterlevel == 3 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 3
NEI4 $760
line 1990
;1990:		return;
ADDRGP4 $729
JUMPV
LABELV $760
line 1994
;1991:	}
;1992:
;1993:	// reduce falling damage if there is standing water
;1994:	if ( pm->waterlevel == 2 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $762
line 1995
;1995:		delta *= 0.25;
ADDRLP4 0
CNSTF4 1048576000
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1996
;1996:	}
LABELV $762
line 1997
;1997:	if ( pm->waterlevel == 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
NEI4 $764
line 1998
;1998:		delta *= 0.5;
ADDRLP4 0
CNSTF4 1056964608
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1999
;1999:	}
LABELV $764
line 2001
;2000:
;2001:	if ( delta < 1 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1065353216
GEF4 $766
line 2002
;2002:		return;
ADDRGP4 $729
JUMPV
LABELV $766
line 2005
;2003:	}
;2004:
;2005:	if ( pm->ps->pm_flags & PMF_DUCKED ) 
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $768
line 2006
;2006:	{
line 2007
;2007:		if( delta >= 2 && !PM_InOnGroundAnim( pm->ps->legsAnim ) && !PM_InKnockDown( pm->ps ) && !BG_InRoll(pm->ps, pm->ps->legsAnim) )
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
LTF4 $770
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 PM_InOnGroundAnim
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $770
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 PM_InKnockDown
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
NEI4 $770
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $770
line 2008
;2008:		{//roll!
line 2009
;2009:			int anim = PM_TryRoll();
ADDRLP4 96
ADDRGP4 PM_TryRoll
CALLI4
ASGNI4
ADDRLP4 92
ADDRLP4 96
INDIRI4
ASGNI4
line 2011
;2010:
;2011:			if (PM_InRollComplete(pm->ps, pm->ps->legsAnim))
ADDRLP4 100
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 PM_InRollComplete
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $772
line 2012
;2012:			{
line 2013
;2013:				anim = 0;
ADDRLP4 92
CNSTI4 0
ASGNI4
line 2014
;2014:				pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 2015
;2015:				pm->ps->legsAnim = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
line 2016
;2016:				PM_SetAnim(SETANIM_BOTH,BOTH_LAND1,SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150);
ADDRLP4 108
CNSTI4 3
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
CNSTI4 754
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2017
;2017:				pm->ps->legsTimer = TIMER_LAND;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 130
ASGNI4
line 2018
;2018:			}
LABELV $772
line 2020
;2019:
;2020:			if ( anim )
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $774
line 2021
;2021:			{//absorb some impact
line 2022
;2022:				pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 2024
;2023:				//delta /= 2;
;2024:				delta /= 3; // /= 2 just cancels out the above delta *= 2 when landing while crouched, the roll itself should absorb a little damage
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1077936128
DIVF4
ASGNF4
line 2025
;2025:				pm->ps->legsAnim = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
line 2026
;2026:				PM_SetAnim(SETANIM_BOTH,anim,SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150);
ADDRLP4 108
CNSTI4 3
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 92
INDIRI4
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2027
;2027:				didRoll = qtrue;
ADDRLP4 36
CNSTI4 1
ASGNI4
line 2028
;2028:			}
LABELV $774
line 2029
;2029:		}
LABELV $770
line 2030
;2030:	}
LABELV $768
line 2036
;2031:
;2032:	// create a local entity event to play the sound
;2033:
;2034:	// SURF_NODAMAGE is used for bounce pads where you don't ever
;2035:	// want to take damage or play a crunch sound
;2036:	if ( !(pml.groundTrace.surfaceFlags & SURF_NODAMAGE) )  {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 262144
BANDI4
CNSTI4 0
NEI4 $776
line 2037
;2037:		if (delta > 7)
ADDRLP4 0
INDIRF4
CNSTF4 1088421888
LEF4 $780
line 2038
;2038:		{
line 2039
;2039:			int delta_send = (int)delta;
ADDRLP4 76
ADDRLP4 0
INDIRF4
CVFI4 4
ASGNI4
line 2041
;2040:
;2041:			if (delta_send > 600)
ADDRLP4 76
INDIRI4
CNSTI4 600
LEI4 $782
line 2042
;2042:			{ //will never need to know any value above this
line 2043
;2043:				delta_send = 600;
ADDRLP4 76
CNSTI4 600
ASGNI4
line 2044
;2044:			}
LABELV $782
line 2046
;2045:
;2046:			if (pm->ps->fd.forceJumpZStart)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
CNSTF4 0
EQF4 $784
line 2047
;2047:			{
line 2048
;2048:				if ((int)pm->ps->origin[2] >= (int)pm->ps->fd.forceJumpZStart)
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CVFI4 4
ADDRLP4 80
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
CVFI4 4
LTI4 $786
line 2049
;2049:				{ //was force jumping, landed on higher or same level as when force jump was started
line 2050
;2050:					if (delta_send > 8)
ADDRLP4 76
INDIRI4
CNSTI4 8
LEI4 $787
line 2051
;2051:					{
line 2052
;2052:						delta_send = 8;
ADDRLP4 76
CNSTI4 8
ASGNI4
line 2053
;2053:					}
line 2054
;2054:				}
ADDRGP4 $787
JUMPV
LABELV $786
line 2056
;2055:				else
;2056:				{
line 2057
;2057:					if (delta_send > 8)
ADDRLP4 76
INDIRI4
CNSTI4 8
LEI4 $790
line 2058
;2058:					{
line 2059
;2059:						int dif = ((int)pm->ps->fd.forceJumpZStart - (int)pm->ps->origin[2]);
ADDRLP4 92
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 88
ADDRLP4 92
INDIRP4
CNSTI4 1080
ADDP4
INDIRF4
CVFI4 4
ADDRLP4 92
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CVFI4 4
SUBI4
ASGNI4
line 2060
;2060:						int dmgLess = (forceJumpHeight[pm->ps->fd.forcePowerLevel[FP_LEVITATION]] - dif);
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceJumpHeight
ADDP4
INDIRF4
ADDRLP4 88
INDIRI4
CVIF4 4
SUBF4
CVFI4 4
ASGNI4
line 2062
;2061:
;2062:						if (dmgLess < 0)
ADDRLP4 84
INDIRI4
CNSTI4 0
GEI4 $792
line 2063
;2063:						{
line 2064
;2064:							dmgLess = 0;
ADDRLP4 84
CNSTI4 0
ASGNI4
line 2065
;2065:						}
LABELV $792
line 2067
;2066:
;2067:						delta_send -= (dmgLess*0.3);
ADDRLP4 76
ADDRLP4 76
INDIRI4
CVIF4 4
CNSTF4 1050253722
ADDRLP4 84
INDIRI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 2069
;2068:
;2069:						if (delta_send < 8)
ADDRLP4 76
INDIRI4
CNSTI4 8
GEI4 $794
line 2070
;2070:						{
line 2071
;2071:							delta_send = 8;
ADDRLP4 76
CNSTI4 8
ASGNI4
line 2072
;2072:						}
LABELV $794
line 2075
;2073:
;2074:						//Com_Printf("Damage sub: %i\n", (int)((dmgLess*0.1)));
;2075:					}
LABELV $790
line 2076
;2076:				}
LABELV $787
line 2077
;2077:			}
LABELV $784
line 2079
;2078:
;2079:			if (didRoll)
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $796
line 2080
;2080:			{
line 2081
;2081:				PM_AddEventWithParm( EV_ROLL, delta_send );
CNSTI4 15
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 2082
;2082:			}
ADDRGP4 $781
JUMPV
LABELV $796
line 2084
;2083:			else
;2084:			{
line 2085
;2085:				PM_AddEventWithParm( EV_FALL, delta_send );
CNSTI4 11
ARGI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 2086
;2086:			}
line 2087
;2087:		}
ADDRGP4 $781
JUMPV
LABELV $780
line 2089
;2088:		else
;2089:		{
line 2090
;2090:			if (didRoll)
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $798
line 2091
;2091:			{
line 2092
;2092:				PM_AddEventWithParm( EV_ROLL, 0 );
CNSTI4 15
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 2093
;2093:			}
ADDRGP4 $799
JUMPV
LABELV $798
line 2095
;2094:			else
;2095:			{
line 2096
;2096:				PM_AddEvent( PM_FootstepForSurface() );
ADDRLP4 76
ADDRGP4 PM_FootstepForSurface
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2097
;2097:			}
LABELV $799
line 2098
;2098:		}
LABELV $781
line 2099
;2099:	}
LABELV $776
line 2102
;2100:
;2101:	// make sure velocity resets so we don't bounce back up again in case we miss the clear elsewhere
;2102:	pm->ps->velocity[2] = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 0
ASGNF4
line 2105
;2103:
;2104:	// start footstep cycle over
;2105:	pm->ps->bobCycle = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 2106
;2106:}
LABELV $729
endproc PM_CrashLand 112 16
proc PM_CorrectAllSolid 36 28
line 2129
;2107:
;2108:/*
;2109:=============
;2110:PM_CheckStuck
;2111:=============
;2112:*/
;2113:/*
;2114:void PM_CheckStuck(void) {
;2115:	trace_t trace;
;2116:
;2117:	pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, pm->ps->origin, pm->ps->clientNum, pm->tracemask);
;2118:	if (trace.allsolid) {
;2119:		//int shit = qtrue;
;2120:	}
;2121:}
;2122:*/
;2123:
;2124:/*
;2125:=============
;2126:PM_CorrectAllSolid
;2127:=============
;2128:*/
;2129:static int PM_CorrectAllSolid( trace_t *trace ) {
line 2133
;2130:	int			i, j, k;
;2131:	vec3_t		point;
;2132:
;2133:	if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $801
line 2134
;2134:		Com_Printf("%i:allsolid\n", c_pmove);
ADDRGP4 $803
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 2135
;2135:	}
LABELV $801
line 2138
;2136:
;2137:	// jitter around
;2138:	for (i = -1; i <= 1; i++) {
ADDRLP4 20
CNSTI4 -1
ASGNI4
LABELV $804
line 2139
;2139:		for (j = -1; j <= 1; j++) {
ADDRLP4 16
CNSTI4 -1
ASGNI4
LABELV $808
line 2140
;2140:			for (k = -1; k <= 1; k++) {
ADDRLP4 12
CNSTI4 -1
ASGNI4
LABELV $812
line 2141
;2141:				VectorCopy(pm->ps->origin, point);
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2142
;2142:				point[0] += (float) i;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2143
;2143:				point[1] += (float) j;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 16
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2144
;2144:				point[2] += (float) k;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2145
;2145:				pm->trace (trace, point, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2146
;2146:				if ( !trace->allsolid ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $818
line 2147
;2147:					point[0] = pm->ps->origin[0];
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 2148
;2148:					point[1] = pm->ps->origin[1];
ADDRLP4 0+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2149
;2149:					point[2] = pm->ps->origin[2] - 0.25;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1048576000
SUBF4
ASGNF4
line 2151
;2150:
;2151:					pm->trace (trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2152
;2152:					pml.groundTrace = *trace;
ADDRGP4 pml+52
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 1080
line 2153
;2153:					return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $800
JUMPV
LABELV $818
line 2155
;2154:				}
;2155:			}
LABELV $813
line 2140
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 1
LEI4 $812
line 2156
;2156:		}
LABELV $809
line 2139
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 1
LEI4 $808
line 2157
;2157:	}
LABELV $805
line 2138
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 1
LEI4 $804
line 2159
;2158:
;2159:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1023
ASGNI4
line 2160
;2160:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 2161
;2161:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2163
;2162:
;2163:	return qfalse;
CNSTI4 0
RETI4
LABELV $800
endproc PM_CorrectAllSolid 36 28
proc PM_GroundTraceMissed 1108 28
line 2173
;2164:}
;2165:
;2166:/*
;2167:=============
;2168:PM_GroundTraceMissed
;2169:
;2170:The ground trace didn't hit a surface, so we are in freefall
;2171:=============
;2172:*/
;2173:static void PM_GroundTraceMissed( void ) {
line 2177
;2174:	trace_t		trace;
;2175:	vec3_t		point;
;2176:
;2177:	if ( pm->ps->groundEntityNum != ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $826
line 2179
;2178:		// we just transitioned into freefall
;2179:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $828
line 2180
;2180:			Com_Printf("%i:lift\n", c_pmove);
ADDRGP4 $830
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 2181
;2181:		}
LABELV $828
line 2185
;2182:
;2183:		// if they aren't in a jumping animation and the ground is a ways away, force into it
;2184:		// if we didn't do the trace, the player would be backflipping down staircases
;2185:		VectorCopy( pm->ps->origin, point );
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2186
;2186:		point[2] -= 64;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115684864
SUBF4
ASGNF4
line 2188
;2187:
;2188:		pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRLP4 12
ARGP4
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1096
ADDRLP4 1092
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1096
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2189
;2189:		if ( trace.fraction == 1.0 || pm->ps->pm_type == PM_FLOAT ) {
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
EQF4 $835
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $827
LABELV $835
line 2190
;2190:			if ( pm->ps->velocity[2] <= 0 && !(pm->ps->pm_flags&PMF_JUMP_HELD))
ADDRLP4 1100
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1100
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
GTF4 $836
ADDRLP4 1100
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $836
line 2191
;2191:			{//FIXME: if velocity[2] < 0 and didn't jump, use some falling anim
line 2192
;2192:				PM_SetAnim(SETANIM_LEGS,BOTH_INAIR1,SETANIM_FLAG_OVERRIDE, 100);	// Only blend over 100ms
CNSTI4 2
ARGI4
CNSTI4 753
ARGI4
CNSTI4 1
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2193
;2193:				pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 1104
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1104
INDIRP4
ADDRLP4 1104
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 2194
;2194:			}
ADDRGP4 $837
JUMPV
LABELV $836
line 2195
;2195:			else if ( pm->cmd.forwardmove >= 0 ) 
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $838
line 2196
;2196:			{
line 2197
;2197:				PM_SetAnim(SETANIM_LEGS,BOTH_JUMP1,SETANIM_FLAG_OVERRIDE, 100);	// Only blend over 100ms
CNSTI4 2
ARGI4
CNSTI4 752
ARGI4
CNSTI4 1
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2198
;2198:				pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 1104
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1104
INDIRP4
ADDRLP4 1104
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 2199
;2199:			} 
ADDRGP4 $839
JUMPV
LABELV $838
line 2201
;2200:			else 
;2201:			{
line 2202
;2202:				PM_SetAnim(SETANIM_LEGS,BOTH_JUMPBACK1,SETANIM_FLAG_OVERRIDE, 100);	// Only blend over 100ms
CNSTI4 2
ARGI4
CNSTI4 756
ARGI4
CNSTI4 1
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2203
;2203:				pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 1104
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1104
INDIRP4
ADDRLP4 1104
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 2204
;2204:			}
LABELV $839
LABELV $837
line 2206
;2205:
;2206:			pm->ps->inAirAnim = qtrue;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
CNSTI4 1
ASGNI4
line 2207
;2207:		}
line 2208
;2208:	}
ADDRGP4 $827
JUMPV
LABELV $826
line 2209
;2209:	else if (!pm->ps->inAirAnim)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
INDIRI4
CNSTI4 0
NEI4 $840
line 2210
;2210:	{
line 2213
;2211:		// if they aren't in a jumping animation and the ground is a ways away, force into it
;2212:		// if we didn't do the trace, the player would be backflipping down staircases
;2213:		VectorCopy( pm->ps->origin, point );
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2214
;2214:		point[2] -= 64;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115684864
SUBF4
ASGNF4
line 2216
;2215:
;2216:		pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRLP4 12
ARGP4
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1096
ADDRLP4 1092
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1096
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2217
;2217:		if ( trace.fraction == 1.0 || pm->ps->pm_type == PM_FLOAT )
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
EQF4 $846
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $843
LABELV $846
line 2218
;2218:		{
line 2219
;2219:			pm->ps->inAirAnim = qtrue;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
CNSTI4 1
ASGNI4
line 2220
;2220:		}
LABELV $843
line 2221
;2221:	}
LABELV $840
LABELV $827
line 2223
;2222:
;2223:	if (PM_InRollComplete(pm->ps, pm->ps->legsAnim))
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1092
INDIRP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 1096
ADDRGP4 PM_InRollComplete
CALLI4
ASGNI4
ADDRLP4 1096
INDIRI4
CNSTI4 0
EQI4 $847
line 2224
;2224:	{ //HACK -_- (filthy client won't catch an animation restart because it only checks frame against incoming frame, so if you roll when you land after rolling
line 2226
;2225:	  //off of something it won't replay the roll anim unless we switch it off in the air)
;2226:		PM_SetAnim(SETANIM_BOTH,BOTH_INAIR1,SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150);
ADDRLP4 1100
CNSTI4 3
ASGNI4
ADDRLP4 1100
INDIRI4
ARGI4
CNSTI4 753
ARGI4
ADDRLP4 1100
INDIRI4
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2227
;2227:		pm->ps->inAirAnim = qtrue;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1348
ADDP4
CNSTI4 1
ASGNI4
line 2228
;2228:	}
LABELV $847
line 2230
;2229:
;2230:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1023
ASGNI4
line 2231
;2231:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 2232
;2232:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2233
;2233:}
LABELV $825
endproc PM_GroundTraceMissed 1108 28
proc PM_GroundTrace 1112 28
line 2241
;2234:
;2235:
;2236:/*
;2237:=============
;2238:PM_GroundTrace
;2239:=============
;2240:*/
;2241:static void PM_GroundTrace( void ) {
line 2245
;2242:	vec3_t		point;
;2243:	trace_t		trace;
;2244:
;2245:	point[0] = pm->ps->origin[0];
ADDRLP4 1080
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 2246
;2246:	point[1] = pm->ps->origin[1];
ADDRLP4 1080+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2247
;2247:	point[2] = pm->ps->origin[2] - 0.25;
ADDRLP4 1080+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1048576000
SUBF4
ASGNF4
line 2249
;2248:
;2249:	pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRLP4 0
ARGP4
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1096
ADDRLP4 1092
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1096
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 1080
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2250
;2250:	pml.groundTrace = trace;
ADDRGP4 pml+52
ADDRLP4 0
INDIRB
ASGNB 1080
line 2253
;2251:
;2252:	// do something corrective if the trace starts in a solid...
;2253:	if ( trace.allsolid ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $855
line 2254
;2254:		if ( !PM_CorrectAllSolid(&trace) )
ADDRLP4 0
ARGP4
ADDRLP4 1100
ADDRGP4 PM_CorrectAllSolid
CALLI4
ASGNI4
ADDRLP4 1100
INDIRI4
CNSTI4 0
NEI4 $857
line 2255
;2255:			return;
ADDRGP4 $851
JUMPV
LABELV $857
line 2256
;2256:	}
LABELV $855
line 2258
;2257:
;2258:	if (pm->ps->pm_type == PM_FLOAT)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $859
line 2259
;2259:	{
line 2260
;2260:		PM_GroundTraceMissed();
ADDRGP4 PM_GroundTraceMissed
CALLV
pop
line 2261
;2261:		pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 2262
;2262:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2263
;2263:		return;
ADDRGP4 $851
JUMPV
LABELV $859
line 2267
;2264:	}
;2265:
;2266:	// if the trace didn't hit anything, we are in free fall
;2267:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $863
line 2268
;2268:		PM_GroundTraceMissed();
ADDRGP4 PM_GroundTraceMissed
CALLV
pop
line 2269
;2269:		pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 2270
;2270:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2271
;2271:		return;
ADDRGP4 $851
JUMPV
LABELV $863
line 2275
;2272:	}
;2273:
;2274:	// check if getting thrown off the ground
;2275:	if ( pm->ps->velocity[2] > 0 && DotProduct( pm->ps->velocity, trace.plane.normal ) > 10 ) {
ADDRLP4 1100
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1104
ADDRLP4 1100
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ASGNF4
ADDRLP4 1104
INDIRF4
CNSTF4 0
LEF4 $868
ADDRLP4 1100
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 1100
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 1104
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 1092616192
LEF4 $868
line 2276
;2276:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $875
line 2277
;2277:			Com_Printf("%i:kickoff\n", c_pmove);
ADDRGP4 $877
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 2278
;2278:		}
LABELV $875
line 2280
;2279:		// go into jump animation
;2280:		if ( pm->cmd.forwardmove >= 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $878
line 2281
;2281:			PM_ForceLegsAnim( BOTH_JUMP1 );
CNSTI4 752
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 2282
;2282:			pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 2283
;2283:		} else {
ADDRGP4 $879
JUMPV
LABELV $878
line 2284
;2284:			PM_ForceLegsAnim( BOTH_JUMPBACK1 );
CNSTI4 756
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 2285
;2285:			pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 2286
;2286:		}
LABELV $879
line 2288
;2287:
;2288:		pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1023
ASGNI4
line 2289
;2289:		pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 2290
;2290:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2291
;2291:		return;
ADDRGP4 $851
JUMPV
LABELV $868
line 2295
;2292:	}
;2293:	
;2294:	// slopes that are too steep will not be considered onground
;2295:	if ( trace.plane.normal[2] < MIN_WALK_NORMAL ) {
ADDRLP4 0+24+8
INDIRF4
CNSTF4 1060320051
GEF4 $882
line 2296
;2296:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $886
line 2297
;2297:			Com_Printf("%i:steep\n", c_pmove);
ADDRGP4 $888
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 2298
;2298:		}
LABELV $886
line 2301
;2299:		// FIXME: if they can't slide down the slope, let them
;2300:		// walk (sharp crevices)
;2301:		pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
CNSTI4 1023
ASGNI4
line 2302
;2302:		pml.groundPlane = qtrue;
ADDRGP4 pml+48
CNSTI4 1
ASGNI4
line 2303
;2303:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 2304
;2304:		return;
ADDRGP4 $851
JUMPV
LABELV $882
line 2307
;2305:	}
;2306:
;2307:	pml.groundPlane = qtrue;
ADDRGP4 pml+48
CNSTI4 1
ASGNI4
line 2308
;2308:	pml.walking = qtrue;
ADDRGP4 pml+44
CNSTI4 1
ASGNI4
line 2311
;2309:
;2310:	// hitting solid ground will end a waterjump
;2311:	if (pm->ps->pm_flags & PMF_TIME_WATERJUMP)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $893
line 2312
;2312:	{
line 2313
;2313:		pm->ps->pm_flags &= ~(PMF_TIME_WATERJUMP | PMF_TIME_LAND);
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 -289
BANDI4
ASGNI4
line 2314
;2314:		pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 2315
;2315:	}
LABELV $893
line 2317
;2316:
;2317:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $895
line 2319
;2318:		// just hit the ground
;2319:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $897
line 2320
;2320:			Com_Printf("%i:Land\n", c_pmove);
ADDRGP4 $899
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 2321
;2321:		}
LABELV $897
line 2323
;2322:		
;2323:		PM_CrashLand();
ADDRGP4 PM_CrashLand
CALLV
pop
line 2326
;2324:
;2325:		// don't do landing time if we were just going down a slope
;2326:		if ( pml.previous_velocity[2] < -200 ) {
ADDRGP4 pml+1148+8
INDIRF4
CNSTF4 3276275712
GEF4 $900
line 2328
;2327:			// don't allow another jump for a little while
;2328:			pm->ps->pm_flags |= PMF_TIME_LAND;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 2329
;2329:			pm->ps->pm_time = 250;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 250
ASGNI4
line 2330
;2330:		}
LABELV $900
line 2331
;2331:	}
LABELV $895
line 2333
;2332:
;2333:	pm->ps->groundEntityNum = trace.entityNum;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 2334
;2334:	pm->ps->lastOnGround = pm->cmd.serverTime;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1108
INDIRP4
INDIRP4
CNSTI4 500
ADDP4
ADDRLP4 1108
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2339
;2335:
;2336:	// don't reset the z velocity for slopes
;2337://	pm->ps->velocity[2] = 0;
;2338:
;2339:	PM_AddTouchEnt( trace.entityNum );
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 PM_AddTouchEnt
CALLV
pop
line 2340
;2340:}
LABELV $851
endproc PM_GroundTrace 1112 28
proc PM_SetWaterLevel 48 8
line 2348
;2341:
;2342:
;2343:/*
;2344:=============
;2345:PM_SetWaterLevel	FIXME: avoid this twice?  certainly if not moving
;2346:=============
;2347:*/
;2348:static void PM_SetWaterLevel( void ) {
line 2357
;2349:	vec3_t		point;
;2350:	int			cont;
;2351:	int			sample1;
;2352:	int			sample2;
;2353:
;2354:	//
;2355:	// get waterlevel, accounting for ducking
;2356:	//
;2357:	pm->waterlevel = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 0
ASGNI4
line 2358
;2358:	pm->watertype = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 0
ASGNI4
line 2360
;2359:
;2360:	point[0] = pm->ps->origin[0];
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 2361
;2361:	point[1] = pm->ps->origin[1];
ADDRLP4 0+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 2362
;2362:	point[2] = pm->ps->origin[2] + MINS_Z + 1;	
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 2363
;2363:	cont = pm->pointcontents( point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 244
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 2365
;2364:
;2365:	if ( cont & MASK_WATER ) {
ADDRLP4 12
INDIRI4
CNSTI4 131078
BANDI4
CNSTI4 0
EQI4 $909
line 2366
;2366:		sample2 = pm->ps->viewheight - MINS_Z;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 -24
SUBI4
ASGNI4
line 2367
;2367:		sample1 = sample2 / 2;
ADDRLP4 20
ADDRLP4 16
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 2369
;2368:
;2369:		pm->watertype = cont;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 2370
;2370:		pm->waterlevel = 1;
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 1
ASGNI4
line 2371
;2371:		point[2] = pm->ps->origin[2] + MINS_Z + sample1;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
ADDRLP4 20
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2372
;2372:		cont = pm->pointcontents (point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 244
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 2373
;2373:		if ( cont & MASK_WATER ) {
ADDRLP4 12
INDIRI4
CNSTI4 131078
BANDI4
CNSTI4 0
EQI4 $912
line 2374
;2374:			pm->waterlevel = 2;
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 2
ASGNI4
line 2375
;2375:			point[2] = pm->ps->origin[2] + MINS_Z + sample2;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 2376
;2376:			cont = pm->pointcontents (point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 40
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 244
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 2377
;2377:			if ( cont & MASK_WATER ){
ADDRLP4 12
INDIRI4
CNSTI4 131078
BANDI4
CNSTI4 0
EQI4 $915
line 2378
;2378:				pm->waterlevel = 3;
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 3
ASGNI4
line 2379
;2379:			}
LABELV $915
line 2380
;2380:		}
LABELV $912
line 2381
;2381:	}
LABELV $909
line 2383
;2382:
;2383:}
LABELV $906
endproc PM_SetWaterLevel 48 8
proc PM_CheckDuck 1112 28
line 2393
;2384:
;2385:/*
;2386:==============
;2387:PM_CheckDuck
;2388:
;2389:Sets mins, maxs, and pm->ps->viewheight
;2390:==============
;2391:*/
;2392:static void PM_CheckDuck (void)
;2393:{
line 2396
;2394:	trace_t	trace;
;2395:
;2396:	pm->mins[0] = -15;
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3245342720
ASGNF4
line 2397
;2397:	pm->mins[1] = -15;
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3245342720
ASGNF4
line 2399
;2398:
;2399:	pm->maxs[0] = 15;
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1097859072
ASGNF4
line 2400
;2400:	pm->maxs[1] = 15;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1097859072
ASGNF4
line 2402
;2401:
;2402:	pm->mins[2] = MINS_Z;
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 3250585600
ASGNF4
line 2404
;2403:
;2404:	if (pm->ps->pm_type == PM_DEAD)
ADDRLP4 1080
CNSTI4 4
ASGNI4
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRLP4 1080
INDIRI4
ADDP4
INDIRI4
ADDRLP4 1080
INDIRI4
NEI4 $918
line 2405
;2405:	{
line 2406
;2406:		pm->maxs[2] = -8;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 3238002688
ASGNF4
line 2407
;2407:		pm->ps->viewheight = DEAD_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 -16
ASGNI4
line 2408
;2408:		return;
ADDRGP4 $917
JUMPV
LABELV $918
line 2411
;2409:	}
;2410:
;2411:	if (pm->ps->usingATST)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $920
line 2412
;2412:	{
line 2413
;2413:		if (pm->cmd.upmove < 0)
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $922
line 2414
;2414:		{
line 2415
;2415:			pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 2416
;2416:		}
LABELV $922
line 2417
;2417:	}
LABELV $920
line 2419
;2418:
;2419:	if (BG_InRoll(pm->ps, pm->ps->legsAnim))
ADDRLP4 1084
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1084
INDIRP4
ARGP4
ADDRLP4 1084
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 1088
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 1088
INDIRI4
CNSTI4 0
EQI4 $924
line 2420
;2420:	{
line 2421
;2421:		pm->maxs[2] = CROUCH_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1098907648
ASGNF4
line 2422
;2422:		pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 36
ASGNI4
line 2423
;2423:		pm->ps->pm_flags &= ~PMF_DUCKED;
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1092
INDIRP4
ADDRLP4 1092
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 2424
;2424:		pm->ps->pm_flags |= PMF_ROLLING;
ADDRLP4 1096
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1096
INDIRP4
ADDRLP4 1096
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 2425
;2425:		return;
ADDRGP4 $917
JUMPV
LABELV $924
line 2427
;2426:	}
;2427:	else if (pm->ps->pm_flags & PMF_ROLLING)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $926
line 2428
;2428:	{
line 2430
;2429:		// try to stand up
;2430:		pm->maxs[2] = DEFAULT_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1109393408
ASGNF4
line 2431
;2431:		pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, pm->ps->origin, pm->ps->clientNum, pm->tracemask );
ADDRLP4 0
ARGP4
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1096
ADDRLP4 1092
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1100
ADDRLP4 1096
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 1100
INDIRP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1092
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 1100
INDIRP4
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1092
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2432
;2432:		if (!trace.allsolid)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $927
line 2433
;2433:			pm->ps->pm_flags &= ~PMF_ROLLING;
ADDRLP4 1104
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1104
INDIRP4
ADDRLP4 1104
INDIRP4
INDIRI4
CNSTI4 -5
BANDI4
ASGNI4
line 2434
;2434:	}
ADDRGP4 $927
JUMPV
LABELV $926
line 2435
;2435:	else if (pm->cmd.upmove < 0 ||
ADDRLP4 1092
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1092
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $932
ADDRLP4 1092
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
NEI4 $930
LABELV $932
line 2437
;2436:		pm->ps->forceHandExtend == HANDEXTEND_KNOCKDOWN)
;2437:	{	// duck
line 2438
;2438:		pm->ps->pm_flags |= PMF_DUCKED;
ADDRLP4 1096
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1096
INDIRP4
ADDRLP4 1096
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 2439
;2439:	}
ADDRGP4 $931
JUMPV
LABELV $930
line 2441
;2440:	else
;2441:	{	// stand up if possible 
line 2442
;2442:		if (pm->ps->pm_flags & PMF_DUCKED)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $933
line 2443
;2443:		{
line 2445
;2444:			// try to stand up
;2445:			pm->maxs[2] = DEFAULT_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1109393408
ASGNF4
line 2446
;2446:			pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, pm->ps->origin, pm->ps->clientNum, pm->tracemask );
ADDRLP4 0
ARGP4
ADDRLP4 1096
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1100
ADDRLP4 1096
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1104
ADDRLP4 1100
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 1104
INDIRP4
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 188
ADDP4
ARGP4
ADDRLP4 1096
INDIRP4
CNSTI4 200
ADDP4
ARGP4
ADDRLP4 1104
INDIRP4
ARGP4
ADDRLP4 1100
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
ADDRLP4 1096
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 1096
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2447
;2447:			if (!trace.allsolid)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $935
line 2448
;2448:				pm->ps->pm_flags &= ~PMF_DUCKED;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
LABELV $935
line 2449
;2449:		}
LABELV $933
line 2450
;2450:	}
LABELV $931
LABELV $927
line 2452
;2451:
;2452:	if (pm->ps->pm_flags & PMF_DUCKED)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $937
line 2453
;2453:	{
line 2454
;2454:		pm->maxs[2] = CROUCH_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1098907648
ASGNF4
line 2455
;2455:		pm->ps->viewheight = CROUCH_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 12
ASGNI4
line 2456
;2456:	}
ADDRGP4 $938
JUMPV
LABELV $937
line 2457
;2457:	else if (pm->ps->pm_flags & PMF_ROLLING)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $939
line 2458
;2458:	{
line 2459
;2459:		pm->maxs[2] = CROUCH_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1098907648
ASGNF4
line 2460
;2460:		pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 36
ASGNI4
line 2461
;2461:	}
ADDRGP4 $940
JUMPV
LABELV $939
line 2463
;2462:	else
;2463:	{
line 2464
;2464:		pm->maxs[2] = DEFAULT_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1109393408
ASGNF4
line 2465
;2465:		pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 36
ASGNI4
line 2466
;2466:	}
LABELV $940
LABELV $938
line 2468
;2467:
;2468:	if (pm->ps->usingATST)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $941
line 2469
;2469:	{
line 2470
;2470:		pm->mins[0] = ATST_MINS0;
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3256877056
ASGNF4
line 2471
;2471:		pm->mins[1] = ATST_MINS1;
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3256877056
ASGNF4
line 2472
;2472:		pm->mins[2] = ATST_MINS2;
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 3250585600
ASGNF4
line 2474
;2473:
;2474:		pm->maxs[0] = ATST_MAXS0;
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1109393408
ASGNF4
line 2475
;2475:		pm->maxs[1] = ATST_MAXS1;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1109393408
ASGNF4
line 2476
;2476:		pm->maxs[2] = ATST_MAXS2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1131937792
ASGNF4
line 2477
;2477:	}
LABELV $941
line 2478
;2478:}
LABELV $917
endproc PM_CheckDuck 1112 28
export PM_Use
proc PM_Use 4 0
line 2496
;2479:
;2480:
;2481:
;2482://===================================================================
;2483:
;2484:
;2485:
;2486:/*
;2487:==============
;2488:PM_Use
;2489:
;2490:Generates a use event
;2491:==============
;2492:*/
;2493:#define USE_DELAY 2000
;2494:
;2495:void PM_Use( void ) 
;2496:{
line 2497
;2497:	if ( pm->ps->useTime > 0 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
LEI4 $944
line 2498
;2498:		pm->ps->useTime -= 100;//pm->cmd.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 100
SUBI4
ASGNI4
LABELV $944
line 2500
;2499:
;2500:	if ( pm->ps->useTime > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
LEI4 $946
line 2501
;2501:		return;
ADDRGP4 $943
JUMPV
LABELV $946
line 2504
;2502:	}
;2503:
;2504:	if ( ! (pm->cmd.buttons & BUTTON_USE ) )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $948
line 2505
;2505:	{
line 2506
;2506:		pm->useEvent = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 0
ASGNI4
line 2507
;2507:		pm->ps->useTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 0
ASGNI4
line 2508
;2508:		return;
ADDRGP4 $943
JUMPV
LABELV $948
line 2511
;2509:	}
;2510:
;2511:	pm->useEvent = EV_USE;
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTI4 39
ASGNI4
line 2512
;2512:	pm->ps->useTime = USE_DELAY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 2000
ASGNI4
line 2513
;2513:}
LABELV $943
endproc PM_Use 4 0
export PM_RunningAnim
proc PM_RunningAnim 16 0
line 2516
;2514:
;2515:qboolean PM_RunningAnim( int anim )
;2516:{
line 2517
;2517:	switch ( (anim&~ANIM_TOGGLEBIT) )
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 8
CNSTI4 731
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $954
ADDRLP4 0
INDIRI4
CNSTI4 734
EQI4 $954
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $951
LABELV $955
ADDRLP4 0
INDIRI4
CNSTI4 746
EQI4 $954
ADDRLP4 0
INDIRI4
CNSTI4 750
EQI4 $954
ADDRLP4 0
INDIRI4
CNSTI4 751
EQI4 $954
ADDRGP4 $951
JUMPV
line 2518
;2518:	{
LABELV $954
line 2524
;2519:	case BOTH_RUN1:			
;2520:	case BOTH_RUN2:			
;2521:	case BOTH_RUNBACK1:			
;2522:	case BOTH_RUNBACK2:			
;2523:	case BOTH_RUNAWAY1:			
;2524:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $950
JUMPV
line 2525
;2525:		break;
LABELV $951
line 2527
;2526:	}
;2527:	return qfalse;
CNSTI4 0
RETI4
LABELV $950
endproc PM_RunningAnim 16 0
proc PM_Footsteps 68 16
line 2535
;2528:}
;2529:
;2530:/*
;2531:===============
;2532:PM_Footsteps
;2533:===============
;2534:*/
;2535:static void PM_Footsteps( void ) {
line 2544
;2536:	float		bobmove;
;2537:	int			old;
;2538:	qboolean	footstep;
;2539:
;2540:	//
;2541:	// calculate speed and cycle to be used for
;2542:	// all cyclic walking effects
;2543:	//
;2544:	pm->xyspeed = sqrt( pm->ps->velocity[0] * pm->ps->velocity[0]
ADDRLP4 12
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 24
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 28
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 228
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 2547
;2545:		+  pm->ps->velocity[1] * pm->ps->velocity[1] );
;2546:
;2547:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
NEI4 $957
line 2550
;2548:
;2549:		// airborne leaves position in cycle intact, but doesn't advance
;2550:		if ( pm->waterlevel > 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LEI4 $956
line 2551
;2551:			PM_ContinueLegsAnim( BOTH_SWIM1 );
CNSTI4 747
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2552
;2552:		}
line 2553
;2553:		return;
ADDRGP4 $956
JUMPV
LABELV $957
line 2557
;2554:	}
;2555:
;2556:	// if not trying to move
;2557:	if ( !pm->cmd.forwardmove && !pm->cmd.rightmove ) {
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
NEI4 $961
ADDRLP4 32
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
NEI4 $961
line 2558
;2558:		if (  pm->xyspeed < 5 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 228
ADDP4
INDIRF4
CNSTF4 1084227584
GEF4 $956
line 2559
;2559:			pm->ps->bobCycle = 0;	// start at beginning of cycle again
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 2560
;2560:			if ( (pm->ps->pm_flags & PMF_DUCKED) || (pm->ps->pm_flags & PMF_ROLLING) ) {
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 44
INDIRI4
NEI4 $967
ADDRLP4 40
INDIRI4
CNSTI4 4
BANDI4
ADDRLP4 44
INDIRI4
EQI4 $965
LABELV $967
line 2561
;2561:				PM_ContinueLegsAnim( BOTH_CROUCH1IDLE );
CNSTI4 697
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2562
;2562:			} else {
ADDRGP4 $956
JUMPV
LABELV $965
line 2563
;2563:				if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1)
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $968
ADDRLP4 48
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $968
line 2564
;2564:				{
line 2565
;2565:					PM_ContinueLegsAnim( TORSO_WEAPONREADY4 );
CNSTI4 965
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2566
;2566:				}
ADDRGP4 $956
JUMPV
LABELV $968
line 2568
;2567:				else
;2568:				{
line 2569
;2569:					if (pm->ps->weapon == WP_SABER && pm->ps->saberHolstered)
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $970
ADDRLP4 52
INDIRP4
CNSTI4 1300
ADDP4
INDIRI4
CNSTI4 0
EQI4 $970
line 2570
;2570:					{
line 2571
;2571:						PM_ContinueLegsAnim( BOTH_STAND1 );
CNSTI4 550
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2572
;2572:					}
ADDRGP4 $956
JUMPV
LABELV $970
line 2574
;2573:					else
;2574:					{
line 2575
;2575:						PM_ContinueLegsAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2576
;2576:					}
line 2577
;2577:				}
line 2578
;2578:			}
line 2579
;2579:		}
line 2580
;2580:		return;
ADDRGP4 $956
JUMPV
LABELV $961
line 2584
;2581:	}
;2582:	
;2583:
;2584:	footstep = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2586
;2585:
;2586:	if ( pm->ps->pm_flags & PMF_DUCKED )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $972
line 2587
;2587:	{
line 2588
;2588:		int rolled = 0;
ADDRLP4 40
CNSTI4 0
ASGNI4
line 2590
;2589:
;2590:		bobmove = 0.5;	// ducked characters bob much faster
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 2592
;2591:
;2592:		if ( PM_RunningAnim( pm->ps->legsAnim ) && !BG_InRoll(pm->ps, pm->ps->legsAnim) )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 PM_RunningAnim
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $974
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $974
line 2593
;2593:		{//roll!
line 2594
;2594:			rolled = PM_TryRoll();
ADDRLP4 56
ADDRGP4 PM_TryRoll
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 56
INDIRI4
ASGNI4
line 2595
;2595:		}
LABELV $974
line 2596
;2596:		if ( !rolled )
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $976
line 2597
;2597:		{
line 2598
;2598:			if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $978
line 2599
;2599:				PM_ContinueLegsAnim( BOTH_CROUCH1WALKBACK );
CNSTI4 699
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2600
;2600:			}
ADDRGP4 $973
JUMPV
LABELV $978
line 2601
;2601:			else {
line 2602
;2602:				PM_ContinueLegsAnim( BOTH_CROUCH1WALK );
CNSTI4 698
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2603
;2603:			}
line 2604
;2604:		}
ADDRGP4 $973
JUMPV
LABELV $976
line 2606
;2605:		else
;2606:		{
line 2607
;2607:			pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 2608
;2608:			pm->ps->legsAnim = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
line 2609
;2609:			PM_SetAnim(SETANIM_BOTH,rolled,SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 150);
ADDRLP4 56
CNSTI4 3
ASGNI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
CNSTI4 150
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 2610
;2610:			PM_AddEventWithParm( EV_ROLL, 0 );
CNSTI4 15
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 2611
;2611:			pm->maxs[2] = CROUCH_MAXS_2;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTF4 1098907648
ASGNF4
line 2612
;2612:			pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 36
ASGNI4
line 2613
;2613:			pm->ps->pm_flags &= ~PMF_DUCKED;
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 2614
;2614:			pm->ps->pm_flags |= PMF_ROLLING;
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 2615
;2615:		}
line 2627
;2616:		// ducked characters never play footsteps
;2617:	/*
;2618:	} else 	if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
;2619:		if ( !( pm->cmd.buttons & BUTTON_WALKING ) ) {
;2620:			bobmove = 0.4;	// faster speeds bob faster
;2621:			footstep = qtrue;
;2622:		} else {
;2623:			bobmove = 0.3;
;2624:		}
;2625:		PM_ContinueLegsAnim( LEGS_BACK );
;2626:	*/
;2627:	}
ADDRGP4 $973
JUMPV
LABELV $972
line 2628
;2628:	else if ((pm->ps->pm_flags & PMF_ROLLING) && !BG_InRoll(pm->ps, pm->ps->legsAnim) &&
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $980
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $980
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 PM_InRollComplete
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $980
line 2630
;2629:		!PM_InRollComplete(pm->ps, pm->ps->legsAnim))
;2630:	{
line 2631
;2631:		bobmove = 0.5;	// ducked characters bob much faster
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 2633
;2632:
;2633:		if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $982
line 2634
;2634:		{
line 2635
;2635:			PM_ContinueLegsAnim( BOTH_CROUCH1WALKBACK );
CNSTI4 699
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2636
;2636:		}
ADDRGP4 $981
JUMPV
LABELV $982
line 2638
;2637:		else
;2638:		{
line 2639
;2639:			PM_ContinueLegsAnim( BOTH_CROUCH1WALK );
CNSTI4 698
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2640
;2640:		}
line 2641
;2641:	}
ADDRGP4 $981
JUMPV
LABELV $980
line 2643
;2642:	else
;2643:	{
line 2644
;2644:		if ( !( pm->cmd.buttons & BUTTON_WALKING ) )	//Boot - only fixed brackets, readability.
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $984
line 2645
;2645:		{
line 2646
;2646:			bobmove = 0.4f;	// faster speeds bob faster
ADDRLP4 4
CNSTF4 1053609165
ASGNF4
line 2647
;2647:			if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $986
line 2648
;2648:			{
line 2649
;2649:				PM_ContinueLegsAnim( BOTH_RUNBACK1 );
CNSTI4 750
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2650
;2650:			}
ADDRGP4 $987
JUMPV
LABELV $986
line 2652
;2651:			else
;2652:			{
line 2653
;2653:				PM_ContinueLegsAnim( BOTH_RUN1 );
CNSTI4 731
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2654
;2654:			}
LABELV $987
line 2655
;2655:			footstep = qtrue;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 2656
;2656:		}
ADDRGP4 $985
JUMPV
LABELV $984
line 2658
;2657:		else
;2658:		{
line 2659
;2659:			bobmove = 0.2f;	// walking bobs slow
ADDRLP4 4
CNSTF4 1045220557
ASGNF4
line 2660
;2660:			if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $988
line 2661
;2661:			{
line 2662
;2662:				PM_ContinueLegsAnim( BOTH_WALKBACK1 );
CNSTI4 748
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2663
;2663:			}
ADDRGP4 $989
JUMPV
LABELV $988
line 2665
;2664:			else
;2665:			{
line 2666
;2666:				PM_ContinueLegsAnim( BOTH_WALK1 );
CNSTI4 723
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 2667
;2667:			}
LABELV $989
line 2668
;2668:		}
LABELV $985
line 2669
;2669:	}
LABELV $981
LABELV $973
line 2672
;2670:
;2671:	// check for footstep / splash sounds
;2672:	old = pm->ps->bobCycle;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2673
;2673:	pm->ps->bobCycle = (int)( old + bobmove * pml.msec ) & 255;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
ADDRGP4 pml+40
INDIRI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
CNSTI4 255
BANDI4
ASGNI4
line 2676
;2674:
;2675:	// if we just crossed a cycle boundary, play an apropriate footstep event
;2676:	if ( ( ( old + 64 ) ^ ( pm->ps->bobCycle + 64 ) ) & 128 )
ADDRLP4 56
CNSTI4 64
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 56
INDIRI4
ADDI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 56
INDIRI4
ADDI4
BXORI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $991
line 2677
;2677:	{
line 2686
;2678:		/*
;2679:		if ( pm->waterlevel == 0 ) {
;2680:			// on ground will only play sounds if running
;2681:			if ( footstep && !pm->noFootsteps ) {
;2682:				PM_AddEvent( PM_FootstepForSurface() );
;2683:			}
;2684:		} else
;2685:		*/
;2686:		pm->ps->footstepTime = pm->cmd.serverTime + 300;
ADDRLP4 60
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
INDIRP4
CNSTI4 1260
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 300
ADDI4
ASGNI4
line 2687
;2687:		if ( pm->waterlevel == 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
NEI4 $993
line 2689
;2688:			// splashing
;2689:			PM_AddEvent( EV_FOOTSPLASH );
CNSTI4 4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2690
;2690:		} else if ( pm->waterlevel == 2 ) {
ADDRGP4 $994
JUMPV
LABELV $993
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $995
line 2692
;2691:			// wading / swimming at surface
;2692:			PM_AddEvent( EV_SWIM );
CNSTI4 6
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2693
;2693:		} else if ( pm->waterlevel == 3 ) {
ADDRGP4 $996
JUMPV
LABELV $995
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 3
NEI4 $997
line 2695
;2694:			// no sound when completely underwater
;2695:		}
LABELV $997
LABELV $996
LABELV $994
line 2696
;2696:	}
LABELV $991
line 2697
;2697:}
LABELV $956
endproc PM_Footsteps 68 16
proc PM_WaterEvents 16 4
line 2706
;2698:
;2699:/*
;2700:==============
;2701:PM_WaterEvents
;2702:
;2703:Generate sound events for entering and leaving water
;2704:==============
;2705:*/
;2706:static void PM_WaterEvents( void ) {		// FIXME?
line 2710
;2707:	//
;2708:	// if just entered a water volume, play a sound
;2709:	//
;2710:	if (!pml.previous_waterlevel && pm->waterlevel) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 pml+1160
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1000
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1000
line 2711
;2711:		PM_AddEvent( EV_WATER_TOUCH );
CNSTI4 16
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2712
;2712:	}
LABELV $1000
line 2717
;2713:
;2714:	//
;2715:	// if just completely exited a water volume, play a sound
;2716:	//
;2717:	if (pml.previous_waterlevel && !pm->waterlevel) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 pml+1160
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1003
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $1003
line 2718
;2718:		PM_AddEvent( EV_WATER_LEAVE );
CNSTI4 17
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2719
;2719:	}
LABELV $1003
line 2724
;2720:
;2721:	//
;2722:	// check for head just going under water
;2723:	//
;2724:	if (pml.previous_waterlevel != 3 && pm->waterlevel == 3) {
ADDRLP4 8
CNSTI4 3
ASGNI4
ADDRGP4 pml+1160
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $1006
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $1006
line 2725
;2725:		PM_AddEvent( EV_WATER_UNDER );
CNSTI4 18
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2726
;2726:	}
LABELV $1006
line 2731
;2727:
;2728:	//
;2729:	// check for head just coming out of water
;2730:	//
;2731:	if (pml.previous_waterlevel == 3 && pm->waterlevel != 3) {
ADDRLP4 12
CNSTI4 3
ASGNI4
ADDRGP4 pml+1160
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $1009
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $1009
line 2732
;2732:		PM_AddEvent( EV_WATER_CLEAR );
CNSTI4 19
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2733
;2733:	}
LABELV $1009
line 2734
;2734:}
LABELV $999
endproc PM_WaterEvents 16 4
export PM_BeginWeaponChange
proc PM_BeginWeaponChange 8 4
line 2742
;2735:
;2736:
;2737:/*
;2738:===============
;2739:PM_BeginWeaponChange
;2740:===============
;2741:*/
;2742:void PM_BeginWeaponChange( int weapon ) {
line 2743
;2743:	if ( weapon <= WP_NONE || weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1015
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1013
LABELV $1015
line 2744
;2744:		return;
ADDRGP4 $1012
JUMPV
LABELV $1013
line 2747
;2745:	}
;2746:
;2747:	if ( !( pm->ps->stats[STAT_WEAPONS] & ( 1 << weapon ) ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1016
line 2748
;2748:		return;
ADDRGP4 $1012
JUMPV
LABELV $1016
line 2751
;2749:	}
;2750:	
;2751:	if ( pm->ps->weaponstate == WEAPON_DROPPING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1018
line 2752
;2752:		return;
ADDRGP4 $1012
JUMPV
LABELV $1018
line 2756
;2753:	}
;2754:
;2755:	// turn of any kind of zooming when weapon switching.
;2756:	if (pm->ps->zoomMode)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1020
line 2757
;2757:	{
line 2758
;2758:		pm->ps->zoomMode = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 2759
;2759:		pm->ps->zoomTime = pm->ps->commandTime;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 1324
ADDP4
ADDRLP4 4
INDIRP4
INDIRI4
ASGNI4
line 2760
;2760:	}
LABELV $1020
line 2762
;2761:
;2762:	PM_AddEvent( EV_CHANGE_WEAPON );
CNSTI4 23
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2763
;2763:	pm->ps->weaponstate = WEAPON_DROPPING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 2
ASGNI4
line 2764
;2764:	pm->ps->weaponTime += 200;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 2765
;2765:	PM_StartTorsoAnim( TORSO_DROPWEAP1 );
CNSTI4 954
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2766
;2766:}
LABELV $1012
endproc PM_BeginWeaponChange 8 4
export PM_FinishWeaponChange
proc PM_FinishWeaponChange 12 4
line 2774
;2767:
;2768:
;2769:/*
;2770:===============
;2771:PM_FinishWeaponChange
;2772:===============
;2773:*/
;2774:void PM_FinishWeaponChange( void ) {
line 2777
;2775:	int		weapon;
;2776:
;2777:	weapon = pm->cmd.weapon;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 2778
;2778:	if ( weapon < WP_NONE || weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $1025
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1023
LABELV $1025
line 2779
;2779:		weapon = WP_NONE;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2780
;2780:	}
LABELV $1023
line 2782
;2781:
;2782:	if ( !( pm->ps->stats[STAT_WEAPONS] & ( 1 << weapon ) ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1026
line 2783
;2783:		weapon = WP_NONE;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2784
;2784:	}
LABELV $1026
line 2786
;2785:
;2786:	if (weapon == WP_SABER)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $1028
line 2787
;2787:	{
line 2788
;2788:		PM_SetSaberMove(LS_DRAW);
CNSTI4 2
ARGI4
ADDRGP4 PM_SetSaberMove
CALLV
pop
line 2789
;2789:	}
ADDRGP4 $1029
JUMPV
LABELV $1028
line 2791
;2790:	else
;2791:	{
line 2792
;2792:		PM_StartTorsoAnim( TORSO_RAISEWEAP1);
CNSTI4 958
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2793
;2793:	}
LABELV $1029
line 2794
;2794:	pm->ps->weapon = weapon;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2795
;2795:	pm->ps->weaponstate = WEAPON_RAISING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 1
ASGNI4
line 2796
;2796:	pm->ps->weaponTime += 250;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 2797
;2797:}
LABELV $1022
endproc PM_FinishWeaponChange 12 4
proc PM_DoChargedWeapons 1208 28
line 2804
;2798:
;2799:
;2800:
;2801://---------------------------------------
;2802:static qboolean PM_DoChargedWeapons( void )
;2803://---------------------------------------
;2804:{
line 2807
;2805:	vec3_t		ang;
;2806:	trace_t		tr;
;2807:	qboolean	charging = qfalse,
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2808
;2808:				altFire = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2811
;2809:
;2810:	// If you want your weapon to be a charging weapon, just set this bit up
;2811:	switch( pm->ps->weapon )
ADDRLP4 1100
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1100
INDIRI4
CNSTI4 3
LTI4 $1031
ADDRLP4 1100
INDIRI4
CNSTI4 11
GTI4 $1031
ADDRLP4 1100
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1105-12
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1105
address $1034
address $1031
address $1100
address $1037
address $1031
address $1097
address $1031
address $1040
address $1092
code
line 2812
;2812:	{
LABELV $1034
line 2817
;2813:	//------------------
;2814:	case WP_BRYAR_PISTOL:
;2815:
;2816:		// alt-fire charges the weapon
;2817:		if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1032
line 2818
;2818:		{
line 2819
;2819:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2820
;2820:			altFire = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2821
;2821:		}
line 2822
;2822:		break;
ADDRGP4 $1032
JUMPV
LABELV $1037
line 2828
;2823:	
;2824:	//------------------
;2825:	case WP_BOWCASTER:
;2826:
;2827:		// primary fire charges the weapon
;2828:		if ( pm->cmd.buttons & BUTTON_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1032
line 2829
;2829:		{
line 2830
;2830:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2831
;2831:		}
line 2832
;2832:		break;
ADDRGP4 $1032
JUMPV
LABELV $1040
line 2839
;2833:	
;2834:	//------------------
;2835:	case WP_ROCKET_LAUNCHER:
;2836:
;2837:		// Not really a charge weapon, but we still want to delay fire until the button comes up so that we can
;2838:		//	implement our alt-fire locking stuff
;2839:		if ( (pm->cmd.buttons & BUTTON_ALT_ATTACK) && pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] >= weaponData[pm->ps->weapon].altEnergyPerShot )
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1108
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1032
ADDRLP4 1112
ADDRLP4 1108
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1116
CNSTI4 56
ADDRLP4 1112
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 1116
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1112
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 1116
INDIRI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
LTI4 $1032
line 2840
;2840:		{
line 2843
;2841:			vec3_t muzzleOffPoint, muzzlePoint, forward, right, up;
;2842:
;2843:			AngleVectors( pm->ps->viewangles, forward, right, up );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 1144
ARGP4
ADDRLP4 1156
ARGP4
ADDRLP4 1168
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2845
;2844:
;2845:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2846
;2846:			altFire = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2848
;2847:
;2848:			AngleVectors(pm->ps->viewangles, ang, NULL, NULL);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 1180
CNSTP4 0
ASGNP4
ADDRLP4 1180
INDIRP4
ARGP4
ADDRLP4 1180
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2850
;2849:
;2850:			VectorCopy( pm->ps->origin, muzzlePoint );
ADDRLP4 1120
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2851
;2851:			VectorCopy(WP_MuzzlePoint[WP_ROCKET_LAUNCHER], muzzleOffPoint);
ADDRLP4 1132
ADDRGP4 WP_MuzzlePoint+120
INDIRB
ASGNB 12
line 2853
;2852:
;2853:			VectorMA(muzzlePoint, muzzleOffPoint[0], forward, muzzlePoint);
ADDRLP4 1184
ADDRLP4 1132
INDIRF4
ASGNF4
ADDRLP4 1120
ADDRLP4 1120
INDIRF4
ADDRLP4 1144
INDIRF4
ADDRLP4 1184
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1120+4
ADDRLP4 1120+4
INDIRF4
ADDRLP4 1144+4
INDIRF4
ADDRLP4 1184
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1120+8
ADDRLP4 1120+8
INDIRF4
ADDRLP4 1144+8
INDIRF4
ADDRLP4 1132
INDIRF4
MULF4
ADDF4
ASGNF4
line 2854
;2854:			VectorMA(muzzlePoint, muzzleOffPoint[1], right, muzzlePoint);
ADDRLP4 1120
ADDRLP4 1120
INDIRF4
ADDRLP4 1156
INDIRF4
ADDRLP4 1132+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1120+4
ADDRLP4 1120+4
INDIRF4
ADDRLP4 1156+4
INDIRF4
ADDRLP4 1132+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1120+8
ADDRLP4 1120+8
INDIRF4
ADDRLP4 1156+8
INDIRF4
ADDRLP4 1132+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2855
;2855:			muzzlePoint[2] += pm->ps->viewheight + muzzleOffPoint[2];
ADDRLP4 1120+8
ADDRLP4 1120+8
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 1132+8
INDIRF4
ADDF4
ADDF4
ASGNF4
line 2857
;2856:
;2857:			ang[0] = muzzlePoint[0] + ang[0]*2048;
ADDRLP4 8
ADDRLP4 1120
INDIRF4
CNSTF4 1157627904
ADDRLP4 8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2858
;2858:			ang[1] = muzzlePoint[1] + ang[1]*2048;
ADDRLP4 8+4
ADDRLP4 1120+4
INDIRF4
CNSTF4 1157627904
ADDRLP4 8+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2859
;2859:			ang[2] = muzzlePoint[2] + ang[2]*2048;
ADDRLP4 8+8
ADDRLP4 1120+8
INDIRF4
CNSTF4 1157627904
ADDRLP4 8+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2861
;2860:
;2861:			pm->trace(&tr, muzzlePoint, NULL, NULL, ang, pm->ps->clientNum, MASK_PLAYERSOLID);
ADDRLP4 20
ARGP4
ADDRLP4 1120
ARGP4
ADDRLP4 1188
CNSTP4 0
ASGNP4
ADDRLP4 1188
INDIRP4
ARGP4
ADDRLP4 1188
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 1192
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1192
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRLP4 1192
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 2863
;2862:
;2863:			if (tr.fraction != 1 && tr.entityNum < MAX_CLIENTS && tr.entityNum != pm->ps->clientNum)
ADDRLP4 20+8
INDIRF4
CNSTF4 1065353216
EQF4 $1068
ADDRLP4 20+52
INDIRI4
CNSTI4 32
GEI4 $1068
ADDRLP4 20+52
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
EQI4 $1068
line 2864
;2864:			{
line 2865
;2865:				if (pm->ps->rocketLockIndex == MAX_CLIENTS)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
CNSTI4 32
NEI4 $1073
line 2866
;2866:				{
line 2867
;2867:					pm->ps->rocketLockIndex = tr.entityNum;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 20+52
INDIRI4
ASGNI4
line 2868
;2868:					pm->ps->rocketLockTime = pm->cmd.serverTime;
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 1196
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 2869
;2869:				}
ADDRGP4 $1074
JUMPV
LABELV $1073
line 2870
;2870:				else if (pm->ps->rocketLockIndex != tr.entityNum && pm->ps->rocketTargetTime < pm->cmd.serverTime)
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1200
ADDRLP4 1196
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1200
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ADDRLP4 20+52
INDIRI4
EQI4 $1076
ADDRLP4 1200
INDIRP4
CNSTI4 592
ADDP4
INDIRF4
ADDRLP4 1196
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
GEF4 $1076
line 2871
;2871:				{
line 2872
;2872:					pm->ps->rocketLockIndex = tr.entityNum;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
ADDRLP4 20+52
INDIRI4
ASGNI4
line 2873
;2873:					pm->ps->rocketLockTime = pm->cmd.serverTime;
ADDRLP4 1204
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1204
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 1204
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 2874
;2874:				}
ADDRGP4 $1077
JUMPV
LABELV $1076
line 2875
;2875:				else if (pm->ps->rocketLockIndex == tr.entityNum)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ADDRLP4 20+52
INDIRI4
NEI4 $1080
line 2876
;2876:				{
line 2877
;2877:					if (pm->ps->rocketLockTime == -1)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
INDIRF4
CNSTF4 3212836864
NEF4 $1083
line 2878
;2878:					{
line 2879
;2879:						pm->ps->rocketLockTime = pm->ps->rocketLastValidTime;
ADDRLP4 1204
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1204
INDIRP4
CNSTI4 588
ADDP4
ADDRLP4 1204
INDIRP4
CNSTI4 584
ADDP4
INDIRF4
ASGNF4
line 2880
;2880:					}
LABELV $1083
line 2881
;2881:				}
LABELV $1080
LABELV $1077
LABELV $1074
line 2883
;2882:
;2883:				if (pm->ps->rocketLockIndex == tr.entityNum)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
INDIRI4
ADDRLP4 20+52
INDIRI4
NEI4 $1032
line 2884
;2884:				{
line 2885
;2885:					pm->ps->rocketTargetTime = pm->cmd.serverTime + 500;
ADDRLP4 1204
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1204
INDIRP4
INDIRP4
CNSTI4 592
ADDP4
ADDRLP4 1204
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 500
ADDI4
CVIF4 4
ASGNF4
line 2886
;2886:				}
line 2887
;2887:			}
ADDRGP4 $1032
JUMPV
LABELV $1068
line 2888
;2888:			else if (pm->ps->rocketTargetTime < pm->cmd.serverTime)
ADDRLP4 1196
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1196
INDIRP4
INDIRP4
CNSTI4 592
ADDP4
INDIRF4
ADDRLP4 1196
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CVIF4 4
GEF4 $1088
line 2889
;2889:			{
line 2890
;2890:				pm->ps->rocketLockIndex = MAX_CLIENTS;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
CNSTI4 32
ASGNI4
line 2891
;2891:				pm->ps->rocketLockTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
CNSTF4 0
ASGNF4
line 2892
;2892:			}
ADDRGP4 $1032
JUMPV
LABELV $1088
line 2894
;2893:			else
;2894:			{
line 2895
;2895:				if (pm->ps->rocketLockTime != -1)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
INDIRF4
CNSTF4 3212836864
EQF4 $1090
line 2896
;2896:				{
line 2897
;2897:					pm->ps->rocketLastValidTime = pm->ps->rocketLockTime;
ADDRLP4 1200
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1200
INDIRP4
CNSTI4 584
ADDP4
ADDRLP4 1200
INDIRP4
CNSTI4 588
ADDP4
INDIRF4
ASGNF4
line 2898
;2898:				}
LABELV $1090
line 2899
;2899:				pm->ps->rocketLockTime = -1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
CNSTF4 3212836864
ASGNF4
line 2900
;2900:			}
line 2901
;2901:		}
line 2902
;2902:		break;
ADDRGP4 $1032
JUMPV
LABELV $1092
line 2907
;2903:
;2904:	//------------------
;2905:	case WP_THERMAL:
;2906:
;2907:		if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1093
line 2908
;2908:		{
line 2909
;2909:			altFire = qtrue; // override default of not being an alt-fire
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2910
;2910:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2911
;2911:		}
ADDRGP4 $1032
JUMPV
LABELV $1093
line 2912
;2912:		else if ( pm->cmd.buttons & BUTTON_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1032
line 2913
;2913:		{
line 2914
;2914:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2915
;2915:		}
line 2916
;2916:		break;
ADDRGP4 $1032
JUMPV
LABELV $1097
line 2919
;2917:
;2918:	case WP_DEMP2:
;2919:		if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1032
line 2920
;2920:		{
line 2921
;2921:			altFire = qtrue; // override default of not being an alt-fire
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2922
;2922:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2923
;2923:		}
line 2924
;2924:		break;
ADDRGP4 $1032
JUMPV
LABELV $1100
line 2927
;2925:
;2926:	case WP_DISRUPTOR:
;2927:		if ((pm->cmd.buttons & BUTTON_ATTACK) &&
ADDRLP4 1120
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1124
CNSTI4 1
ASGNI4
ADDRLP4 1128
CNSTI4 0
ASGNI4
ADDRLP4 1120
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 1124
INDIRI4
BANDI4
ADDRLP4 1128
INDIRI4
EQI4 $1101
ADDRLP4 1132
ADDRLP4 1120
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1132
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
ADDRLP4 1124
INDIRI4
NEI4 $1101
ADDRLP4 1132
INDIRP4
CNSTI4 1328
ADDP4
INDIRI4
ADDRLP4 1128
INDIRI4
EQI4 $1101
line 2930
;2928:			pm->ps->zoomMode == 1 &&
;2929:			pm->ps->zoomLocked)
;2930:		{
line 2931
;2931:			charging = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2932
;2932:			altFire = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2933
;2933:		}
LABELV $1101
line 2935
;2934:
;2935:		if (pm->ps->zoomMode != 1 &&
ADDRLP4 1136
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1136
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1103
ADDRLP4 1136
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1103
line 2937
;2936:			pm->ps->weaponstate == WEAPON_CHARGING_ALT)
;2937:		{
line 2938
;2938:			pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 0
ASGNI4
line 2939
;2939:			charging = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2940
;2940:			altFire = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2941
;2941:		}
LABELV $1103
line 2943
;2942:
;2943:	} // end switch
LABELV $1031
LABELV $1032
line 2948
;2944:
;2945:
;2946:	// set up the appropriate weapon state based on the button that's down.  
;2947:	//	Note that we ALWAYS return if charging is set ( meaning the buttons are still down )
;2948:	if ( charging )
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $1107
line 2949
;2949:	{
line 2950
;2950:		if ( altFire )
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1109
line 2951
;2951:		{
line 2952
;2952:			if ( pm->ps->weaponstate != WEAPON_CHARGING_ALT )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1111
line 2953
;2953:			{
line 2955
;2954:				// charge isn't started, so do it now
;2955:				pm->ps->weaponstate = WEAPON_CHARGING_ALT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 5
ASGNI4
line 2956
;2956:				pm->ps->weaponChargeTime = pm->cmd.serverTime;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1108
INDIRP4
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 1108
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2957
;2957:				pm->ps->weaponChargeSubtractTime = pm->cmd.serverTime + weaponData[pm->ps->weapon].altChargeSubTime;
ADDRLP4 1112
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1116
ADDRLP4 1112
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1116
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 1112
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 56
ADDRLP4 1116
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+36
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2962
;2958:
;2959:#ifdef _DEBUG
;2960:				Com_Printf("Starting charge\n");
;2961:#endif
;2962:				assert(pm->ps->weapon > WP_NONE);
line 2963
;2963:				BG_AddPredictableEventToPlayerstate(EV_WEAPON_CHARGE_ALT, pm->ps->weapon, pm->ps);
CNSTI4 96
ARGI4
ADDRLP4 1120
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1120
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ARGI4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRGP4 BG_AddPredictableEventToPlayerstate
CALLV
pop
line 2964
;2964:			}
LABELV $1111
line 2966
;2965:
;2966:			if (pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] < (weaponData[pm->ps->weapon].altChargeSub+weaponData[pm->ps->weapon].altEnergyPerShot))
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1112
CNSTI4 56
ADDRLP4 1108
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1108
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData+44
ADDP4
INDIRI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
ADDI4
GEI4 $1114
line 2967
;2967:			{
line 2968
;2968:				pm->ps->weaponstate = WEAPON_CHARGING_ALT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 5
ASGNI4
line 2970
;2969:
;2970:				goto rest;
ADDRGP4 $1118
JUMPV
LABELV $1114
line 2972
;2971:			}
;2972:			else if ((pm->cmd.serverTime - pm->ps->weaponChargeTime) < weaponData[pm->ps->weapon].altMaxCharge)
ADDRLP4 1116
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1120
ADDRLP4 1116
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1116
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 1120
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
SUBI4
CNSTI4 56
ADDRLP4 1120
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+52
ADDP4
INDIRI4
GEI4 $1110
line 2973
;2973:			{
line 2974
;2974:				if (pm->ps->weaponChargeSubtractTime < pm->cmd.serverTime)
ADDRLP4 1124
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1124
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRLP4 1124
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1110
line 2975
;2975:				{
line 2976
;2976:					pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] -= weaponData[pm->ps->weapon].altChargeSub;
ADDRLP4 1128
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1132
CNSTI4 56
ADDRLP4 1128
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 1136
ADDRLP4 1132
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1128
INDIRP4
CNSTI4 408
ADDP4
ADDP4
ASGNP4
ADDRLP4 1136
INDIRP4
ADDRLP4 1136
INDIRP4
INDIRI4
ADDRLP4 1132
INDIRI4
ADDRGP4 weaponData+44
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2977
;2977:					pm->ps->weaponChargeSubtractTime = pm->cmd.serverTime + weaponData[pm->ps->weapon].altChargeSubTime;
ADDRLP4 1140
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1144
ADDRLP4 1140
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1144
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 1140
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 56
ADDRLP4 1144
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+36
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2978
;2978:				}
line 2979
;2979:			}
line 2980
;2980:		}
ADDRGP4 $1110
JUMPV
LABELV $1109
line 2982
;2981:		else
;2982:		{
line 2983
;2983:			if ( pm->ps->weaponstate != WEAPON_CHARGING )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 4
EQI4 $1126
line 2984
;2984:			{
line 2986
;2985:				// charge isn't started, so do it now
;2986:				pm->ps->weaponstate = WEAPON_CHARGING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 4
ASGNI4
line 2987
;2987:				pm->ps->weaponChargeTime = pm->cmd.serverTime;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1108
INDIRP4
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 1108
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2988
;2988:				pm->ps->weaponChargeSubtractTime = pm->cmd.serverTime + weaponData[pm->ps->weapon].chargeSubTime;
ADDRLP4 1112
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1116
ADDRLP4 1112
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1116
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 1112
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 56
ADDRLP4 1116
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+32
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2993
;2989:
;2990:#ifdef _DEBUG
;2991:				Com_Printf("Starting charge\n");
;2992:#endif
;2993:				BG_AddPredictableEventToPlayerstate(EV_WEAPON_CHARGE, pm->ps->weapon, pm->ps);
CNSTI4 95
ARGI4
ADDRLP4 1120
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1120
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ARGI4
ADDRLP4 1120
INDIRP4
ARGP4
ADDRGP4 BG_AddPredictableEventToPlayerstate
CALLV
pop
line 2994
;2994:			}
LABELV $1126
line 2996
;2995:
;2996:			if (pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] < (weaponData[pm->ps->weapon].chargeSub+weaponData[pm->ps->weapon].energyPerShot))
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1112
CNSTI4 56
ADDRLP4 1108
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1108
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData+40
ADDP4
INDIRI4
ADDRLP4 1112
INDIRI4
ADDRGP4 weaponData+8
ADDP4
INDIRI4
ADDI4
GEI4 $1129
line 2997
;2997:			{
line 2998
;2998:				pm->ps->weaponstate = WEAPON_CHARGING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 4
ASGNI4
line 3000
;2999:
;3000:				goto rest;
ADDRGP4 $1118
JUMPV
LABELV $1129
line 3002
;3001:			}
;3002:			else if ((pm->cmd.serverTime - pm->ps->weaponChargeTime) < weaponData[pm->ps->weapon].maxCharge)
ADDRLP4 1116
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1120
ADDRLP4 1116
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1116
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 1120
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
SUBI4
CNSTI4 56
ADDRLP4 1120
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+48
ADDP4
INDIRI4
GEI4 $1133
line 3003
;3003:			{
line 3004
;3004:				if (pm->ps->weaponChargeSubtractTime < pm->cmd.serverTime)
ADDRLP4 1124
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1124
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRLP4 1124
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1136
line 3005
;3005:				{
line 3006
;3006:					pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] -= weaponData[pm->ps->weapon].chargeSub;
ADDRLP4 1128
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1132
CNSTI4 56
ADDRLP4 1128
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 1136
ADDRLP4 1132
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 1128
INDIRP4
CNSTI4 408
ADDP4
ADDP4
ASGNP4
ADDRLP4 1136
INDIRP4
ADDRLP4 1136
INDIRP4
INDIRI4
ADDRLP4 1132
INDIRI4
ADDRGP4 weaponData+40
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3007
;3007:					pm->ps->weaponChargeSubtractTime = pm->cmd.serverTime + weaponData[pm->ps->weapon].chargeSubTime;
ADDRLP4 1140
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1144
ADDRLP4 1140
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 1144
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 1140
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 56
ADDRLP4 1144
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+32
ADDP4
INDIRI4
ADDI4
ASGNI4
line 3008
;3008:				}
LABELV $1136
line 3009
;3009:			}
LABELV $1133
line 3010
;3010:		}
LABELV $1110
line 3012
;3011:
;3012:		return qtrue; // short-circuit rest of weapon code
CNSTI4 1
RETI4
ADDRGP4 $1030
JUMPV
LABELV $1107
LABELV $1118
line 3017
;3013:	}
;3014:rest:
;3015:	// Only charging weapons should be able to set these states...so....
;3016:	//	let's see which fire mode we need to set up now that the buttons are up
;3017:	if ( pm->ps->weaponstate == WEAPON_CHARGING )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 4
NEI4 $1140
line 3018
;3018:	{
line 3025
;3019:		// weapon has a charge, so let us do an attack
;3020:#ifdef _DEBUG
;3021:		Com_Printf("Firing.  Charge time=%d\n", pm->cmd.serverTime - pm->ps->weaponChargeTime);
;3022:#endif
;3023:
;3024:		// dumb, but since we shoot a charged weapon on button-up, we need to repress this button for now
;3025:		pm->cmd.buttons |= BUTTON_ATTACK;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 3026
;3026:		pm->ps->eFlags |= EF_FIRING;
ADDRLP4 1112
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 1112
INDIRP4
ADDRLP4 1112
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 3027
;3027:	}
ADDRGP4 $1141
JUMPV
LABELV $1140
line 3028
;3028:	else if ( pm->ps->weaponstate == WEAPON_CHARGING_ALT )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1142
line 3029
;3029:	{
line 3036
;3030:		// weapon has a charge, so let us do an alt-attack
;3031:#ifdef _DEBUG
;3032:		Com_Printf("Firing.  Charge time=%d\n", pm->cmd.serverTime - pm->ps->weaponChargeTime);
;3033:#endif
;3034:
;3035:		// dumb, but since we shoot a charged weapon on button-up, we need to repress this button for now
;3036:		pm->cmd.buttons |= BUTTON_ALT_ATTACK;
ADDRLP4 1108
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 1108
INDIRP4
ADDRLP4 1108
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 3037
;3037:		pm->ps->eFlags |= (EF_FIRING|EF_ALT_FIRING);
ADDRLP4 1112
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 1112
INDIRP4
ADDRLP4 1112
INDIRP4
INDIRI4
CNSTI4 768
BORI4
ASGNI4
line 3038
;3038:	}
LABELV $1142
LABELV $1141
line 3040
;3039:
;3040:	return qfalse; // continue with the rest of the weapon code
CNSTI4 0
RETI4
LABELV $1030
endproc PM_DoChargedWeapons 1208 28
export PM_ItemUsable
proc PM_ItemUsable 1236 28
line 3048
;3041:}
;3042:
;3043:
;3044:#define BOWCASTER_CHARGE_UNIT	200.0f	// bowcaster charging gives us one more unit every 200ms--if you change this, you'll have to do the same in g_weapon
;3045:#define BRYAR_CHARGE_UNIT		200.0f	// bryar charging gives us one more unit every 200ms--if you change this, you'll have to do the same in g_weapon
;3046:
;3047:int PM_ItemUsable(playerState_t *ps, int forcedUse)
;3048:{
line 3055
;3049:	vec3_t fwd, fwdorg, dest, pos;
;3050:	vec3_t yawonly;
;3051:	vec3_t mins, maxs;
;3052:	vec3_t trtest;
;3053:	trace_t tr;
;3054:
;3055:	if (ps->usingATST)
ADDRFP4 0
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1145
line 3056
;3056:	{
line 3057
;3057:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1145
line 3060
;3058:	}
;3059:
;3060:	if (ps->pm_flags & PMF_USE_ITEM_HELD)
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $1147
line 3061
;3061:	{ //force to let go first
line 3062
;3062:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1147
line 3065
;3063:	}
;3064:
;3065:	if (!forcedUse)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $1149
line 3066
;3066:	{
line 3067
;3067:		forcedUse = bg_itemlist[ps->stats[STAT_HOLDABLE_ITEM]].giTag;
ADDRFP4 4
CNSTI4 52
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
ASGNI4
line 3068
;3068:	}
LABELV $1149
line 3070
;3069:
;3070:	switch (forcedUse)
ADDRLP4 1176
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 1176
INDIRI4
CNSTI4 1
LTI4 $1152
ADDRLP4 1176
INDIRI4
CNSTI4 6
GTI4 $1152
ADDRLP4 1176
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1212-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1212
address $1160
address $1190
address $1154
address $1152
address $1152
address $1163
code
line 3071
;3071:	{
LABELV $1154
line 3073
;3072:	case HI_MEDPAC:
;3073:		if (ps->stats[STAT_HEALTH] >= ps->stats[STAT_MAX_HEALTH])
ADDRLP4 1180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1180
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 1180
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
LTI4 $1155
line 3074
;3074:		{
line 3075
;3075:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1155
line 3077
;3076:		}
;3077:		if (ps->stats[STAT_HEALTH] <= 0 ||
ADDRLP4 1184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1188
CNSTI4 0
ASGNI4
ADDRLP4 1184
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 1188
INDIRI4
LEI4 $1159
ADDRLP4 1184
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 1188
INDIRI4
EQI4 $1157
LABELV $1159
line 3079
;3078:			(ps->eFlags & EF_DEAD))
;3079:		{
line 3080
;3080:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1157
line 3083
;3081:		}
;3082:
;3083:		return 1;
CNSTI4 1
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1160
line 3085
;3084:	case HI_SEEKER:
;3085:		if (ps->eFlags & EF_SEEKERDRONE)
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1048576
BANDI4
CNSTI4 0
EQI4 $1161
line 3086
;3086:		{
line 3087
;3087:			PM_AddEventWithParm(EV_ITEMUSEFAIL, SEEKER_ALREADYDEPLOYED);
CNSTI4 56
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3088
;3088:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1161
line 3091
;3089:		}
;3090:
;3091:		return 1;
CNSTI4 1
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1163
line 3093
;3092:	case HI_SENTRY_GUN:
;3093:		if (ps->fd.sentryDeployed)
ADDRFP4 0
INDIRP4
CNSTI4 1212
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1164
line 3094
;3094:		{
line 3095
;3095:			PM_AddEventWithParm(EV_ITEMUSEFAIL, SENTRY_ALREADYPLACED);
CNSTI4 56
ARGI4
CNSTI4 2
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3096
;3096:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1164
line 3099
;3097:		}
;3098:
;3099:		yawonly[ROLL] = 0;
ADDRLP4 1140+8
CNSTF4 0
ASGNF4
line 3100
;3100:		yawonly[PITCH] = 0;
ADDRLP4 1140
CNSTF4 0
ASGNF4
line 3101
;3101:		yawonly[YAW] = ps->viewangles[YAW];
ADDRLP4 1140+4
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRF4
ASGNF4
line 3103
;3102:
;3103:		VectorSet( mins, -8, -8, 0 );
ADDRLP4 1192
CNSTF4 3238002688
ASGNF4
ADDRLP4 1092
ADDRLP4 1192
INDIRF4
ASGNF4
ADDRLP4 1092+4
ADDRLP4 1192
INDIRF4
ASGNF4
ADDRLP4 1092+8
CNSTF4 0
ASGNF4
line 3104
;3104:		VectorSet( maxs, 8, 8, 24 );
ADDRLP4 1196
CNSTF4 1090519040
ASGNF4
ADDRLP4 1104
ADDRLP4 1196
INDIRF4
ASGNF4
ADDRLP4 1104+4
ADDRLP4 1196
INDIRF4
ASGNF4
ADDRLP4 1104+8
CNSTF4 1103101952
ASGNF4
line 3106
;3105:
;3106:		AngleVectors(yawonly, fwd, NULL, NULL);
ADDRLP4 1140
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1200
CNSTP4 0
ASGNP4
ADDRLP4 1200
INDIRP4
ARGP4
ADDRLP4 1200
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3108
;3107:
;3108:		fwdorg[0] = ps->origin[0] + fwd[0]*64;
ADDRLP4 1116
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 3109
;3109:		fwdorg[1] = ps->origin[1] + fwd[1]*64;
ADDRLP4 1116+4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3110
;3110:		fwdorg[2] = ps->origin[2] + fwd[2]*64;
ADDRLP4 1116+8
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3112
;3111:
;3112:		trtest[0] = fwdorg[0] + fwd[0]*16;
ADDRLP4 1152
ADDRLP4 1116
INDIRF4
CNSTF4 1098907648
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 3113
;3113:		trtest[1] = fwdorg[1] + fwd[1]*16;
ADDRLP4 1152+4
ADDRLP4 1116+4
INDIRF4
CNSTF4 1098907648
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 3114
;3114:		trtest[2] = fwdorg[2] + fwd[2]*16;
ADDRLP4 1152+8
ADDRLP4 1116+8
INDIRF4
CNSTF4 1098907648
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3116
;3115:
;3116:		pm->trace(&tr, ps->origin, mins, maxs, trtest, ps->clientNum, MASK_PLAYERSOLID);
ADDRLP4 12
ARGP4
ADDRLP4 1204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1204
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1092
ARGP4
ADDRLP4 1104
ARGP4
ADDRLP4 1152
ARGP4
ADDRLP4 1204
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 273
ARGI4
ADDRGP4 pm
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 3118
;3117:
;3118:		if ((tr.fraction != 1 && tr.entityNum != ps->clientNum) || tr.startsolid || tr.allsolid)
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
EQF4 $1188
ADDRLP4 12+52
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
NEI4 $1189
LABELV $1188
ADDRLP4 1208
CNSTI4 0
ASGNI4
ADDRLP4 12+4
INDIRI4
ADDRLP4 1208
INDIRI4
NEI4 $1189
ADDRLP4 12
INDIRI4
ADDRLP4 1208
INDIRI4
EQI4 $1182
LABELV $1189
line 3119
;3119:		{
line 3120
;3120:			PM_AddEventWithParm(EV_ITEMUSEFAIL, SENTRY_NOROOM);
CNSTI4 56
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3121
;3121:			return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1182
line 3124
;3122:		}
;3123:
;3124:		return 1;
CNSTI4 1
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1190
line 3126
;3125:	case HI_SHIELD:
;3126:		mins[0] = -8;
ADDRLP4 1092
CNSTF4 3238002688
ASGNF4
line 3127
;3127:		mins[1] = -8;
ADDRLP4 1092+4
CNSTF4 3238002688
ASGNF4
line 3128
;3128:		mins[2] = 0;
ADDRLP4 1092+8
CNSTF4 0
ASGNF4
line 3130
;3129:
;3130:		maxs[0] = 8;
ADDRLP4 1104
CNSTF4 1090519040
ASGNF4
line 3131
;3131:		maxs[1] = 8;
ADDRLP4 1104+4
CNSTF4 1090519040
ASGNF4
line 3132
;3132:		maxs[2] = 8;
ADDRLP4 1104+8
CNSTF4 1090519040
ASGNF4
line 3134
;3133:
;3134:		AngleVectors (ps->viewangles, fwd, NULL, NULL);
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 1212
CNSTP4 0
ASGNP4
ADDRLP4 1212
INDIRP4
ARGP4
ADDRLP4 1212
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3135
;3135:		fwd[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 3136
;3136:		VectorMA(ps->origin, 64, fwd, dest);
ADDRLP4 1216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1220
CNSTF4 1115684864
ASGNF4
ADDRLP4 1128
ADDRLP4 1216
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1128+4
ADDRLP4 1216
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 1220
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 1128+8
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1115684864
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3137
;3137:		pm->trace(&tr, ps->origin, mins, maxs, dest, ps->clientNum, MASK_SHOT );
ADDRLP4 12
ARGP4
ADDRLP4 1224
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 1224
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 1092
ARGP4
ADDRLP4 1104
ARGP4
ADDRLP4 1128
ARGP4
ADDRLP4 1224
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 769
ARGI4
ADDRGP4 pm
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 3138
;3138:		if (tr.fraction > 0.9 && !tr.startsolid && !tr.allsolid)
ADDRLP4 12+8
INDIRF4
CNSTF4 1063675494
LEF4 $1200
ADDRLP4 1228
CNSTI4 0
ASGNI4
ADDRLP4 12+4
INDIRI4
ADDRLP4 1228
INDIRI4
NEI4 $1200
ADDRLP4 12
INDIRI4
ADDRLP4 1228
INDIRI4
NEI4 $1200
line 3139
;3139:		{
line 3140
;3140:			VectorCopy(tr.endpos, pos);
ADDRLP4 1164
ADDRLP4 12+12
INDIRB
ASGNB 12
line 3141
;3141:			VectorSet( dest, pos[0], pos[1], pos[2] - 4096 );
ADDRLP4 1128
ADDRLP4 1164
INDIRF4
ASGNF4
ADDRLP4 1128+4
ADDRLP4 1164+4
INDIRF4
ASGNF4
ADDRLP4 1128+8
ADDRLP4 1164+8
INDIRF4
CNSTF4 1166016512
SUBF4
ASGNF4
line 3142
;3142:			pm->trace( &tr, pos, mins, maxs, dest, ps->clientNum, MASK_SOLID );
ADDRLP4 12
ARGP4
ADDRLP4 1164
ARGP4
ADDRLP4 1092
ARGP4
ADDRLP4 1104
ARGP4
ADDRLP4 1128
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 pm
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLV
pop
line 3143
;3143:			if ( !tr.startsolid && !tr.allsolid )
ADDRLP4 1232
CNSTI4 0
ASGNI4
ADDRLP4 12+4
INDIRI4
ADDRLP4 1232
INDIRI4
NEI4 $1209
ADDRLP4 12
INDIRI4
ADDRLP4 1232
INDIRI4
NEI4 $1209
line 3144
;3144:			{
line 3145
;3145:				return 1;
CNSTI4 1
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1209
line 3147
;3146:			}
;3147:		}
LABELV $1200
line 3148
;3148:		PM_AddEventWithParm(EV_ITEMUSEFAIL, SHIELD_NOROOM);
CNSTI4 56
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3149
;3149:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1144
JUMPV
LABELV $1152
line 3151
;3150:	default:
;3151:		return 1;
CNSTI4 1
RETI4
LABELV $1144
endproc PM_ItemUsable 1236 28
proc PM_Weapon 156 16
line 3162
;3152:	}
;3153:}
;3154:
;3155:/*
;3156:==============
;3157:PM_Weapon
;3158:
;3159:Generates weapon events and modifes the weapon counter
;3160:==============
;3161:*/
;3162:static void PM_Weapon( void ) {
line 3165
;3163:	int		addTime;
;3164:	int amount;
;3165:	int		killAfterItem = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 3167
;3166:
;3167:	if (pm->ps->usingATST)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1215
line 3168
;3168:	{
line 3169
;3169:		if ( pm->ps->weaponTime > 0 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1217
line 3170
;3170:		{
line 3171
;3171:			pm->ps->weaponTime -= pml.msec;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 3172
;3172:		}
LABELV $1217
line 3174
;3173:
;3174:		if (pm->ps->weaponTime < 1 && (pm->cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)))
ADDRLP4 12
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1214
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 129
BANDI4
CNSTI4 0
EQI4 $1214
line 3175
;3175:		{
line 3176
;3176:			pm->ps->weaponTime += 500;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3178
;3177:
;3178:			if (pm->ps->atstAltFire)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1308
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1222
line 3179
;3179:			{
line 3180
;3180:				PM_AddEvent( EV_ALT_FIRE );
CNSTI4 25
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3181
;3181:				pm->ps->atstAltFire = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1308
ADDP4
CNSTI4 0
ASGNI4
line 3182
;3182:			}
ADDRGP4 $1214
JUMPV
LABELV $1222
line 3184
;3183:			else
;3184:			{
line 3185
;3185:				PM_AddEvent( EV_FIRE_WEAPON );
CNSTI4 24
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3186
;3186:				pm->ps->atstAltFire = qtrue;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1308
ADDP4
CNSTI4 1
ASGNI4
line 3187
;3187:			}
line 3188
;3188:		}
line 3190
;3189:
;3190:		return;
ADDRGP4 $1214
JUMPV
LABELV $1215
line 3193
;3191:	}
;3192:
;3193:	if (pm->ps->weapon != WP_DISRUPTOR && pm->ps->weapon != WP_ROCKET_LAUNCHER)
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 5
EQI4 $1224
ADDRLP4 12
INDIRI4
CNSTI4 10
EQI4 $1224
line 3194
;3194:	{ //check for exceeding max charge time if not using disruptor or rocket launcher
line 3195
;3195:		if ( pm->ps->weaponstate == WEAPON_CHARGING_ALT )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1226
line 3196
;3196:		{
line 3197
;3197:			int timeDif = (pm->cmd.serverTime - pm->ps->weaponChargeTime);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3199
;3198:
;3199:			if (timeDif > MAX_WEAPON_CHARGE_TIME)
ADDRLP4 16
INDIRI4
CNSTI4 5000
LEI4 $1228
line 3200
;3200:			{
line 3201
;3201:				pm->cmd.buttons &= ~BUTTON_ALT_ATTACK;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 3202
;3202:			}
LABELV $1228
line 3203
;3203:		}
LABELV $1226
line 3205
;3204:
;3205:		if ( pm->ps->weaponstate == WEAPON_CHARGING )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 4
NEI4 $1230
line 3206
;3206:		{
line 3207
;3207:			int timeDif = (pm->cmd.serverTime - pm->ps->weaponChargeTime);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3209
;3208:
;3209:			if (timeDif > MAX_WEAPON_CHARGE_TIME)
ADDRLP4 16
INDIRI4
CNSTI4 5000
LEI4 $1232
line 3210
;3210:			{
line 3211
;3211:				pm->cmd.buttons &= ~BUTTON_ATTACK;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 3212
;3212:			}
LABELV $1232
line 3213
;3213:		}
LABELV $1230
line 3214
;3214:	}
LABELV $1224
line 3216
;3215:
;3216:	if (pm->ps->forceHandExtend == HANDEXTEND_WEAPONREADY)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 6
NEI4 $1234
line 3217
;3217:	{ //reset into weapon stance
line 3218
;3218:		if (pm->ps->weapon != WP_SABER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
EQI4 $1236
line 3219
;3219:		{ //saber handles its own anims
line 3220
;3220:			if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1)
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1238
ADDRLP4 16
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1238
line 3221
;3221:			{
line 3223
;3222:				//PM_StartTorsoAnim( TORSO_WEAPONREADY4 );
;3223:				PM_StartTorsoAnim( TORSO_RAISEWEAP1);
CNSTI4 958
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3224
;3224:			}
ADDRGP4 $1239
JUMPV
LABELV $1238
line 3226
;3225:			else
;3226:			{
line 3227
;3227:				if (pm->ps->weapon == WP_EMPLACED_GUN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1240
line 3228
;3228:				{
line 3229
;3229:					PM_StartTorsoAnim( BOTH_GUNSIT1 );
CNSTI4 710
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3230
;3230:				}
ADDRGP4 $1241
JUMPV
LABELV $1240
line 3232
;3231:				else
;3232:				{
line 3234
;3233:					//PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
;3234:					PM_StartTorsoAnim( TORSO_RAISEWEAP1);
CNSTI4 958
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3235
;3235:				}
LABELV $1241
line 3236
;3236:			}
LABELV $1239
line 3237
;3237:		}
LABELV $1236
line 3241
;3238:
;3239:		//we now go into a weapon raise anim after every force hand extend.
;3240:		//this is so that my holster-view-weapon-when-hand-extend stuff works.
;3241:		pm->ps->weaponstate = WEAPON_RAISING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 1
ASGNI4
line 3242
;3242:		pm->ps->weaponTime += 250;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 250
ADDI4
ASGNI4
line 3244
;3243:
;3244:		pm->ps->forceHandExtend = HANDEXTEND_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 0
ASGNI4
line 3245
;3245:	}
ADDRGP4 $1235
JUMPV
LABELV $1234
line 3246
;3246:	else if (pm->ps->forceHandExtend != HANDEXTEND_NONE)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1242
line 3247
;3247:	{ //nothing else should be allowed to happen during this time, including weapon fire
line 3248
;3248:		int desiredAnim = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 3250
;3249:
;3250:		switch(pm->ps->forceHandExtend)
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 1
LTI4 $1244
ADDRLP4 20
INDIRI4
CNSTI4 10
GTI4 $1244
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1262-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1262
address $1247
address $1248
address $1249
address $1250
address $1251
address $1244
address $1252
address $1253
address $1260
address $1261
code
line 3251
;3251:		{
LABELV $1247
line 3253
;3252:		case HANDEXTEND_FORCEPUSH:
;3253:			desiredAnim = BOTH_FORCEPUSH;
ADDRLP4 16
CNSTI4 936
ASGNI4
line 3254
;3254:			break;
ADDRGP4 $1245
JUMPV
LABELV $1248
line 3256
;3255:		case HANDEXTEND_FORCEPULL:
;3256:			desiredAnim = BOTH_FORCEPULL;
ADDRLP4 16
CNSTI4 937
ASGNI4
line 3257
;3257:			break;
ADDRGP4 $1245
JUMPV
LABELV $1249
line 3259
;3258:		case HANDEXTEND_FORCEGRIP:
;3259:			desiredAnim = BOTH_FORCEGRIP_HOLD;
ADDRLP4 16
CNSTI4 950
ASGNI4
line 3260
;3260:			break;
ADDRGP4 $1245
JUMPV
LABELV $1250
line 3262
;3261:		case HANDEXTEND_SABERPULL:
;3262:			desiredAnim = BOTH_SABERPULL;
ADDRLP4 16
CNSTI4 946
ASGNI4
line 3263
;3263:			break;
ADDRGP4 $1245
JUMPV
LABELV $1251
line 3265
;3264:		case HANDEXTEND_CHOKE:
;3265:			desiredAnim = BOTH_CHOKE3;//TORSO_CHOKING1;
ADDRLP4 16
CNSTI4 927
ASGNI4
line 3266
;3266:			break;
ADDRGP4 $1245
JUMPV
LABELV $1252
line 3268
;3267:		case HANDEXTEND_DODGE:
;3268:			desiredAnim = pm->ps->forceDodgeAnim;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
ASGNI4
line 3269
;3269:			break;
ADDRGP4 $1245
JUMPV
LABELV $1253
line 3271
;3270:		case HANDEXTEND_KNOCKDOWN:
;3271:			if (pm->ps->forceDodgeAnim)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1254
line 3272
;3272:			{
line 3273
;3273:				if (pm->ps->forceDodgeAnim == 2)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1256
line 3274
;3274:				{
line 3275
;3275:					desiredAnim = BOTH_FORCE_GETUP_B1;
ADDRLP4 16
CNSTI4 843
ASGNI4
line 3276
;3276:				}
ADDRGP4 $1245
JUMPV
LABELV $1256
line 3277
;3277:				else if (pm->ps->forceDodgeAnim == 3)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1258
line 3278
;3278:				{
line 3279
;3279:					desiredAnim = BOTH_FORCE_GETUP_B3;
ADDRLP4 16
CNSTI4 845
ASGNI4
line 3280
;3280:				}
ADDRGP4 $1245
JUMPV
LABELV $1258
line 3282
;3281:				else
;3282:				{
line 3283
;3283:					desiredAnim = BOTH_GETUP1;
ADDRLP4 16
CNSTI4 834
ASGNI4
line 3284
;3284:				}
line 3285
;3285:			}
ADDRGP4 $1245
JUMPV
LABELV $1254
line 3287
;3286:			else
;3287:			{
line 3288
;3288:				desiredAnim = BOTH_KNOCKDOWN1;
ADDRLP4 16
CNSTI4 829
ASGNI4
line 3289
;3289:			}
line 3290
;3290:			break;
ADDRGP4 $1245
JUMPV
LABELV $1260
line 3292
;3291:		case HANDEXTEND_DUELCHALLENGE:
;3292:			desiredAnim = BOTH_ENGAGETAUNT;
ADDRLP4 16
CNSTI4 802
ASGNI4
line 3293
;3293:			break;
ADDRGP4 $1245
JUMPV
LABELV $1261
line 3295
;3294:		case HANDEXTEND_TAUNT:
;3295:			desiredAnim = pm->ps->forceDodgeAnim;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
ASGNI4
line 3296
;3296:			break;
ADDRGP4 $1245
JUMPV
LABELV $1244
line 3298
;3297:		default:
;3298:			desiredAnim = BOTH_FORCEPUSH;
ADDRLP4 16
CNSTI4 936
ASGNI4
line 3299
;3299:			break;
LABELV $1245
line 3302
;3300:		}
;3301:
;3302:		PM_SetAnim(SETANIM_TORSO, desiredAnim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 100);
CNSTI4 1
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 3303
;3303:		pm->ps->torsoTimer = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
CNSTI4 1
ASGNI4
line 3305
;3304:
;3305:		if (pm->ps->forceHandExtend == HANDEXTEND_DODGE || pm->ps->forceHandExtend == HANDEXTEND_KNOCKDOWN /*||
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 7
EQI4 $1266
ADDRLP4 28
INDIRI4
CNSTI4 8
NEI4 $1214
LABELV $1266
line 3307
;3306:			pm->ps->forceHandExtend == HANDEXTEND_CHOKE*/)
;3307:		{ //special case, play dodge anim on whole body
line 3308
;3308:			PM_SetAnim(SETANIM_LEGS, desiredAnim, SETANIM_FLAG_OVERRIDE|SETANIM_FLAG_HOLD, 100);
CNSTI4 2
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
CNSTI4 3
ARGI4
CNSTI4 100
ARGI4
ADDRGP4 PM_SetAnim
CALLV
pop
line 3309
;3309:			pm->ps->legsTimer = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 3310
;3310:		}
line 3312
;3311:
;3312:		return;
ADDRGP4 $1214
JUMPV
LABELV $1242
LABELV $1235
line 3315
;3313:	}
;3314:
;3315:	if (BG_InSpecialJump(pm->ps->legsAnim) ||
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_InSpecialJump
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $1270
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $1270
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 PM_InRollComplete
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
EQI4 $1267
LABELV $1270
line 3318
;3316:		BG_InRoll(pm->ps, pm->ps->legsAnim) ||
;3317:		PM_InRollComplete(pm->ps, pm->ps->legsAnim))
;3318:	{
line 3319
;3319:		pm->cmd.weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
CNSTU1 2
ASGNU1
line 3320
;3320:		pm->ps->weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 3321
;3321:	}
LABELV $1267
line 3323
;3322:
;3323:	if (pm->ps->duelInProgress)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1271
line 3324
;3324:	{
line 3325
;3325:		pm->cmd.weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
CNSTU1 2
ASGNU1
line 3326
;3326:		pm->ps->weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 3328
;3327:
;3328:		if (pm->ps->duelTime >= pm->cmd.serverTime)
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 1288
ADDP4
INDIRI4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $1273
line 3329
;3329:		{
line 3330
;3330:			pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 3331
;3331:			pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 3332
;3332:			pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 3333
;3333:		}
LABELV $1273
line 3334
;3334:	}
LABELV $1271
line 3336
;3335:
;3336:	if (pm->ps->weapon == WP_SABER && pm->ps->saberMove != LS_READY && pm->ps->saberMove != LS_NONE)
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1275
ADDRLP4 40
ADDRLP4 36
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 1
EQI4 $1275
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $1275
line 3337
;3337:	{
line 3338
;3338:		pm->cmd.weapon = WP_SABER; //don't allow switching out mid-attack
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
CNSTU1 2
ASGNU1
line 3339
;3339:	}
LABELV $1275
line 3341
;3340:
;3341:	if (pm->ps->weapon == WP_SABER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1277
line 3342
;3342:	{
line 3344
;3343:		//rww - we still need the item stuff, so we won't return immediately
;3344:		PM_WeaponLightsaber();
ADDRGP4 PM_WeaponLightsaber
CALLV
pop
line 3345
;3345:		killAfterItem = 1;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 3346
;3346:	}
ADDRGP4 $1278
JUMPV
LABELV $1277
line 3348
;3347:	else
;3348:	{
line 3349
;3349:		pm->ps->saberHolstered = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1300
ADDP4
CNSTI4 0
ASGNI4
line 3350
;3350:	}
LABELV $1278
line 3352
;3351:
;3352:	if (pm->ps->weapon == WP_THERMAL ||
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 11
EQI4 $1282
ADDRLP4 44
INDIRI4
CNSTI4 12
EQI4 $1282
ADDRLP4 44
INDIRI4
CNSTI4 13
NEI4 $1279
LABELV $1282
line 3355
;3353:		pm->ps->weapon == WP_TRIP_MINE ||
;3354:		pm->ps->weapon == WP_DET_PACK)
;3355:	{
line 3356
;3356:		if (pm->ps->weapon == WP_THERMAL)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 11
NEI4 $1283
line 3357
;3357:		{
line 3358
;3358:			if ((pm->ps->torsoAnim&~ANIM_TOGGLEBIT) == WeaponAttackAnim[pm->ps->weapon] &&
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ADDRLP4 48
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponAttackAnim
ADDP4
INDIRI4
NEI4 $1284
ADDRLP4 48
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 200
SUBI4
CNSTI4 0
GTI4 $1284
line 3360
;3359:				(pm->ps->weaponTime-200) <= 0)
;3360:			{
line 3361
;3361:				PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3362
;3362:			}
line 3363
;3363:		}
ADDRGP4 $1284
JUMPV
LABELV $1283
line 3365
;3364:		else
;3365:		{
line 3366
;3366:			if ((pm->ps->torsoAnim&~ANIM_TOGGLEBIT) == WeaponAttackAnim[pm->ps->weapon] &&
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ADDRLP4 48
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponAttackAnim
ADDP4
INDIRI4
NEI4 $1287
ADDRLP4 48
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 700
SUBI4
CNSTI4 0
GTI4 $1287
line 3368
;3367:				(pm->ps->weaponTime-700) <= 0)
;3368:			{
line 3369
;3369:				PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3370
;3370:			}
LABELV $1287
line 3371
;3371:		}
LABELV $1284
line 3372
;3372:	}
LABELV $1279
line 3375
;3373:
;3374:	// don't allow attack until all buttons are up
;3375:	if ( pm->ps->pm_flags & PMF_RESPAWNED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $1289
line 3376
;3376:		return;
ADDRGP4 $1214
JUMPV
LABELV $1289
line 3380
;3377:	}
;3378:
;3379:	// ignore if spectator
;3380:	if ( pm->ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 292
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1291
line 3381
;3381:		return;
ADDRGP4 $1214
JUMPV
LABELV $1291
line 3385
;3382:	}
;3383:
;3384:	// check for dead player
;3385:	if ( pm->ps->stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1293
line 3386
;3386:		pm->ps->weapon = WP_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 3387
;3387:		return;
ADDRGP4 $1214
JUMPV
LABELV $1293
line 3391
;3388:	}
;3389:
;3390:	// check for item using
;3391:	if ( pm->cmd.buttons & BUTTON_USE_HOLDABLE ) {
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1295
line 3392
;3392:		if ( ! ( pm->ps->pm_flags & PMF_USE_ITEM_HELD ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $1296
line 3394
;3393:
;3394:			if (!pm->ps->stats[STAT_HOLDABLE_ITEM])
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1299
line 3395
;3395:			{
line 3396
;3396:				return;
ADDRGP4 $1214
JUMPV
LABELV $1299
line 3399
;3397:			}
;3398:
;3399:			if (!PM_ItemUsable(pm->ps, 0))
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 48
ADDRGP4 PM_ItemUsable
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
NEI4 $1301
line 3400
;3400:			{
line 3401
;3401:				pm->ps->pm_flags |= PMF_USE_ITEM_HELD;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 1024
BORI4
ASGNI4
line 3402
;3402:				return;
ADDRGP4 $1214
JUMPV
LABELV $1301
line 3405
;3403:			}
;3404:			else
;3405:			{
line 3406
;3406:				if (pm->ps->stats[STAT_HOLDABLE_ITEMS] & (1 << bg_itemlist[pm->ps->stats[STAT_HOLDABLE_ITEM]].giTag))
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 1
CNSTI4 52
ADDRLP4 52
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1214
line 3407
;3407:				{
line 3408
;3408:					if (bg_itemlist[pm->ps->stats[STAT_HOLDABLE_ITEM]].giTag != HI_BINOCULARS)
CNSTI4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1304
line 3409
;3409:					{ //never use up the binoculars
line 3410
;3410:						pm->ps->stats[STAT_HOLDABLE_ITEMS] -= (1 << bg_itemlist[pm->ps->stats[STAT_HOLDABLE_ITEM]].giTag);
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 56
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 1
CNSTI4 52
ADDRLP4 56
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
LSHI4
SUBI4
ASGNI4
line 3411
;3411:					}
line 3412
;3412:				}
line 3414
;3413:				else
;3414:				{
line 3415
;3415:					return; //this should not happen...
LABELV $1304
line 3418
;3416:				}
;3417:
;3418:				pm->ps->pm_flags |= PMF_USE_ITEM_HELD;
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1024
BORI4
ASGNI4
line 3419
;3419:				PM_AddEvent( EV_USE_ITEM0 + bg_itemlist[pm->ps->stats[STAT_HOLDABLE_ITEM]].giTag );
CNSTI4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 40
ADDI4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3421
;3420:
;3421:				if (bg_itemlist[pm->ps->stats[STAT_HOLDABLE_ITEM]].giTag != HI_BINOCULARS)
CNSTI4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+40
ADDP4
INDIRI4
CNSTI4 5
EQI4 $1214
line 3422
;3422:				{
line 3423
;3423:					pm->ps->stats[STAT_HOLDABLE_ITEM] = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
CNSTI4 0
ASGNI4
line 3424
;3424:					BG_CycleInven(pm->ps, 1);
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 BG_CycleInven
CALLV
pop
line 3425
;3425:				}
line 3426
;3426:			}
line 3427
;3427:			return;
ADDRGP4 $1214
JUMPV
line 3429
;3428:		}
;3429:	} else {
LABELV $1295
line 3430
;3430:		pm->ps->pm_flags &= ~PMF_USE_ITEM_HELD;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -1025
BANDI4
ASGNI4
line 3431
;3431:	}
LABELV $1296
line 3433
;3432:
;3433:	if (pm->ps->weapon == WP_SABER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1314
line 3434
;3434:	{ //we can't toggle zoom while using saber (for obvious reasons) so make sure it's always off
line 3435
;3435:		pm->ps->zoomMode = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 3436
;3436:		pm->ps->zoomFov = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 0
ASGNF4
line 3437
;3437:		pm->ps->zoomLocked = qfalse;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 3438
;3438:		pm->ps->zoomLockTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1336
ADDP4
CNSTI4 0
ASGNI4
line 3439
;3439:	}
LABELV $1314
line 3441
;3440:
;3441:	if (killAfterItem)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1316
line 3442
;3442:	{
line 3443
;3443:		return;
ADDRGP4 $1214
JUMPV
LABELV $1316
line 3447
;3444:	}
;3445:
;3446:	// make weapon function
;3447:	if ( pm->ps->weaponTime > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1318
line 3448
;3448:		pm->ps->weaponTime -= pml.msec;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 3449
;3449:	}
LABELV $1318
line 3451
;3450:
;3451:	if (pm->ps->isJediMaster && pm->ps->emplacedIndex)
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 52
CNSTI4 0
ASGNI4
ADDRLP4 48
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1321
ADDRLP4 48
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1321
line 3452
;3452:	{
line 3453
;3453:		pm->ps->emplacedIndex = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 0
ASGNI4
line 3454
;3454:	}
LABELV $1321
line 3456
;3455:
;3456:	if (pm->ps->duelInProgress && pm->ps->emplacedIndex)
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 60
CNSTI4 0
ASGNI4
ADDRLP4 56
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $1323
ADDRLP4 56
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $1323
line 3457
;3457:	{
line 3458
;3458:		pm->ps->emplacedIndex = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 0
ASGNI4
line 3459
;3459:	}
LABELV $1323
line 3461
;3460:
;3461:	if (pm->ps->weapon == WP_EMPLACED_GUN && pm->ps->emplacedIndex)
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1325
ADDRLP4 64
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1325
line 3462
;3462:	{
line 3463
;3463:		pm->cmd.weapon = WP_EMPLACED_GUN; //No switch for you!
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
CNSTU1 14
ASGNU1
line 3464
;3464:		PM_StartTorsoAnim( BOTH_GUNSIT1 );
CNSTI4 710
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3465
;3465:	}
LABELV $1325
line 3467
;3466:
;3467:	if (pm->ps->isJediMaster || pm->ps->duelInProgress)
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRLP4 68
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $1329
ADDRLP4 68
INDIRP4
CNSTI4 1292
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
EQI4 $1327
LABELV $1329
line 3468
;3468:	{
line 3469
;3469:		pm->cmd.weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
CNSTU1 2
ASGNU1
line 3470
;3470:		pm->ps->weapon = WP_SABER;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 3472
;3471:
;3472:		if (pm->ps->isJediMaster)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1330
line 3473
;3473:		{
line 3474
;3474:			pm->ps->stats[STAT_WEAPONS] = (1 << WP_SABER);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
CNSTI4 4
ASGNI4
line 3475
;3475:		}
LABELV $1330
line 3476
;3476:	}
LABELV $1327
line 3478
;3477:
;3478:	amount = weaponData[pm->ps->weapon].energyPerShot;
ADDRLP4 4
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+8
ADDP4
INDIRI4
ASGNI4
line 3481
;3479:
;3480:	// take an ammo away if not infinite
;3481:	if ( pm->ps->weapon != WP_NONE &&
ADDRLP4 76
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 76
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 84
ADDRLP4 80
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 88
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ADDRLP4 88
INDIRI4
EQI4 $1333
ADDRLP4 84
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 24
ADDP4
INDIRU1
CVUI4 1
NEI4 $1333
ADDRLP4 80
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRLP4 88
INDIRI4
LEI4 $1335
ADDRLP4 80
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1333
LABELV $1335
line 3484
;3482:		pm->ps->weapon == pm->cmd.weapon &&
;3483:		(pm->ps->weaponTime <= 0 || pm->ps->weaponstate != WEAPON_FIRING) )
;3484:	{
line 3485
;3485:		if ( pm->ps->ammo[ weaponData[pm->ps->weapon].ammoIndex ] != -1 )
ADDRLP4 92
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
CNSTI4 56
ADDRLP4 92
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 92
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1336
line 3486
;3486:		{
line 3488
;3487:			// enough energy to fire this weapon?
;3488:			if (pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] < weaponData[pm->ps->weapon].energyPerShot &&
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
CNSTI4 56
ADDRLP4 96
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 104
ADDRLP4 100
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 96
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 104
INDIRI4
ADDRLP4 100
INDIRI4
ADDRGP4 weaponData+8
ADDP4
INDIRI4
GEI4 $1338
ADDRLP4 104
INDIRI4
ADDRLP4 100
INDIRI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
GEI4 $1338
line 3490
;3489:				pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] < weaponData[pm->ps->weapon].altEnergyPerShot) 
;3490:			{ //the weapon is out of ammo essentially because it cannot fire primary or secondary, so do the switch
line 3492
;3491:			  //regardless of if the player is attacking or not
;3492:				PM_AddEventWithParm( EV_NOAMMO, WP_NUM_WEAPONS+pm->ps->weapon );
CNSTI4 22
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 16
ADDI4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3494
;3493:
;3494:				if (pm->ps->weaponTime < 500)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 500
GEI4 $1214
line 3495
;3495:				{
line 3496
;3496:					pm->ps->weaponTime += 500;
ADDRLP4 108
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3497
;3497:				}
line 3498
;3498:				return;
ADDRGP4 $1214
JUMPV
LABELV $1338
line 3501
;3499:			}
;3500:
;3501:			if (pm->ps->weapon == WP_DET_PACK && !pm->ps->hasDetPackPlanted && pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] < 1)
ADDRLP4 108
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 108
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 13
NEI4 $1344
ADDRLP4 108
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1344
CNSTI4 56
ADDRLP4 112
INDIRI4
MULI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 108
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
CNSTI4 1
GEI4 $1344
line 3502
;3502:			{
line 3503
;3503:				PM_AddEventWithParm( EV_NOAMMO, WP_NUM_WEAPONS+pm->ps->weapon );
CNSTI4 22
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 16
ADDI4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3505
;3504:
;3505:				if (pm->ps->weaponTime < 500)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 500
GEI4 $1214
line 3506
;3506:				{
line 3507
;3507:					pm->ps->weaponTime += 500;
ADDRLP4 116
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3508
;3508:				}
line 3509
;3509:				return;
ADDRGP4 $1214
JUMPV
LABELV $1344
line 3511
;3510:			}
;3511:		}
LABELV $1336
line 3512
;3512:	}
LABELV $1333
line 3517
;3513:
;3514:	// check for weapon change
;3515:	// can't change if weapon is firing, but can change
;3516:	// again if lowering or raising
;3517:	if ( pm->ps->weaponTime <= 0 || pm->ps->weaponstate != WEAPON_FIRING ) {
ADDRLP4 92
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1350
ADDRLP4 92
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1348
LABELV $1350
line 3518
;3518:		if ( pm->ps->weapon != pm->cmd.weapon ) {
ADDRLP4 96
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 24
ADDP4
INDIRU1
CVUI4 1
EQI4 $1351
line 3519
;3519:			PM_BeginWeaponChange( pm->cmd.weapon );
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRGP4 PM_BeginWeaponChange
CALLV
pop
line 3520
;3520:		}
LABELV $1351
line 3521
;3521:	}
LABELV $1348
line 3523
;3522:
;3523:	if ( pm->ps->weaponTime > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1353
line 3524
;3524:		return;
ADDRGP4 $1214
JUMPV
LABELV $1353
line 3528
;3525:	}
;3526:
;3527:	// change weapon if time
;3528:	if ( pm->ps->weaponstate == WEAPON_DROPPING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1355
line 3529
;3529:		PM_FinishWeaponChange();
ADDRGP4 PM_FinishWeaponChange
CALLV
pop
line 3530
;3530:		return;
ADDRGP4 $1214
JUMPV
LABELV $1355
line 3533
;3531:	}
;3532:
;3533:	if ( pm->ps->weaponstate == WEAPON_RAISING )	//Brackets
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1357
line 3534
;3534:	{
line 3535
;3535:		pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 0
ASGNI4
line 3536
;3536:		if ( pm->ps->weapon == WP_SABER )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1359
line 3537
;3537:		{
line 3538
;3538:			PM_StartTorsoAnim( PM_GetSaberStance() );
ADDRLP4 96
ADDRGP4 PM_GetSaberStance
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3539
;3539:		}
ADDRGP4 $1214
JUMPV
LABELV $1359
line 3541
;3540:		else
;3541:		{
line 3542
;3542:			if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1)
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1361
ADDRLP4 96
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1361
line 3543
;3543:			{
line 3544
;3544:				PM_StartTorsoAnim( TORSO_WEAPONREADY4 );
CNSTI4 965
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3545
;3545:			}
ADDRGP4 $1214
JUMPV
LABELV $1361
line 3547
;3546:			else
;3547:			{
line 3548
;3548:				if (pm->ps->weapon == WP_EMPLACED_GUN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1363
line 3549
;3549:				{
line 3550
;3550:					PM_StartTorsoAnim( BOTH_GUNSIT1 );
CNSTI4 710
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3551
;3551:				}
ADDRGP4 $1214
JUMPV
LABELV $1363
line 3553
;3552:				else
;3553:				{
line 3554
;3554:					PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3555
;3555:				}
line 3556
;3556:			}
line 3557
;3557:		}
line 3558
;3558:		return;
ADDRGP4 $1214
JUMPV
LABELV $1357
line 3561
;3559:	}
;3560:
;3561:	if (((pm->ps->torsoAnim & ~ANIM_TOGGLEBIT) == TORSO_WEAPONREADY4 ||
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 965
EQI4 $1367
ADDRLP4 96
INDIRI4
CNSTI4 109
NEI4 $1365
LABELV $1367
ADDRLP4 100
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1368
ADDRLP4 100
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1365
LABELV $1368
line 3564
;3562:		(pm->ps->torsoAnim & ~ANIM_TOGGLEBIT) == BOTH_ATTACK4) &&
;3563:		(pm->ps->weapon != WP_DISRUPTOR || pm->ps->zoomMode != 1))
;3564:	{
line 3565
;3565:		if (pm->ps->weapon == WP_EMPLACED_GUN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1369
line 3566
;3566:		{
line 3567
;3567:			PM_StartTorsoAnim( BOTH_GUNSIT1 );
CNSTI4 710
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3568
;3568:		}
ADDRGP4 $1366
JUMPV
LABELV $1369
line 3570
;3569:		else
;3570:		{
line 3571
;3571:			PM_StartTorsoAnim( WeaponReadyAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponReadyAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3572
;3572:		}
line 3573
;3573:	}
ADDRGP4 $1366
JUMPV
LABELV $1365
line 3574
;3574:	else if (((pm->ps->torsoAnim & ~ANIM_TOGGLEBIT) != TORSO_WEAPONREADY4 &&
ADDRLP4 104
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 104
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 965
EQI4 $1371
ADDRLP4 108
INDIRI4
CNSTI4 109
EQI4 $1371
ADDRLP4 104
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1371
ADDRLP4 104
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1371
line 3577
;3575:		(pm->ps->torsoAnim & ~ANIM_TOGGLEBIT) != BOTH_ATTACK4) &&
;3576:		(pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1))
;3577:	{
line 3578
;3578:		PM_StartTorsoAnim( TORSO_WEAPONREADY4 );
CNSTI4 965
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3579
;3579:	}
LABELV $1371
LABELV $1366
line 3582
;3580:
;3581:
;3582:	if (pm->ps->weapon != WP_ROCKET_LAUNCHER)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 10
EQI4 $1373
line 3583
;3583:	{
line 3584
;3584:		pm->ps->rocketLockIndex = MAX_CLIENTS;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 580
ADDP4
CNSTI4 32
ASGNI4
line 3585
;3585:		pm->ps->rocketLockTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 588
ADDP4
CNSTF4 0
ASGNF4
line 3586
;3586:		pm->ps->rocketTargetTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 592
ADDP4
CNSTF4 0
ASGNF4
line 3587
;3587:	}
LABELV $1373
line 3589
;3588:
;3589:	if ( PM_DoChargedWeapons())
ADDRLP4 112
ADDRGP4 PM_DoChargedWeapons
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
EQI4 $1375
line 3590
;3590:	{
line 3592
;3591:		// In some cases the charged weapon code may want us to short circuit the rest of the firing code
;3592:		return;
ADDRGP4 $1214
JUMPV
LABELV $1375
line 3596
;3593:	}
;3594:
;3595:	// check for fire
;3596:	if ( ! (pm->cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK))) 
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 129
BANDI4
CNSTI4 0
NEI4 $1377
line 3597
;3597:	{
line 3598
;3598:		pm->ps->weaponTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 0
ASGNI4
line 3599
;3599:		pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 0
ASGNI4
line 3600
;3600:		return;
ADDRGP4 $1214
JUMPV
LABELV $1377
line 3603
;3601:	}
;3602:
;3603:	if (pm->ps->weapon == WP_EMPLACED_GUN)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1379
line 3604
;3604:	{
line 3605
;3605:		addTime = weaponData[pm->ps->weapon].fireTime;
ADDRLP4 0
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+12
ADDP4
INDIRI4
ASGNI4
line 3606
;3606:		pm->ps->weaponTime += addTime;
ADDRLP4 116
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 3607
;3607:		PM_AddEvent( EV_FIRE_WEAPON );
CNSTI4 24
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3608
;3608:		return;
ADDRGP4 $1214
JUMPV
LABELV $1379
line 3611
;3609:	}
;3610:
;3611:	if (pm->ps->weapon == WP_DISRUPTOR &&
ADDRLP4 116
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 116
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1382
ADDRLP4 124
CNSTI4 0
ASGNI4
ADDRLP4 116
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 124
INDIRI4
EQI4 $1382
ADDRLP4 120
INDIRP4
CNSTI4 1328
ADDP4
INDIRI4
ADDRLP4 124
INDIRI4
NEI4 $1382
line 3614
;3612:		(pm->cmd.buttons & BUTTON_ALT_ATTACK) &&
;3613:		!pm->ps->zoomLocked)
;3614:	{
line 3615
;3615:		return;
ADDRGP4 $1214
JUMPV
LABELV $1382
line 3618
;3616:	}
;3617:
;3618:	if (pm->ps->weapon == WP_DISRUPTOR &&
ADDRLP4 128
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 128
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1384
ADDRLP4 128
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1384
ADDRLP4 132
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1384
line 3621
;3619:		(pm->cmd.buttons & BUTTON_ALT_ATTACK) &&
;3620:		pm->ps->zoomMode == 2)
;3621:	{ //can't use disruptor secondary while zoomed binoculars
line 3622
;3622:		return;
ADDRGP4 $1214
JUMPV
LABELV $1384
line 3625
;3623:	}
;3624:
;3625:	if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode == 1)
ADDRLP4 136
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 136
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1386
ADDRLP4 136
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1386
line 3626
;3626:	{
line 3627
;3627:		PM_StartTorsoAnim( BOTH_ATTACK4 );
CNSTI4 109
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3628
;3628:	}
ADDRGP4 $1387
JUMPV
LABELV $1386
line 3630
;3629:	else
;3630:	{
line 3631
;3631:		PM_StartTorsoAnim( WeaponAttackAnim[pm->ps->weapon] );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 WeaponAttackAnim
ADDP4
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 3632
;3632:	}
LABELV $1387
line 3634
;3633:
;3634:	if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1388
line 3635
;3635:	{
line 3636
;3636:		amount = weaponData[pm->ps->weapon].altEnergyPerShot;
ADDRLP4 4
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
ASGNI4
line 3637
;3637:	}
ADDRGP4 $1389
JUMPV
LABELV $1388
line 3639
;3638:	else
;3639:	{
line 3640
;3640:		amount = weaponData[pm->ps->weapon].energyPerShot;
ADDRLP4 4
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+8
ADDP4
INDIRI4
ASGNI4
line 3641
;3641:	}
LABELV $1389
line 3643
;3642:
;3643:	pm->ps->weaponstate = WEAPON_FIRING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 3
ASGNI4
line 3646
;3644:
;3645:	// take an ammo away if not infinite
;3646:	if ( pm->ps->ammo[ weaponData[pm->ps->weapon].ammoIndex ] != -1 )
ADDRLP4 140
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
CNSTI4 56
ADDRLP4 140
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 140
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
CNSTI4 -1
EQI4 $1392
line 3647
;3647:	{
line 3649
;3648:		// enough energy to fire this weapon?
;3649:		if ((pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] - amount) >= 0) 
ADDRLP4 144
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
CNSTI4 56
ADDRLP4 144
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 144
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
CNSTI4 0
LTI4 $1394
line 3650
;3650:		{
line 3651
;3651:			pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] -= amount;
ADDRLP4 148
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 152
CNSTI4 56
ADDRLP4 148
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 148
INDIRP4
CNSTI4 408
ADDP4
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 3652
;3652:		}
ADDRGP4 $1395
JUMPV
LABELV $1394
line 3654
;3653:		else	// Not enough energy
;3654:		{
line 3656
;3655:			// Switch weapons
;3656:			if (pm->ps->weapon != WP_DET_PACK || !pm->ps->hasDetPackPlanted)
ADDRLP4 148
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 13
NEI4 $1398
ADDRLP4 148
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1214
LABELV $1398
line 3657
;3657:			{
line 3658
;3658:				PM_AddEventWithParm( EV_NOAMMO, WP_NUM_WEAPONS+pm->ps->weapon );
CNSTI4 22
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 16
ADDI4
ARGI4
ADDRGP4 PM_AddEventWithParm
CALLV
pop
line 3659
;3659:				if (pm->ps->weaponTime < 500)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 500
GEI4 $1214
line 3660
;3660:				{
line 3661
;3661:					pm->ps->weaponTime += 500;
ADDRLP4 152
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 3662
;3662:				}
line 3663
;3663:			}
line 3664
;3664:			return;
ADDRGP4 $1214
JUMPV
LABELV $1395
line 3666
;3665:		}
;3666:	}
LABELV $1392
line 3668
;3667:
;3668:	if ( pm->cmd.buttons & BUTTON_ALT_ATTACK ) 	{
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1401
line 3669
;3669:		if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->zoomMode != 1)
ADDRLP4 144
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1403
ADDRLP4 144
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1403
line 3670
;3670:		{
line 3671
;3671:			PM_AddEvent( EV_FIRE_WEAPON );
CNSTI4 24
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3672
;3672:			addTime = weaponData[pm->ps->weapon].fireTime;
ADDRLP4 0
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+12
ADDP4
INDIRI4
ASGNI4
line 3673
;3673:		}
ADDRGP4 $1402
JUMPV
LABELV $1403
line 3675
;3674:		else
;3675:		{
line 3676
;3676:			PM_AddEvent( EV_ALT_FIRE );
CNSTI4 25
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3677
;3677:			addTime = weaponData[pm->ps->weapon].altFireTime;
ADDRLP4 0
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+24
ADDP4
INDIRI4
ASGNI4
line 3678
;3678:		}
line 3679
;3679:	}
ADDRGP4 $1402
JUMPV
LABELV $1401
line 3680
;3680:	else {
line 3681
;3681:		PM_AddEvent( EV_FIRE_WEAPON );
CNSTI4 24
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3682
;3682:		addTime = weaponData[pm->ps->weapon].fireTime;
ADDRLP4 0
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ADDRGP4 weaponData+12
ADDP4
INDIRI4
ASGNI4
line 3683
;3683:	}
LABELV $1402
line 3685
;3684:
;3685:	if ( pm->ps->powerups[PW_HASTE] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 356
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1408
line 3686
;3686:		addTime /= 1.3;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1067869798
DIVF4
CVFI4 4
ASGNI4
line 3687
;3687:	}
LABELV $1408
line 3689
;3688:
;3689:	if (pm->ps->fd.forcePowersActive & (1 << FP_RAGE))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1410
line 3690
;3690:	{
line 3691
;3691:		addTime *= 0.75;
ADDRLP4 0
CNSTF4 1061158912
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 3692
;3692:	}
ADDRGP4 $1411
JUMPV
LABELV $1410
line 3693
;3693:	else if (pm->ps->fd.forceRageRecoveryTime > pm->cmd.serverTime)
ADDRLP4 144
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
INDIRP4
CNSTI4 1160
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LEI4 $1412
line 3694
;3694:	{
line 3695
;3695:		addTime *= 1.5;
ADDRLP4 0
CNSTF4 1069547520
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 3696
;3696:	}
LABELV $1412
LABELV $1411
line 3698
;3697:
;3698:	pm->ps->weaponTime += addTime;
ADDRLP4 148
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 3699
;3699:}
LABELV $1214
endproc PM_Weapon 156 16
proc PM_Animate 12 4
line 3707
;3700:
;3701:/*
;3702:================
;3703:PM_Animate
;3704:================
;3705:*/
;3706:
;3707:static void PM_Animate( void ) {
line 3708
;3708:	if ( pm->cmd.buttons & BUTTON_GESTURE ) {
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $1415
line 3709
;3709:		if ( pm->ps->torsoTimer < 1 && pm->ps->forceHandExtend == HANDEXTEND_NONE &&
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 1
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $1417
ADDRLP4 0
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1417
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $1417
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
GEI4 $1417
line 3710
;3710:			pm->ps->legsTimer < 1 && pm->ps->weaponTime < 1 ) {
line 3716
;3711:			/*
;3712:			PM_StartTorsoAnim( BOTH_TALKGESTURE3 );
;3713:			pm->ps->torsoTimer = TIMER_GESTURE;
;3714:			*/
;3715:
;3716:			pm->ps->forceHandExtend = HANDEXTEND_TAUNT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1236
ADDP4
CNSTI4 10
ASGNI4
line 3719
;3717:
;3718:			//FIXME: random taunt anims?
;3719:			pm->ps->forceDodgeAnim = BOTH_ENGAGETAUNT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 802
ASGNI4
line 3721
;3720:
;3721:			pm->ps->forceHandExtendTime = pm->cmd.serverTime + 1000;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 1240
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 3723
;3722:			
;3723:			pm->ps->weaponTime = 100;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 100
ASGNI4
line 3725
;3724:
;3725:			PM_AddEvent( EV_TAUNT );
CNSTI4 102
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3726
;3726:		}
LABELV $1417
line 3762
;3727:#if 0
;3728:// Here's an interesting bit.  The bots in TA used buttons to do additional gestures.
;3729:// I ripped them out because I didn't want too many buttons given the fact that I was already adding some for JK2.
;3730:// We can always add some back in if we want though.
;3731:	} else if ( pm->cmd.buttons & BUTTON_GETFLAG ) {
;3732:		if ( pm->ps->torsoTimer == 0 ) {
;3733:			PM_StartTorsoAnim( TORSO_GETFLAG );
;3734:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3735:		}
;3736:	} else if ( pm->cmd.buttons & BUTTON_GUARDBASE ) {
;3737:		if ( pm->ps->torsoTimer == 0 ) {
;3738:			PM_StartTorsoAnim( TORSO_GUARDBASE );
;3739:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3740:		}
;3741:	} else if ( pm->cmd.buttons & BUTTON_PATROL ) {
;3742:		if ( pm->ps->torsoTimer == 0 ) {
;3743:			PM_StartTorsoAnim( TORSO_PATROL );
;3744:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3745:		}
;3746:	} else if ( pm->cmd.buttons & BUTTON_FOLLOWME ) {
;3747:		if ( pm->ps->torsoTimer == 0 ) {
;3748:			PM_StartTorsoAnim( TORSO_FOLLOWME );
;3749:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3750:		}
;3751:	} else if ( pm->cmd.buttons & BUTTON_AFFIRMATIVE ) {
;3752:		if ( pm->ps->torsoTimer == 0 ) {
;3753:			PM_StartTorsoAnim( TORSO_AFFIRMATIVE);
;3754:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3755:		}
;3756:	} else if ( pm->cmd.buttons & BUTTON_NEGATIVE ) {
;3757:		if ( pm->ps->torsoTimer == 0 ) {
;3758:			PM_StartTorsoAnim( TORSO_NEGATIVE );
;3759:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
;3760:		}
;3761:#endif //
;3762:	}
LABELV $1415
line 3763
;3763:}
LABELV $1414
endproc PM_Animate 12 4
proc PM_DropTimers 4 0
line 3771
;3764:
;3765:
;3766:/*
;3767:================
;3768:PM_DropTimers
;3769:================
;3770:*/
;3771:static void PM_DropTimers( void ) {
line 3773
;3772:	// drop misc timing counter
;3773:	if ( pm->ps->pm_time ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1420
line 3774
;3774:		if ( pml.msec >= pm->ps->pm_time ) {
ADDRGP4 pml+40
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LTI4 $1422
line 3775
;3775:			pm->ps->pm_flags &= ~PMF_ALL_TIMES;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -353
BANDI4
ASGNI4
line 3776
;3776:			pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 3777
;3777:		} else {
ADDRGP4 $1423
JUMPV
LABELV $1422
line 3778
;3778:			pm->ps->pm_time -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 3779
;3779:		}
LABELV $1423
line 3780
;3780:	}
LABELV $1420
line 3783
;3781:
;3782:	// drop animation counter
;3783:	if ( pm->ps->legsTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1426
line 3784
;3784:		pm->ps->legsTimer -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 3785
;3785:		if ( pm->ps->legsTimer < 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1429
line 3786
;3786:			pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 3787
;3787:		}
LABELV $1429
line 3788
;3788:	}
LABELV $1426
line 3790
;3789:
;3790:	if ( pm->ps->torsoTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
LEI4 $1431
line 3791
;3791:		pm->ps->torsoTimer -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 3792
;3792:		if ( pm->ps->torsoTimer < 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1434
line 3793
;3793:			pm->ps->torsoTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
CNSTI4 0
ASGNI4
line 3794
;3794:		}
LABELV $1434
line 3795
;3795:	}
LABELV $1431
line 3796
;3796:}
LABELV $1419
endproc PM_DropTimers 4 0
export PM_UpdateViewAngles
proc PM_UpdateViewAngles 24 0
line 3806
;3797:
;3798:/*
;3799:================
;3800:PM_UpdateViewAngles
;3801:
;3802:This can be used as another entry point when only the viewangles
;3803:are being updated isntead of a full move
;3804:================
;3805:*/
;3806:void PM_UpdateViewAngles( playerState_t *ps, const usercmd_t *cmd ) {
line 3810
;3807:	short		temp;
;3808:	int		i;
;3809:
;3810:	if ( ps->pm_type == PM_INTERMISSION || ps->pm_type == PM_SPINTERMISSION) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 6
EQI4 $1439
ADDRLP4 8
INDIRI4
CNSTI4 7
NEI4 $1437
LABELV $1439
line 3811
;3811:		return;		// no view changes at all
ADDRGP4 $1436
JUMPV
LABELV $1437
line 3814
;3812:	}
;3813:
;3814:	if ( ps->pm_type != PM_SPECTATOR && ps->stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1440
ADDRLP4 12
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1440
line 3815
;3815:		return;		// no view changes at all
ADDRGP4 $1436
JUMPV
LABELV $1440
line 3819
;3816:	}
;3817:
;3818:	// circularly clamp the angles with deltas
;3819:	for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1442
line 3820
;3820:		temp = cmd->angles[i] + ps->delta_angles[i];
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDP4
INDIRI4
ADDI4
CVII2 4
ASGNI2
line 3821
;3821:		if ( i == PITCH ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1446
line 3823
;3822:			// don't let the player look up or down more than 90 degrees
;3823:			if ( temp > 16000 ) {
ADDRLP4 4
INDIRI2
CVII4 2
CNSTI4 16000
LEI4 $1448
line 3824
;3824:				ps->delta_angles[i] = 16000 - cmd->angles[i];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDP4
CNSTI4 16000
ADDRLP4 20
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3825
;3825:				temp = 16000;
ADDRLP4 4
CNSTI2 16000
ASGNI2
line 3826
;3826:			} else if ( temp < -16000 ) {
ADDRGP4 $1449
JUMPV
LABELV $1448
ADDRLP4 4
INDIRI2
CVII4 2
CNSTI4 -16000
GEI4 $1450
line 3827
;3827:				ps->delta_angles[i] = -16000 - cmd->angles[i];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ADDP4
CNSTI4 -16000
ADDRLP4 20
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3828
;3828:				temp = -16000;
ADDRLP4 4
CNSTI2 -16000
ASGNI2
line 3829
;3829:			}
LABELV $1450
LABELV $1449
line 3830
;3830:		}
LABELV $1446
line 3831
;3831:		ps->viewangles[i] = SHORT2ANGLE(temp);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 156
ADDP4
ADDP4
CNSTF4 1001652224
ADDRLP4 4
INDIRI2
CVII4 2
CVIF4 4
MULF4
ASGNF4
line 3832
;3832:	}
LABELV $1443
line 3819
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1442
line 3834
;3833:
;3834:}
LABELV $1436
endproc PM_UpdateViewAngles 24 0
export PM_AdjustAttackStates
proc PM_AdjustAttackStates 56 4
line 3839
;3835:
;3836://-------------------------------------------
;3837:void PM_AdjustAttackStates( pmove_t *pm )
;3838://-------------------------------------------
;3839:{
line 3843
;3840:	int amount;
;3841:
;3842:	// get ammo usage
;3843:	if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1453
line 3844
;3844:	{
line 3845
;3845:		amount = pm->ps->ammo[weaponData[ pm->ps->weapon ].ammoIndex] - weaponData[pm->ps->weapon].altEnergyPerShot;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 56
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3846
;3846:	}
ADDRGP4 $1454
JUMPV
LABELV $1453
line 3848
;3847:	else
;3848:	{
line 3849
;3849:		amount = pm->ps->ammo[weaponData[ pm->ps->weapon ].ammoIndex] - weaponData[pm->ps->weapon].energyPerShot;
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTI4 56
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDRGP4 weaponData+8
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3850
;3850:	}
LABELV $1454
line 3853
;3851:
;3852:	// disruptor alt-fire should toggle the zoom mode, but only bother doing this for the player?
;3853:	if ( pm->ps->weapon == WP_DISRUPTOR && pm->ps->weaponstate == WEAPON_READY )
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1457
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1457
line 3854
;3854:	{
line 3855
;3855:		if ( !(pm->ps->eFlags & EF_ALT_FIRING) && (pm->cmd.buttons & BUTTON_ALT_ATTACK) /*&&
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 12
INDIRI4
NEI4 $1459
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 12
INDIRI4
EQI4 $1459
line 3857
;3856:			pm->cmd.upmove <= 0 && !pm->cmd.forwardmove && !pm->cmd.rightmove*/)
;3857:		{
line 3859
;3858:			// We just pressed the alt-fire key
;3859:			if ( !pm->ps->zoomMode )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1461
line 3860
;3860:			{
line 3862
;3861:				// not already zooming, so do it now
;3862:				pm->ps->zoomMode = 1;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 1
ASGNI4
line 3863
;3863:				pm->ps->zoomLocked = qfalse;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 3864
;3864:				pm->ps->zoomFov = 80.0f;//cg_fov.value;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 1117782016
ASGNF4
line 3865
;3865:				pm->ps->zoomLockTime = pm->cmd.serverTime + 50;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRP4
CNSTI4 1336
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 3866
;3866:				PM_AddEvent(EV_DISRUPTOR_ZOOMSOUND);
CNSTI4 35
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3867
;3867:			}
ADDRGP4 $1460
JUMPV
LABELV $1461
line 3868
;3868:			else if (pm->ps->zoomMode == 1 && pm->ps->zoomLockTime < pm->cmd.serverTime)
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1460
ADDRLP4 20
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1460
line 3869
;3869:			{ //check for == 1 so we can't turn binoculars off with disruptor alt fire
line 3871
;3870:				// already zooming, so must be wanting to turn it off
;3871:				pm->ps->zoomMode = 0;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 3872
;3872:				pm->ps->zoomTime = pm->ps->commandTime;
ADDRLP4 24
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 1324
ADDP4
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
line 3873
;3873:				pm->ps->zoomLocked = qfalse;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 3874
;3874:				PM_AddEvent(EV_DISRUPTOR_ZOOMSOUND);
CNSTI4 35
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3875
;3875:			}
line 3876
;3876:		}
ADDRGP4 $1460
JUMPV
LABELV $1459
line 3877
;3877:		else if ( !(pm->cmd.buttons & BUTTON_ALT_ATTACK ) && pm->ps->zoomLockTime < pm->cmd.serverTime)
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
NEI4 $1465
ADDRLP4 16
INDIRP4
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1465
line 3878
;3878:		{
line 3880
;3879:			// Not pressing zoom any more
;3880:			if ( pm->ps->zoomMode )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1467
line 3881
;3881:			{
line 3882
;3882:				if (pm->ps->zoomMode == 1 && !pm->ps->zoomLocked)
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1469
ADDRLP4 20
INDIRP4
CNSTI4 1328
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1469
line 3883
;3883:				{ //approximate what level the client should be zoomed at based on how long zoom was held
line 3884
;3884:					pm->ps->zoomFov = ((pm->cmd.serverTime+50) - pm->ps->zoomLockTime) * 0.035f;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 1024416809
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 50
ADDI4
ADDRLP4 28
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 3885
;3885:					if (pm->ps->zoomFov > 50)
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
INDIRF4
CNSTF4 1112014848
LEF4 $1471
line 3886
;3886:					{
line 3887
;3887:						pm->ps->zoomFov = 50;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 1112014848
ASGNF4
line 3888
;3888:					}
LABELV $1471
line 3889
;3889:					if (pm->ps->zoomFov < 1)
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
INDIRF4
CNSTF4 1065353216
GEF4 $1473
line 3890
;3890:					{
line 3891
;3891:						pm->ps->zoomFov = 1;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1332
ADDP4
CNSTF4 1065353216
ASGNF4
line 3892
;3892:					}
LABELV $1473
line 3893
;3893:				}
LABELV $1469
line 3895
;3894:				// were zooming in, so now lock the zoom
;3895:				pm->ps->zoomLocked = qtrue;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 1
ASGNI4
line 3896
;3896:			}
LABELV $1467
line 3897
;3897:		}
LABELV $1465
LABELV $1460
line 3908
;3898:		//This seemed like a good idea, but apparently it confuses people. So disabled for now.
;3899:		/*
;3900:		else if (!(pm->ps->eFlags & EF_ALT_FIRING) && (pm->cmd.buttons & BUTTON_ALT_ATTACK) &&
;3901:			(pm->cmd.upmove > 0 || pm->cmd.forwardmove || pm->cmd.rightmove))
;3902:		{ //if you try to zoom while moving, just convert it into a primary attack
;3903:			pm->cmd.buttons &= ~BUTTON_ALT_ATTACK;
;3904:			pm->cmd.buttons |= BUTTON_ATTACK;
;3905:		}
;3906:		*/
;3907:
;3908:		if (pm->cmd.upmove > 0 || pm->cmd.forwardmove || pm->cmd.rightmove)
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
GTI4 $1478
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
NEI4 $1478
ADDRLP4 20
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 24
INDIRI4
EQI4 $1475
LABELV $1478
line 3909
;3909:		{
line 3910
;3910:			if (pm->ps->zoomMode == 1 && pm->ps->zoomLockTime < pm->cmd.serverTime)
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1479
ADDRLP4 32
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1479
line 3911
;3911:			{ //check for == 1 so we can't turn binoculars off with disruptor alt fire
line 3912
;3912:				pm->ps->zoomMode = 0;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 3913
;3913:				pm->ps->zoomTime = pm->ps->commandTime;
ADDRLP4 36
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 1324
ADDP4
ADDRLP4 36
INDIRP4
INDIRI4
ASGNI4
line 3914
;3914:				pm->ps->zoomLocked = qfalse;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 3915
;3915:				PM_AddEvent(EV_DISRUPTOR_ZOOMSOUND);
CNSTI4 35
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3916
;3916:			}
LABELV $1479
line 3917
;3917:		}
LABELV $1475
line 3919
;3918:
;3919:		if ( pm->cmd.buttons & BUTTON_ATTACK )
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1481
line 3920
;3920:		{
line 3923
;3921:			// If we are zoomed, we should switch the ammo usage to the alt-fire, otherwise, we'll
;3922:			//	just use whatever ammo was selected from above
;3923:			if ( pm->ps->zoomMode )
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1458
line 3924
;3924:			{
line 3925
;3925:				amount = pm->ps->ammo[weaponData[ pm->ps->weapon ].ammoIndex] - 
ADDRLP4 28
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
CNSTI4 56
ADDRLP4 28
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
MULI4
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRI4
ADDRGP4 weaponData
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
INDIRP4
CNSTI4 408
ADDP4
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
ADDRGP4 weaponData+20
ADDP4
INDIRI4
SUBI4
ASGNI4
line 3927
;3926:							weaponData[pm->ps->weapon].altEnergyPerShot;
;3927:			}
line 3928
;3928:		}
ADDRGP4 $1458
JUMPV
LABELV $1481
line 3930
;3929:		else
;3930:		{
line 3932
;3931:			// alt-fire button pressing doesn't use any ammo
;3932:			amount = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 3933
;3933:		}
line 3934
;3934:	}
ADDRGP4 $1458
JUMPV
LABELV $1457
line 3935
;3935:	else if (pm->ps->weapon == WP_DISRUPTOR) //still perform certain checks, even if the weapon is not ready
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1486
line 3936
;3936:	{
line 3937
;3937:		if (pm->cmd.upmove > 0 || pm->cmd.forwardmove || pm->cmd.rightmove)
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
GTI4 $1491
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
NEI4 $1491
ADDRLP4 8
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 12
INDIRI4
EQI4 $1488
LABELV $1491
line 3938
;3938:		{
line 3939
;3939:			if (pm->ps->zoomMode == 1 && pm->ps->zoomLockTime < pm->cmd.serverTime)
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1492
ADDRLP4 20
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1492
line 3940
;3940:			{ //check for == 1 so we can't turn binoculars off with disruptor alt fire
line 3941
;3941:				pm->ps->zoomMode = 0;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1320
ADDP4
CNSTI4 0
ASGNI4
line 3942
;3942:				pm->ps->zoomTime = pm->ps->commandTime;
ADDRLP4 24
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 1324
ADDP4
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
line 3943
;3943:				pm->ps->zoomLocked = qfalse;
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1328
ADDP4
CNSTI4 0
ASGNI4
line 3944
;3944:				PM_AddEvent(EV_DISRUPTOR_ZOOMSOUND);
CNSTI4 35
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 3945
;3945:			}
LABELV $1492
line 3946
;3946:		}
LABELV $1488
line 3947
;3947:	}
LABELV $1486
LABELV $1458
line 3978
;3948:
;3949:	/*
;3950:	// set the firing flag for continuous beam weapons
;3951:	if ( !(pm->ps->pm_flags & PMF_RESPAWNED) && pm->ps->pm_type != PM_INTERMISSION
;3952:		&& ( pm->cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)) && pm->ps->ammo[ weaponData[pm->ps->weapon].ammoIndex ] ) 
;3953:	{
;3954:		// Check more in depth here.
;3955:		if ((pm->cmd.buttons & BUTTON_ATTACK) && 
;3956:				pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] >= weaponData[pm->ps->weapon].energyPerShot)
;3957:		{
;3958:			pm->ps->eFlags |= EF_FIRING;
;3959:			pm->ps->eFlags &= ~EF_ALT_FIRING;
;3960:		}
;3961:		else if ((pm->cmd.buttons & BUTTON_ALT_ATTACK) && 
;3962:				pm->ps->ammo[weaponData[pm->ps->weapon].ammoIndex] >= weaponData[pm->ps->weapon].altEnergyPerShot)
;3963:		{
;3964:			pm->ps->eFlags |= (EF_FIRING|EF_ALT_FIRING);	// Both are set in the event of an alt fire
;3965:		}
;3966:		else
;3967:		{
;3968:			pm->ps->eFlags &= ~(EF_FIRING|EF_ALT_FIRING);
;3969:		}
;3970:	} 
;3971:	else 
;3972:	{
;3973:		pm->ps->eFlags &= ~(EF_FIRING|EF_ALT_FIRING);
;3974:	}
;3975:	*/
;3976:
;3977:	// set the firing flag for continuous beam weapons, saber will fire even if out of ammo
;3978:	if ( !(pm->ps->pm_flags & PMF_RESPAWNED) && 
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 16
INDIRI4
NEI4 $1494
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 6
EQI4 $1494
ADDRLP4 8
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 129
BANDI4
ADDRLP4 16
INDIRI4
EQI4 $1494
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
GEI4 $1496
ADDRLP4 12
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1494
LABELV $1496
line 3982
;3979:			pm->ps->pm_type != PM_INTERMISSION && 
;3980:			( pm->cmd.buttons & (BUTTON_ATTACK|BUTTON_ALT_ATTACK)) && 
;3981:			( amount >= 0 || pm->ps->weapon == WP_SABER ))
;3982:	{
line 3983
;3983:		if ( pm->cmd.buttons & BUTTON_ALT_ATTACK )
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $1497
line 3984
;3984:		{
line 3985
;3985:			pm->ps->eFlags |= EF_ALT_FIRING;
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 3986
;3986:		}
ADDRGP4 $1498
JUMPV
LABELV $1497
line 3988
;3987:		else
;3988:		{
line 3989
;3989:			pm->ps->eFlags &= ~EF_ALT_FIRING;
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 -513
BANDI4
ASGNI4
line 3990
;3990:		}
LABELV $1498
line 3993
;3991:
;3992:		// This flag should always get set, even when alt-firing
;3993:		pm->ps->eFlags |= EF_FIRING;
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 3994
;3994:	} 
ADDRGP4 $1495
JUMPV
LABELV $1494
line 3996
;3995:	else 
;3996:	{
line 3998
;3997:		// Clear 'em out
;3998:		pm->ps->eFlags &= ~(EF_FIRING|EF_ALT_FIRING);
ADDRLP4 20
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 -769
BANDI4
ASGNI4
line 3999
;3999:	}
LABELV $1495
line 4002
;4000:
;4001:	// disruptor should convert a main fire to an alt-fire if the gun is currently zoomed
;4002:	if ( pm->ps->weapon == WP_DISRUPTOR)
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1499
line 4003
;4003:	{
line 4004
;4004:		if ( pm->cmd.buttons & BUTTON_ATTACK && pm->ps->zoomMode == 1 && pm->ps->zoomLocked)
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
BANDI4
ADDRLP4 28
INDIRI4
EQI4 $1501
ADDRLP4 32
ADDRLP4 20
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $1501
ADDRLP4 32
INDIRP4
CNSTI4 1328
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $1501
line 4005
;4005:		{
line 4007
;4006:			// converting the main fire to an alt-fire
;4007:			pm->cmd.buttons |= BUTTON_ALT_ATTACK;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 4008
;4008:			pm->ps->eFlags |= EF_ALT_FIRING;
ADDRLP4 40
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 4009
;4009:		}
ADDRGP4 $1502
JUMPV
LABELV $1501
line 4010
;4010:		else if ( pm->cmd.buttons & BUTTON_ALT_ATTACK && pm->ps->zoomMode == 1 && pm->ps->zoomLocked)
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRLP4 36
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 40
INDIRI4
EQI4 $1503
ADDRLP4 44
ADDRLP4 36
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 1320
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1503
ADDRLP4 44
INDIRP4
CNSTI4 1328
ADDP4
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $1503
line 4011
;4011:		{
line 4012
;4012:			pm->cmd.buttons &= ~BUTTON_ALT_ATTACK;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 4013
;4013:			pm->ps->eFlags &= ~EF_ALT_FIRING;
ADDRLP4 52
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 -513
BANDI4
ASGNI4
line 4014
;4014:		}
LABELV $1503
LABELV $1502
line 4015
;4015:	}
LABELV $1499
line 4016
;4016:}
LABELV $1452
endproc PM_AdjustAttackStates 56 4
export BG_CmdForRoll
proc BG_CmdForRoll 8 0
line 4019
;4017:
;4018:void BG_CmdForRoll( int anim, usercmd_t *pCmd )
;4019:{
line 4020
;4020:	switch ( (anim&~ANIM_TOGGLEBIT) )
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 781
LTI4 $1506
ADDRLP4 0
INDIRI4
CNSTI4 784
GTI4 $1506
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1513-3124
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1513
address $1509
address $1510
address $1512
address $1511
code
line 4021
;4021:	{
LABELV $1509
line 4023
;4022:	case BOTH_ROLL_F:
;4023:		pCmd->forwardmove = 127;
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 127
ASGNI1
line 4024
;4024:		pCmd->rightmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 0
ASGNI1
line 4025
;4025:		break;
ADDRGP4 $1507
JUMPV
LABELV $1510
line 4027
;4026:	case BOTH_ROLL_B:
;4027:		pCmd->forwardmove = -127;
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 -127
ASGNI1
line 4028
;4028:		pCmd->rightmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 0
ASGNI1
line 4029
;4029:		break;
ADDRGP4 $1507
JUMPV
LABELV $1511
line 4031
;4030:	case BOTH_ROLL_R:
;4031:		pCmd->forwardmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 0
ASGNI1
line 4032
;4032:		pCmd->rightmove = 127;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 127
ASGNI1
line 4033
;4033:		break;
ADDRGP4 $1507
JUMPV
LABELV $1512
line 4035
;4034:	case BOTH_ROLL_L:
;4035:		pCmd->forwardmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
CNSTI1 0
ASGNI1
line 4036
;4036:		pCmd->rightmove = -127;
ADDRFP4 4
INDIRP4
CNSTI4 25
ADDP4
CNSTI1 -127
ASGNI1
line 4037
;4037:		break;
LABELV $1506
LABELV $1507
line 4039
;4038:	}
;4039:	pCmd->upmove = 0;
ADDRFP4 4
INDIRP4
CNSTI4 26
ADDP4
CNSTI1 0
ASGNI1
line 4040
;4040:}
LABELV $1505
endproc BG_CmdForRoll 8 0
export BG_AdjustClientSpeed
proc BG_AdjustClientSpeed 44 8
line 4043
;4041:
;4042:void BG_AdjustClientSpeed(playerState_t *ps, usercmd_t *cmd, int svTime)
;4043:{
line 4047
;4044:	//For prediction, always reset speed back to the last known server base speed
;4045:	//If we didn't do this, under lag we'd eventually dwindle speed down to 0 even though
;4046:	//that would not be the correct predicted value.
;4047:	ps->speed = ps->basespeed;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
ASGNI4
line 4049
;4048:
;4049:	if (ps->forceHandExtend == HANDEXTEND_DODGE)
ADDRFP4 0
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 7
NEI4 $1516
line 4050
;4050:	{
line 4051
;4051:		ps->speed = 0;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 0
ASGNI4
line 4052
;4052:	}
LABELV $1516
line 4054
;4053:
;4054:	if (ps->forceHandExtend == HANDEXTEND_KNOCKDOWN)
ADDRFP4 0
INDIRP4
CNSTI4 1236
ADDP4
INDIRI4
CNSTI4 8
NEI4 $1518
line 4055
;4055:	{
line 4056
;4056:		ps->speed = 0;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 0
ASGNI4
line 4057
;4057:	}
LABELV $1518
line 4059
;4058:
;4059:	if (ps->usingATST && (cmd->rightmove ||
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $1520
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 25
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
NEI4 $1522
ADDRLP4 8
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
EQI4 $1520
LABELV $1522
line 4061
;4060:		cmd->forwardmove))
;4061:	{
line 4062
;4062:		if (!ps->holdMoveTime)
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1521
line 4063
;4063:		{
line 4064
;4064:			ps->torsoAnim = ( ( ps->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 16
CNSTI4 2048
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 16
INDIRI4
BANDI4
ADDRLP4 16
INDIRI4
BXORI4
CNSTI4 732
BORI4
ASGNI4
line 4066
;4065:				| BOTH_RUN1START;
;4066:			ps->holdMoveTime = svTime;
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 4067
;4067:		}
line 4068
;4068:	}
ADDRGP4 $1521
JUMPV
LABELV $1520
line 4070
;4069:	else
;4070:	{
line 4071
;4071:		ps->holdMoveTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
CNSTI4 0
ASGNI4
line 4073
;4072:
;4073:		if (ps->usingATST)
ADDRFP4 0
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1525
line 4074
;4074:		{
line 4075
;4075:			ps->torsoAnim = ( ( ps->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 16
CNSTI4 2048
ASGNI4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRLP4 16
INDIRI4
BANDI4
ADDRLP4 16
INDIRI4
BXORI4
CNSTI4 550
BORI4
ASGNI4
line 4077
;4076:				| BOTH_STAND1;
;4077:		}
LABELV $1525
line 4078
;4078:	}
LABELV $1521
line 4080
;4079:
;4080:	if (ps->usingATST &&
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1527
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
ASGNI4
ADDRFP4 8
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
CNSTI4 500
LTI4 $1529
ADDRLP4 20
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $1527
LABELV $1529
line 4083
;4081:		((svTime - ps->holdMoveTime) < 500 ||
;4082:		!ps->holdMoveTime))
;4083:	{
line 4084
;4084:		ps->speed = 0;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 0
ASGNI4
line 4085
;4085:	}
ADDRGP4 $1528
JUMPV
LABELV $1527
line 4086
;4086:	else if (ps->usingATST)
ADDRFP4 0
INDIRP4
CNSTI4 1304
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1530
line 4087
;4087:	{
line 4088
;4088:		if ((svTime - ps->holdMoveTime) < 600)
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
SUBI4
CNSTI4 600
GEI4 $1532
line 4089
;4089:		{
line 4090
;4090:			ps->speed *= 0.4;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1053609165
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4091
;4091:		}
ADDRGP4 $1533
JUMPV
LABELV $1532
line 4092
;4092:		else if ((svTime - ps->holdMoveTime) < 1000)
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
SUBI4
CNSTI4 1000
GEI4 $1534
line 4093
;4093:		{
line 4094
;4094:			ps->speed *= 0.5;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1056964608
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4095
;4095:		}
ADDRGP4 $1535
JUMPV
LABELV $1534
line 4096
;4096:		else if ((svTime - ps->holdMoveTime) < 1400)
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
SUBI4
CNSTI4 1400
GEI4 $1536
line 4097
;4097:		{
line 4098
;4098:			ps->speed *= 0.6;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1058642330
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4099
;4099:		}
ADDRGP4 $1537
JUMPV
LABELV $1536
line 4100
;4100:		else if ((svTime - ps->holdMoveTime) < 1700)
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
SUBI4
CNSTI4 1700
GEI4 $1538
line 4101
;4101:		{
line 4102
;4102:			ps->speed *= 0.7;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1060320051
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4103
;4103:		}
ADDRGP4 $1539
JUMPV
LABELV $1538
line 4104
;4104:		else if ((svTime - ps->holdMoveTime) < 1900)
ADDRFP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1312
ADDP4
INDIRI4
SUBI4
CNSTI4 1900
GEI4 $1540
line 4105
;4105:		{
line 4106
;4106:			ps->speed *= 0.8;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1061997773
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4107
;4107:		}
LABELV $1540
LABELV $1539
LABELV $1537
LABELV $1535
LABELV $1533
line 4109
;4108:
;4109:		if (cmd->forwardmove < 0)
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $1542
line 4110
;4110:		{
line 4111
;4111:			ps->torsoAnim = ( ( ps->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 28
CNSTI4 2048
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ADDRLP4 28
INDIRI4
BANDI4
ADDRLP4 28
INDIRI4
BXORI4
CNSTI4 748
BORI4
ASGNI4
line 4113
;4112:				| BOTH_WALKBACK1;
;4113:			ps->speed *= 0.6;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTF4 1058642330
ADDRLP4 32
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4114
;4114:		}
ADDRGP4 $1543
JUMPV
LABELV $1542
line 4116
;4115:		else
;4116:		{
line 4117
;4117:			ps->torsoAnim = ( ( ps->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 28
CNSTI4 2048
ASGNI4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
ADDRLP4 28
INDIRI4
BANDI4
ADDRLP4 28
INDIRI4
BXORI4
CNSTI4 731
BORI4
ASGNI4
line 4119
;4118:				| BOTH_RUN1;
;4119:		}
LABELV $1543
line 4120
;4120:	}
LABELV $1530
LABELV $1528
line 4122
;4121:
;4122:	if (ps->fd.forcePowersActive & (1 << FP_SPEED))
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1544
line 4123
;4123:	{
line 4124
;4124:		if (ps->fd.forceSpeedSmash < 1.2)
ADDRFP4 0
INDIRP4
CNSTI4 1124
ADDP4
INDIRF4
CNSTF4 1067030938
GEF4 $1546
line 4125
;4125:		{
line 4126
;4126:			ps->fd.forceSpeedSmash = 1.2;
ADDRFP4 0
INDIRP4
CNSTI4 1124
ADDP4
CNSTF4 1067030938
ASGNF4
line 4127
;4127:		}
LABELV $1546
line 4128
;4128:		if (ps->fd.forceSpeedSmash > forceSpeedLevels[ps->fd.forcePowerLevel[FP_SPEED]]) //2.8
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 1124
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceSpeedLevels
ADDP4
INDIRF4
LEF4 $1548
line 4129
;4129:		{
line 4130
;4130:			ps->fd.forceSpeedSmash = forceSpeedLevels[ps->fd.forcePowerLevel[FP_SPEED]];
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 1124
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 forceSpeedLevels
ADDP4
INDIRF4
ASGNF4
line 4131
;4131:		}
LABELV $1548
line 4132
;4132:		ps->speed *= ps->fd.forceSpeedSmash;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 1124
ADDP4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 4133
;4133:		ps->fd.forceSpeedSmash += 0.005f;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 1124
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDF4
ASGNF4
line 4134
;4134:	}
LABELV $1544
line 4136
;4135:
;4136:	if (ps->fd.forcePowersActive & (1 << FP_RAGE))
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1550
line 4137
;4137:	{
line 4138
;4138:		ps->speed *= 1.3;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1067869798
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4139
;4139:	}
ADDRGP4 $1551
JUMPV
LABELV $1550
line 4140
;4140:	else if (ps->fd.forceRageRecoveryTime > svTime)
ADDRFP4 0
INDIRP4
CNSTI4 1160
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
LEI4 $1552
line 4141
;4141:	{
line 4142
;4142:		ps->speed *= 0.75;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1061158912
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4143
;4143:	}
LABELV $1552
LABELV $1551
line 4145
;4144:
;4145:	if (ps->fd.forceGripCripple)
ADDRFP4 0
INDIRP4
CNSTI4 1108
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1554
line 4146
;4146:	{
line 4147
;4147:		if (ps->fd.forcePowersActive & (1 << FP_RAGE))
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1556
line 4148
;4148:		{
line 4149
;4149:			ps->speed *= 0.9;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1063675494
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4150
;4150:		}
ADDRGP4 $1557
JUMPV
LABELV $1556
line 4151
;4151:		else if (ps->fd.forcePowersActive & (1 << FP_SPEED))
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $1558
line 4152
;4152:		{ //force speed will help us escape
line 4153
;4153:			ps->speed *= 0.8;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1061997773
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4154
;4154:		}
ADDRGP4 $1559
JUMPV
LABELV $1558
line 4156
;4155:		else
;4156:		{
line 4157
;4157:			ps->speed *= 0.2;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1045220557
ADDRLP4 24
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4158
;4158:		}
LABELV $1559
LABELV $1557
line 4159
;4159:	}	
LABELV $1554
line 4198
;4160:
;4161:	//if ( BG_SaberInAttack( ps->saberMove ) && cmd->forwardmove < 0 )	//Boot comment.
;4162:	//{//if running backwards while attacking, don't run as fast.
;4163:	//	switch( ps->fd.saberAnimLevel )
;4164:	//	{
;4165:	//	case FORCE_LEVEL_1:
;4166:	//		ps->speed *= 0.75f;
;4167:	//		break;
;4168:	//	case FORCE_LEVEL_2:
;4169:	//		ps->speed *= 0.60f;
;4170:	//		break;
;4171:	//	case FORCE_LEVEL_3:
;4172:	//		ps->speed *= 0.45f;
;4173:	//		break;
;4174:	//	default:
;4175:	//		break;
;4176:	//	}
;4177:	//}
;4178:	//else if ( BG_SpinningSaberAnim( ps->legsAnim ) )
;4179:	//{
;4180:	//	ps->speed *= 0.5f;
;4181:	//}
;4182:	//else if ( ps->weapon == WP_SABER && BG_SaberInAttack( ps->saberMove ) )
;4183:	//{//if attacking with saber while running, drop your speed
;4184:	//	switch( ps->fd.saberAnimLevel )
;4185:	//	{
;4186:	//	case FORCE_LEVEL_2:
;4187:	//		ps->speed *= 0.85f;
;4188:	//		break;
;4189:	//	case FORCE_LEVEL_3:
;4190:	//		ps->speed *= 0.70f;
;4191:	//		break;
;4192:	//	default:
;4193:	//		break;
;4194:	//	}
;4195:	//}
;4196:
;4197:
;4198:	if ( BG_InRoll( ps, ps->legsAnim ) && ps->speed > 200 )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRGP4 BG_InRoll
CALLI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $1560
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 200
LEI4 $1560
line 4199
;4199:	{ //can't roll unless you're able to move normally
line 4200
;4200:		BG_CmdForRoll( ps->legsAnim, cmd );
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 BG_CmdForRoll
CALLV
pop
line 4201
;4201:		if ((ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_ROLL_B)
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 782
NEI4 $1562
line 4202
;4202:		{ //backwards roll is pretty fast, should also be slower
line 4203
;4203:			ps->speed = ps->legsTimer/2.5;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1075838976
DIVF4
CVFI4 4
ASGNI4
line 4204
;4204:		}
ADDRGP4 $1563
JUMPV
LABELV $1562
line 4206
;4205:		else
;4206:		{
line 4207
;4207:			ps->speed = ps->legsTimer/1.5;//450;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1069547520
DIVF4
CVFI4 4
ASGNI4
line 4208
;4208:		}
LABELV $1563
line 4209
;4209:		if (ps->speed > 600)
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 600
LEI4 $1564
line 4210
;4210:		{
line 4211
;4211:			ps->speed = 600;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 600
ASGNI4
line 4212
;4212:		}
LABELV $1564
line 4214
;4213:		//Automatically slow down as the roll ends.
;4214:	}
LABELV $1560
line 4216
;4215:
;4216:	if (ps->pm_flags == PMF_ROLLING || (ps->legsAnim&~ANIM_TOGGLEBIT) == BOTH_ROLL_B)
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
EQI4 $1568
ADDRLP4 32
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 782
NEI4 $1566
LABELV $1568
line 4217
;4217:	{
line 4218
;4218:		ps->speed *= 0.65f;	//Slower rolls
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTF4 1059481190
ADDRLP4 36
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4219
;4219:	}
LABELV $1566
line 4222
;4220:
;4221:	//Boot
;4222:	if (!( pm->cmd.buttons & BUTTON_WALKING ))
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1569
line 4223
;4223:	{
line 4224
;4224:		if (cmd->forwardmove < 0 && ps->pm_flags != PMF_ROLLING && (ps->legsAnim&~ANIM_TOGGLEBIT) != BOTH_ROLL_B)
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $1571
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 4
EQI4 $1571
ADDRLP4 36
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
CNSTI4 782
EQI4 $1571
line 4225
;4225:		{
line 4226
;4226:			ps->speed *= 0.65f;	//Go slower backwards
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTF4 1059481190
ADDRLP4 40
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4227
;4227:			if (ps->speed < 100)
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CNSTI4 100
GEI4 $1573
line 4228
;4228:				ps->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTI4 100
ASGNI4
LABELV $1573
line 4229
;4229:		}
LABELV $1571
line 4230
;4230:	}
LABELV $1569
line 4232
;4231:
;4232:	if (ps->saberMove >= LS_A_TL2BR)
ADDRFP4 0
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 4
LTI4 $1575
line 4233
;4233:	{
line 4234
;4234:		ps->speed *= 0.8f;		//Go slower when attacking
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTF4 1061997773
ADDRLP4 36
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4235
;4235:	}
LABELV $1575
line 4238
;4236:
;4237:	
;4238:	if (ps->saberBlocked >= BLOCKED_UPPER_RIGHT && !(pm->cmd.buttons & BUTTON_WALKING))
ADDRFP4 0
INDIRP4
CNSTI4 520
ADDP4
INDIRI4
CNSTI4 3
LTI4 $1577
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $1577
line 4239
;4239:	{
line 4240
;4240:		ps->speed *= 0.8f;	//Go slower when parrying
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTF4 1061997773
ADDRLP4 36
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4241
;4241:	}
LABELV $1577
line 4242
;4242:}
LABELV $1515
endproc BG_AdjustClientSpeed 44 8
export PmoveSingle
proc PmoveSingle 108 16
line 4252
;4243:
;4244:/*
;4245:================
;4246:PmoveSingle
;4247:
;4248:================
;4249:*/
;4250:void trap_SnapVector( float *v );
;4251:
;4252:void PmoveSingle (pmove_t *pmove) {
line 4253
;4253:	pm = pmove;
ADDRGP4 pm
ADDRFP4 0
INDIRP4
ASGNP4
line 4255
;4254:
;4255:	gPMDoSlowFall = PM_DoSlowFall();
ADDRLP4 0
ADDRGP4 PM_DoSlowFall
CALLI4
ASGNI4
ADDRGP4 gPMDoSlowFall
ADDRLP4 0
INDIRI4
ASGNI4
line 4259
;4256:
;4257:	// this counter lets us debug movement problems with a journal
;4258:	// by setting a conditional breakpoint fot the previous frame
;4259:	c_pmove++;
ADDRLP4 4
ADDRGP4 c_pmove
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 4262
;4260:
;4261:	// clear results
;4262:	pm->numtouch = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
CNSTI4 0
ASGNI4
line 4263
;4263:	pm->watertype = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 0
ASGNI4
line 4264
;4264:	pm->waterlevel = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 0
ASGNI4
line 4266
;4265:
;4266:	if (pm->ps->pm_type == PM_FLOAT)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1580
line 4267
;4267:	{ //You get no control over where you go in grip movement
line 4268
;4268:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4269
;4269:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4270
;4270:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4271
;4271:	}
LABELV $1580
line 4273
;4272:
;4273:	if (pm->ps->eFlags & EF_DISINTEGRATION)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 33554432
BANDI4
CNSTI4 0
EQI4 $1582
line 4274
;4274:	{
line 4275
;4275:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4276
;4276:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4277
;4277:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4278
;4278:	}
LABELV $1582
line 4280
;4279:
;4280:	if ( pm->ps->saberMove == LS_A_LUNGE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 14
NEI4 $1584
line 4281
;4281:	{//can't move during lunge
line 4282
;4282:		pm->cmd.rightmove = pm->cmd.upmove = 0;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI1 0
ASGNI1
ADDRLP4 8
INDIRP4
CNSTI4 30
ADDP4
ADDRLP4 12
INDIRI1
ASGNI1
ADDRLP4 8
INDIRP4
CNSTI4 29
ADDP4
ADDRLP4 12
INDIRI1
ASGNI1
line 4283
;4283:		if ( pm->ps->legsTimer > 500 )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 500
LEI4 $1586
line 4284
;4284:		{
line 4285
;4285:			pm->cmd.forwardmove = 127;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 127
ASGNI1
line 4286
;4286:		}
ADDRGP4 $1587
JUMPV
LABELV $1586
line 4288
;4287:		else
;4288:		{
line 4289
;4289:			pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4290
;4290:		}
LABELV $1587
line 4291
;4291:	}
LABELV $1584
line 4293
;4292:
;4293:	if ( pm->ps->saberMove == LS_A_JUMP_T__B_ )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
CNSTI4 15
NEI4 $1588
line 4294
;4294:	{//can't move during leap
line 4295
;4295:		if ( pm->ps->groundEntityNum != ENTITYNUM_NONE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $1590
line 4296
;4296:		{//hit the ground
line 4297
;4297:			pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4298
;4298:		}
LABELV $1590
line 4299
;4299:		pm->cmd.rightmove = pm->cmd.upmove = 0;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI1 0
ASGNI1
ADDRLP4 8
INDIRP4
CNSTI4 30
ADDP4
ADDRLP4 12
INDIRI1
ASGNI1
ADDRLP4 8
INDIRP4
CNSTI4 29
ADDP4
ADDRLP4 12
INDIRI1
ASGNI1
line 4300
;4300:	}
LABELV $1588
line 4302
;4301:
;4302:	if ( pm->ps->saberMove == LS_A_BACK || pm->ps->saberMove == LS_A_BACK_CR 
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 512
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 12
EQI4 $1598
ADDRLP4 8
INDIRI4
CNSTI4 13
EQI4 $1598
ADDRLP4 8
INDIRI4
CNSTI4 11
EQI4 $1598
ADDRLP4 8
INDIRI4
CNSTI4 16
EQI4 $1598
ADDRLP4 8
INDIRI4
CNSTI4 17
EQI4 $1598
ADDRLP4 8
INDIRI4
CNSTI4 15
NEI4 $1592
LABELV $1598
line 4305
;4303:		|| pm->ps->saberMove == LS_A_BACKSTAB || pm->ps->saberMove == LS_A_FLIP_STAB ||
;4304:		pm->ps->saberMove == LS_A_FLIP_SLASH || pm->ps->saberMove == LS_A_JUMP_T__B_ )
;4305:	{
line 4306
;4306:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4307
;4307:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4308
;4308:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4309
;4309:	}
LABELV $1592
line 4311
;4310:
;4311:	if ((pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_A2_STABBACK1) ||
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 -2049
BANDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 803
EQI4 $1605
ADDRLP4 12
INDIRI4
CNSTI4 804
EQI4 $1605
ADDRLP4 12
INDIRI4
CNSTI4 809
EQI4 $1605
ADDRLP4 12
INDIRI4
CNSTI4 807
EQI4 $1605
ADDRLP4 12
INDIRI4
CNSTI4 806
EQI4 $1605
ADDRLP4 12
INDIRI4
CNSTI4 805
NEI4 $1599
LABELV $1605
line 4318
;4312:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_ATTACK_BACK) ||
;4313:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_CROUCHATTACKBACK1) ||
;4314:		//(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_LUNGE2_B__T_) ||
;4315:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_FORCELEAP2_T__B_) ||
;4316:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_JUMPFLIPSTABDOWN) ||
;4317:		(pm->ps->legsAnim&~ANIM_TOGGLEBIT) == (BOTH_JUMPFLIPSLASHDOWN1))
;4318:	{
line 4319
;4319:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4320
;4320:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4321
;4321:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4322
;4322:	}
LABELV $1599
line 4324
;4323:
;4324:	if (pm->ps->emplacedIndex)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 596
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1606
line 4325
;4325:	{
line 4326
;4326:		if (pm->cmd.forwardmove < 0)
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $1608
line 4327
;4327:		{
line 4328
;4328:			pm->ps->emplacedIndex = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 0
ASGNI4
line 4329
;4329:		}
ADDRGP4 $1609
JUMPV
LABELV $1608
line 4331
;4330:		else
;4331:		{
line 4332
;4332:			pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4333
;4333:			pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4334
;4334:			pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4335
;4335:		}
LABELV $1609
line 4336
;4336:	}
LABELV $1606
line 4338
;4337:
;4338:	if (pm->ps->weapon == WP_DISRUPTOR && pm->ps->weaponstate == WEAPON_CHARGING_ALT)
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 5
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $1610
ADDRLP4 16
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $1610
line 4339
;4339:	{ //not allowed to move while charging the disruptor
line 4340
;4340:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4341
;4341:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4342
;4342:		if (pm->cmd.upmove > 0)
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $1612
line 4343
;4343:		{
line 4344
;4344:			pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4345
;4345:		}
LABELV $1612
line 4346
;4346:	}
LABELV $1610
line 4348
;4347:
;4348:	BG_AdjustClientSpeed(pm->ps, &pm->cmd, pm->cmd.serverTime);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
INDIRI4
ARGI4
ADDRGP4 BG_AdjustClientSpeed
CALLV
pop
line 4350
;4349:
;4350:	if ( pm->ps->stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1614
line 4351
;4351:		pm->tracemask &= ~CONTENTS_BODY;	// corpses can fly through bodies
ADDRLP4 32
ADDRGP4 pm
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 -257
BANDI4
ASGNI4
line 4352
;4352:	}
LABELV $1614
line 4356
;4353:
;4354:	// make sure walking button is clear if they are running, to avoid
;4355:	// proxy no-footsteps cheats
;4356:	if ( abs( pm->cmd.forwardmove ) > 64 || abs( pm->cmd.rightmove ) > 64 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 32
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 64
GTI4 $1618
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 36
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 64
LEI4 $1616
LABELV $1618
line 4357
;4357:		pm->cmd.buttons &= ~BUTTON_WALKING;
ADDRLP4 40
ADDRGP4 pm
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 4358
;4358:	}
LABELV $1616
line 4362
;4359:
;4360:	// In certain situations, we may want to control which attack buttons are pressed and what kind of functionality
;4361:	//	is attached to them
;4362:	PM_AdjustAttackStates( pm );
ADDRGP4 pm
INDIRP4
ARGP4
ADDRGP4 PM_AdjustAttackStates
CALLV
pop
line 4365
;4363:
;4364:	// clear the respawned flag if attack and use are cleared
;4365:	if ( pm->ps->stats[STAT_HEALTH] > 0 && 
ADDRLP4 40
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 40
INDIRP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
LEI4 $1619
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 5
BANDI4
ADDRLP4 44
INDIRI4
NEI4 $1619
line 4366
;4366:		!( pm->cmd.buttons & (BUTTON_ATTACK | BUTTON_USE_HOLDABLE) ) ) {
line 4367
;4367:		pm->ps->pm_flags &= ~PMF_RESPAWNED;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -513
BANDI4
ASGNI4
line 4368
;4368:	}
LABELV $1619
line 4371
;4369:
;4370:	// clear all pmove local vars
;4371:	memset (&pml, 0, sizeof(pml));
ADDRGP4 pml
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1164
ARGI4
ADDRGP4 memset
CALLP4
pop
line 4374
;4372:
;4373:	// determine the time
;4374:	pml.msec = pmove->cmd.serverTime - pm->ps->commandTime;
ADDRGP4 pml+40
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
INDIRI4
SUBI4
ASGNI4
line 4375
;4375:	if ( pml.msec < 1 ) {
ADDRGP4 pml+40
INDIRI4
CNSTI4 1
GEI4 $1622
line 4376
;4376:		pml.msec = 1;
ADDRGP4 pml+40
CNSTI4 1
ASGNI4
line 4377
;4377:	} else if ( pml.msec > 200 ) {
ADDRGP4 $1623
JUMPV
LABELV $1622
ADDRGP4 pml+40
INDIRI4
CNSTI4 200
LEI4 $1626
line 4378
;4378:		pml.msec = 200;
ADDRGP4 pml+40
CNSTI4 200
ASGNI4
line 4379
;4379:	}
LABELV $1626
LABELV $1623
line 4380
;4380:	pm->ps->commandTime = pmove->cmd.serverTime;
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 4383
;4381:
;4382:	// save old org in case we get stuck
;4383:	VectorCopy (pm->ps->origin, pml.previous_origin);
ADDRGP4 pml+1136
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 4386
;4384:
;4385:	// save old velocity for crashlanding
;4386:	VectorCopy (pm->ps->velocity, pml.previous_velocity);
ADDRGP4 pml+1148
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRB
ASGNB 12
line 4388
;4387:
;4388:	pml.frametime = pml.msec * 0.001;
ADDRGP4 pml+36
CNSTF4 981668463
ADDRGP4 pml+40
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 4390
;4389:
;4390:	PM_AdjustAngleForWallRun(pm->ps, &pm->cmd, qtrue);
ADDRLP4 48
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 PM_AdjustAngleForWallRun
CALLI4
pop
line 4393
;4391:
;4392:	// update the viewangles
;4393:	PM_UpdateViewAngles( pm->ps, &pm->cmd );
ADDRLP4 52
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
INDIRP4
ARGP4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
ARGP4
ADDRGP4 PM_UpdateViewAngles
CALLV
pop
line 4395
;4394:
;4395:	AngleVectors (pm->ps->viewangles, pml.forward, pml.right, pml.up);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 156
ADDP4
ARGP4
ADDRGP4 pml
ARGP4
ADDRGP4 pml+12
ARGP4
ADDRGP4 pml+24
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 4397
;4396:
;4397:	if ( pm->cmd.upmove < 10 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
GEI4 $1636
line 4399
;4398:		// not holding jump
;4399:		pm->ps->pm_flags &= ~PMF_JUMP_HELD;
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 4400
;4400:	}
LABELV $1636
line 4403
;4401:
;4402:	// decide if backpedaling animations should be used
;4403:	if ( pm->cmd.forwardmove < 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $1638
line 4404
;4404:		pm->ps->pm_flags |= PMF_BACKWARDS_RUN;
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 4405
;4405:	} else if ( pm->cmd.forwardmove > 0 || ( pm->cmd.forwardmove == 0 && pm->cmd.rightmove ) ) {
ADDRGP4 $1639
JUMPV
LABELV $1638
ADDRLP4 56
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 56
INDIRP4
CNSTI4 28
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 64
CNSTI4 0
ASGNI4
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
GTI4 $1642
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
NEI4 $1640
ADDRLP4 56
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 64
INDIRI4
EQI4 $1640
LABELV $1642
line 4406
;4406:		pm->ps->pm_flags &= ~PMF_BACKWARDS_RUN;
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 4407
;4407:	}
LABELV $1640
LABELV $1639
line 4409
;4408:
;4409:	if ( pm->ps->pm_type >= PM_DEAD ) {
ADDRLP4 68
CNSTI4 4
ASGNI4
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
LTI4 $1643
line 4410
;4410:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4411
;4411:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4412
;4412:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4413
;4413:	}
LABELV $1643
line 4415
;4414:
;4415:	if (pm->ps->saberLockTime >= pm->cmd.serverTime)
ADDRLP4 72
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
INDIRP4
CNSTI4 524
ADDP4
INDIRI4
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
LTI4 $1645
line 4416
;4416:	{
line 4417
;4417:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4418
;4418:		pm->cmd.forwardmove = 50;
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 50
ASGNI1
line 4419
;4419:		pm->cmd.rightmove = 0;//*= 0.1;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4420
;4420:	}
LABELV $1645
line 4422
;4421:
;4422:	if ( pm->ps->pm_type == PM_SPECTATOR ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1647
line 4423
;4423:		PM_CheckDuck ();
ADDRGP4 PM_CheckDuck
CALLV
pop
line 4424
;4424:		PM_FlyMove ();
ADDRGP4 PM_FlyMove
CALLV
pop
line 4425
;4425:		PM_DropTimers ();
ADDRGP4 PM_DropTimers
CALLV
pop
line 4426
;4426:		return;
ADDRGP4 $1579
JUMPV
LABELV $1647
line 4429
;4427:	}
;4428:
;4429:	if ( pm->ps->pm_type == PM_NOCLIP ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1649
line 4430
;4430:		PM_NoclipMove ();
ADDRGP4 PM_NoclipMove
CALLV
pop
line 4431
;4431:		PM_DropTimers ();
ADDRGP4 PM_DropTimers
CALLV
pop
line 4432
;4432:		return;
ADDRGP4 $1579
JUMPV
LABELV $1649
line 4435
;4433:	}
;4434:
;4435:	if (pm->ps->pm_type == PM_FREEZE) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 5
NEI4 $1651
line 4436
;4436:		return;		// no movement at all
ADDRGP4 $1579
JUMPV
LABELV $1651
line 4439
;4437:	}
;4438:
;4439:	if ( pm->ps->pm_type == PM_INTERMISSION || pm->ps->pm_type == PM_SPINTERMISSION) {
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 6
EQI4 $1655
ADDRLP4 76
INDIRI4
CNSTI4 7
NEI4 $1653
LABELV $1655
line 4440
;4440:		return;		// no movement at all
ADDRGP4 $1579
JUMPV
LABELV $1653
line 4443
;4441:	}
;4442:
;4443:	if (gPMDoSlowFall)
ADDRGP4 gPMDoSlowFall
INDIRI4
CNSTI4 0
EQI4 $1656
line 4444
;4444:	{
line 4445
;4445:		pm->ps->gravity *= 0.5;
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTF4 1056964608
ADDRLP4 80
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 4446
;4446:	}
LABELV $1656
line 4449
;4447:
;4448:	// set watertype, and waterlevel
;4449:	PM_SetWaterLevel();
ADDRGP4 PM_SetWaterLevel
CALLV
pop
line 4450
;4450:	pml.previous_waterlevel = pmove->waterlevel;
ADDRGP4 pml+1160
ADDRFP4 0
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 4453
;4451:
;4452:	// set mins, maxs, and viewheight
;4453:	PM_CheckDuck ();
ADDRGP4 PM_CheckDuck
CALLV
pop
line 4456
;4454:
;4455:	// set groundentity
;4456:	PM_GroundTrace();
ADDRGP4 PM_GroundTrace
CALLV
pop
line 4458
;4457:
;4458:	if ( pm->ps->groundEntityNum != ENTITYNUM_NONE )
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 1023
EQI4 $1659
line 4459
;4459:	{//on ground
line 4460
;4460:		pm->ps->fd.forceJumpZStart = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 1080
ADDP4
CNSTF4 0
ASGNF4
line 4461
;4461:	}
LABELV $1659
line 4463
;4462:
;4463:	if ( pm->ps->pm_type == PM_DEAD ) {
ADDRLP4 80
CNSTI4 4
ASGNI4
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $1661
line 4464
;4464:		PM_DeadMove ();
ADDRGP4 PM_DeadMove
CALLV
pop
line 4465
;4465:	}
LABELV $1661
line 4467
;4466:
;4467:	PM_DropTimers();
ADDRGP4 PM_DropTimers
CALLV
pop
line 4469
;4468:
;4469:	if (pm->ps->pm_type == PM_FLOAT)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1663
line 4470
;4470:	{
line 4471
;4471:		PM_FlyMove ();
ADDRGP4 PM_FlyMove
CALLV
pop
line 4472
;4472:	}
ADDRGP4 $1664
JUMPV
LABELV $1663
line 4474
;4473:	else
;4474:	{
line 4475
;4475:		if (pm->ps->pm_flags & PMF_TIME_WATERJUMP) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1665
line 4476
;4476:			PM_WaterJumpMove();
ADDRGP4 PM_WaterJumpMove
CALLV
pop
line 4477
;4477:		} else if ( pm->waterlevel > 1 ) {
ADDRGP4 $1666
JUMPV
LABELV $1665
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1667
line 4479
;4478:			// swimming
;4479:			PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 4480
;4480:		} else if ( pml.walking ) {
ADDRGP4 $1668
JUMPV
LABELV $1667
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
EQI4 $1669
line 4482
;4481:			// walking on ground
;4482:			PM_WalkMove();
ADDRGP4 PM_WalkMove
CALLV
pop
line 4483
;4483:		} else {
ADDRGP4 $1670
JUMPV
LABELV $1669
line 4485
;4484:			// airborne
;4485:			PM_AirMove();
ADDRGP4 PM_AirMove
CALLV
pop
line 4486
;4486:		}
LABELV $1670
LABELV $1668
LABELV $1666
line 4487
;4487:	}
LABELV $1664
line 4489
;4488:
;4489:	PM_Animate();
ADDRGP4 PM_Animate
CALLV
pop
line 4492
;4490:
;4491:	// set groundentity, watertype, and waterlevel
;4492:	PM_GroundTrace();
ADDRGP4 PM_GroundTrace
CALLV
pop
line 4493
;4493:	PM_SetWaterLevel();
ADDRGP4 PM_SetWaterLevel
CALLV
pop
line 4495
;4494:
;4495:	if (pm->cmd.forcesel != -1 && (pm->ps->fd.forcePowersKnown & (1 << pm->cmd.forcesel)))
ADDRLP4 84
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 88
ADDRLP4 84
INDIRP4
CNSTI4 25
ADDP4
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 -1
EQI4 $1672
ADDRLP4 84
INDIRP4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 88
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1672
line 4496
;4496:	{
line 4497
;4497:		pm->ps->fd.forcePowerSelected = pm->cmd.forcesel;
ADDRLP4 92
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
INDIRP4
CNSTI4 840
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 25
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 4498
;4498:	}
LABELV $1672
line 4499
;4499:	if (pm->cmd.invensel != -1 && (pm->ps->stats[STAT_HOLDABLE_ITEMS] & (1 << pm->cmd.invensel)))
ADDRLP4 92
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 96
ADDRLP4 92
INDIRP4
CNSTI4 26
ADDP4
INDIRU1
CVUI4 1
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 -1
EQI4 $1674
ADDRLP4 92
INDIRP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 96
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1674
line 4500
;4500:	{
line 4501
;4501:		pm->ps->stats[STAT_HOLDABLE_ITEM] = BG_GetItemIndexByTag(pm->cmd.invensel, IT_HOLDABLE);
ADDRLP4 100
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 26
ADDP4
INDIRU1
CVUI4 1
ARGI4
CNSTI4 6
ARGI4
ADDRLP4 104
ADDRGP4 BG_GetItemIndexByTag
CALLI4
ASGNI4
ADDRLP4 100
INDIRP4
INDIRP4
CNSTI4 220
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 4502
;4502:	}
LABELV $1674
line 4505
;4503:
;4504:	// weapons
;4505:	PM_Weapon();
ADDRGP4 PM_Weapon
CALLV
pop
line 4507
;4506:
;4507:	PM_Use();
ADDRGP4 PM_Use
CALLV
pop
line 4509
;4508:
;4509:	if (pm->ps->pm_flags & PMF_UPDATE_ANIM)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1676
line 4510
;4510:	{
line 4512
;4511://		PM_UpdateGhoul2AnimFromState();
;4512:	}
LABELV $1676
line 4515
;4513:
;4514:	// footstep events / legs animations
;4515:	PM_Footsteps();
ADDRGP4 PM_Footsteps
CALLV
pop
line 4518
;4516:
;4517:	// entering / leaving water splashes
;4518:	PM_WaterEvents();
ADDRGP4 PM_WaterEvents
CALLV
pop
line 4521
;4519:
;4520:	// snap some parts of playerstate to save network bandwidth
;4521:	trap_SnapVector( pm->ps->velocity );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 trap_SnapVector
CALLV
pop
line 4523
;4522:
;4523:	if (gPMDoSlowFall)
ADDRGP4 gPMDoSlowFall
INDIRI4
CNSTI4 0
EQI4 $1678
line 4524
;4524:	{
line 4525
;4525:		pm->ps->gravity *= 2;
ADDRLP4 100
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 4526
;4526:	}
LABELV $1678
line 4527
;4527:}
LABELV $1579
endproc PmoveSingle 108 16
export Pmove
proc Pmove 16 4
line 4537
;4528:
;4529:
;4530:/*
;4531:================
;4532:Pmove
;4533:
;4534:Can be called by either the server or the client
;4535:================
;4536:*/
;4537:void Pmove (pmove_t *pmove) {
line 4540
;4538:	int			finalTime;
;4539:
;4540:	finalTime = pmove->cmd.serverTime;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 4542
;4541:
;4542:	if ( finalTime < pmove->ps->commandTime ) {
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
GEI4 $1681
line 4543
;4543:		return;	// should not happen
ADDRGP4 $1680
JUMPV
LABELV $1681
line 4546
;4544:	}
;4545:
;4546:	if ( finalTime > pmove->ps->commandTime + 1000 ) {
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
CNSTI4 1000
ADDI4
LEI4 $1683
line 4547
;4547:		pmove->ps->commandTime = finalTime - 1000;
ADDRFP4 0
INDIRP4
INDIRP4
ADDRLP4 0
INDIRI4
CNSTI4 1000
SUBI4
ASGNI4
line 4548
;4548:	}
LABELV $1683
line 4550
;4549:
;4550:	if (pmove->ps->fallingToDeath)
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 1340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1685
line 4551
;4551:	{
line 4552
;4552:		pmove->cmd.forwardmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTI1 0
ASGNI1
line 4553
;4553:		pmove->cmd.rightmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 4554
;4554:		pmove->cmd.upmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 4555
;4555:		pmove->cmd.buttons = 0;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 0
ASGNI4
line 4556
;4556:	}
LABELV $1685
line 4558
;4557:
;4558:	pmove->ps->pmove_framecount = (pmove->ps->pmove_framecount+1) & ((1<<PS_PMOVEFRAMECOUNTBITS)-1);
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 488
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 63
BANDI4
ASGNI4
ADDRGP4 $1688
JUMPV
LABELV $1687
line 4562
;4559:
;4560:	// chop the move up if it is too long, to prevent framerate
;4561:	// dependent behavior
;4562:	while ( pmove->ps->commandTime != finalTime ) {
line 4565
;4563:		int		msec;
;4564:
;4565:		msec = finalTime - pmove->ps->commandTime;
ADDRLP4 8
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
SUBI4
ASGNI4
line 4567
;4566:
;4567:		if ( pmove->pmove_fixed ) {
ADDRFP4 0
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1690
line 4568
;4568:			if ( msec > pmove->pmove_msec ) {
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
LEI4 $1691
line 4569
;4569:				msec = pmove->pmove_msec;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 236
ADDP4
INDIRI4
ASGNI4
line 4570
;4570:			}
line 4571
;4571:		}
ADDRGP4 $1691
JUMPV
LABELV $1690
line 4572
;4572:		else {
line 4573
;4573:			if ( msec > 66 ) {
ADDRLP4 8
INDIRI4
CNSTI4 66
LEI4 $1694
line 4574
;4574:				msec = 66;
ADDRLP4 8
CNSTI4 66
ASGNI4
line 4575
;4575:			}
LABELV $1694
line 4576
;4576:		}
LABELV $1691
line 4577
;4577:		pmove->cmd.serverTime = pmove->ps->commandTime + msec;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRP4
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 4578
;4578:		PmoveSingle( pmove );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 PmoveSingle
CALLV
pop
line 4580
;4579:
;4580:		if ( pmove->ps->pm_flags & PMF_JUMP_HELD ) {
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1696
line 4581
;4581:			pmove->cmd.upmove = 20;
ADDRFP4 0
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 20
ASGNI1
line 4582
;4582:		}
LABELV $1696
line 4583
;4583:	}
LABELV $1688
line 4562
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1687
line 4587
;4584:
;4585:	//PM_CheckStuck();
;4586:
;4587:}
LABELV $1680
endproc Pmove 16 4
import trap_SnapVector
import PM_SetSaberMove
import PM_WeaponLightsaber
import PM_SetAnim
import PM_ForceLegsAnim
import PM_ContinueLegsAnim
import PM_StartTorsoAnim
import BG_CycleInven
import PM_StepSlideMove
import PM_SlideMove
import PM_SaberJumpAttackMove
import PM_SaberFlipOverAttackMove
import PM_SomeoneInFront
import PM_GroundDistance
import PM_AnimLength
import PM_InRollComplete
import PM_InOnGroundAnim
import PM_SpinningAnim
import PM_LandingAnim
import PM_JumpingAnim
import PM_PainAnim
import PM_InKnockDown
import PM_InSaberAnim
import PM_SaberInStart
import PM_SaberInReflect
import PM_SaberInParry
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
bss
export pml
align 4
LABELV pml
skip 1164
import forcePowerDarkLight
import WeaponAttackAnim
import WeaponReadyAnim
import BG_OutOfMemory
import BG_StringAlloc
import BG_TempFree
import BG_TempAlloc
import BG_AllocUnaligned
import BG_Alloc
import BG_CanUseFPNow
import BG_HasYsalamiri
import BG_GetItemIndexByTag
import BG_ParseAnimationFile
import BG_PlayerTouchesItem
import BG_G2PlayerAngles
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_ForcePowerDrain
import BG_SaberStartTransAnim
import BG_InDeathAnim
import BG_InRoll
import BG_SaberInSpecialAttack
import BG_SpinningSaberAnim
import BG_FlippingAnim
import BG_SaberInIdle
import BG_SaberInSpecial
import BG_SaberInAttack
import BG_DirectFlippingAnim
import BG_InSaberStandAnim
import BG_InSpecialJump
import BG_LegalizedForcePowers
import saberMoveData
import BG_CanItemBeGrabbed
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindItem
import vectoyaw
import bg_numItems
import bg_itemlist
export pm
align 4
LABELV pm
skip 4
import bgForcePowerCost
import forceMasteryPoints
import forceMasteryLevels
import bgGlobalAnimations
import BGPAFtextLoaded
import forcePowerSorted
import WP_MuzzlePoint
import ammoData
import weaponData
import GetStringForID
import GetIDForString
import Q_irand
import irand
import flrand
import Rand_Init
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import va
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_strrchr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import SkipWhitespace
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_SkipPath
import Com_Clamp
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import powf
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkBlue
import colorLtBlue
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import colorTable
import bytedirs
import Com_Memcpy
import Com_Memset
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import vsprintf
import _atoi
import atoi
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strchr
import strcmp
import strcpy
import strcat
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $899
char 1 37
char 1 105
char 1 58
char 1 76
char 1 97
char 1 110
char 1 100
char 1 10
char 1 0
align 1
LABELV $888
char 1 37
char 1 105
char 1 58
char 1 115
char 1 116
char 1 101
char 1 101
char 1 112
char 1 10
char 1 0
align 1
LABELV $877
char 1 37
char 1 105
char 1 58
char 1 107
char 1 105
char 1 99
char 1 107
char 1 111
char 1 102
char 1 102
char 1 10
char 1 0
align 1
LABELV $830
char 1 37
char 1 105
char 1 58
char 1 108
char 1 105
char 1 102
char 1 116
char 1 10
char 1 0
align 1
LABELV $803
char 1 37
char 1 105
char 1 58
char 1 97
char 1 108
char 1 108
char 1 115
char 1 111
char 1 108
char 1 105
char 1 100
char 1 10
char 1 0
